"use strict";function ownKeys(e,t){var i,n=Object.keys(e);return Object.getOwnPropertySymbols&&(i=Object.getOwnPropertySymbols(e),t&&(i=i.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,i)),n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(i),!0).forEach(function(t){_defineProperty(e,t,i[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):ownKeys(Object(i)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))})}return e}function _defineProperty(t,e,i){return(e=_toPropertyKey(e))in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0===i)return("string"===e?String:Number)(t);i=i.call(t,e||"default");if("object"!==_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _createForOfIteratorHelper(t,e){var i,n,s,o,r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(r)return n=!(i=!0),{s:function(){r=r.call(t)},n:function(){var t=r.next();return i=t.done,t},e:function(t){n=!0,s=t},f:function(){try{i||null==r.return||r.return()}finally{if(n)throw s}}};if(Array.isArray(t)||(r=_unsupportedIterableToArray(t))||e&&t&&"number"==typeof t.length)return r&&(t=r),o=0,{s:e=function(){},n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:e};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(t,e){var i;if(t)return"string"==typeof t?_arrayLikeToArray(t,e):"Map"===(i="Object"===(i=Object.prototype.toString.call(t).slice(8,-1))&&t.constructor?t.constructor.name:i)||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?_arrayLikeToArray(t,e):void 0}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function n(s,o,r){function a(e,t){if(!o[e]){if(!s[e]){var i="function"==typeof require&&require;if(!t&&i)return i(e,!0);if(l)return l(e,!0);throw(t=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",t}i=o[e]={exports:{}},s[e][0].call(i.exports,function(t){return a(s[e][1][t]||t)},i,i.exports,n,s,o,r)}return o[e].exports}for(var l="function"==typeof require&&require,t=0;t<r.length;t++)a(r[t]);return a}({1:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(){function t(){}var e=t.prototype;return e.on=function(t,e){var i;return t&&e&&((i=(i=this._events=this._events||{})[t]=i[t]||[]).includes(e)||i.push(e)),this},e.once=function(t,e){var i;return t&&e&&(this.on(t,e),((i=this._onceEvents=this._onceEvents||{})[t]=i[t]||{})[e]=!0),this},e.off=function(t,e){t=this._events&&this._events[t];return t&&t.length&&-1!=(e=t.indexOf(e))&&t.splice(e,1),this},e.emitEvent=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){i=i.slice(0),e=e||[];var n,s=this._onceEvents&&this._onceEvents[t],o=_createForOfIteratorHelper(i);try{for(o.s();!(n=o.n()).done;){var r=n.value;s&&s[r]&&(this.off(t,r),delete s[r]),r.apply(this,e)}}catch(t){o.e(t)}finally{o.f()}}return this},e.allOff=function(){return delete this._events,delete this._onceEvents,this},t},"object"==_typeof(e)&&e.exports?e.exports=s():n.EvEmitter=s()},{}],2:[function(t,e,i){var n,s;n=this,s=function(e){var i={extend:function(t,e){return Object.assign(t,e)},modulo:function(t,e){return(t%e+e)%e},makeArray:function(t){return Array.isArray(t)?t:null==t?[]:"object"==_typeof(t)&&"number"==typeof t.length?_toConsumableArray(t):[t]},removeFrom:function(t,e){e=t.indexOf(e);-1!=e&&t.splice(e,1)},getParent:function(t,e){for(;t.parentNode&&t!=document.body;)if((t=t.parentNode).matches(e))return t},getQueryElement:function(t){return"string"==typeof t?document.querySelector(t):t},handleEvent:function(t){var e="on"+t.type;this[e]&&this[e](t)},filterFindElements:function(t,n){return(t=i.makeArray(t)).filter(function(t){return t instanceof HTMLElement}).reduce(function(t,e){var i;return n?(e.matches(n)&&t.push(e),i=e.querySelectorAll(n),t=t.concat.apply(t,_toConsumableArray(i))):t.push(e),t},[])},debounceMethod:function(t,e,i){i=i||100;var n=t.prototype[e],s=e+"Timeout";t.prototype[e]=function(){var t=this,e=(clearTimeout(this[s]),arguments);this[s]=setTimeout(function(){n.apply(t,e),delete t[s]},i)}},docReady:function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},toDashed:function(t){return t.replace(/(.)([A-Z])/g,function(t,e,i){return e+"-"+i}).toLowerCase()}},a=e.console;return i.htmlInit=function(o,r){i.docReady(function(){var n="data-"+i.toDashed(r),t=document.querySelectorAll("[".concat(n,"]")),s=e.jQuery;_toConsumableArray(t).forEach(function(e){var t,i=e.getAttribute(n);try{t=i&&JSON.parse(i)}catch(t){return void(a&&a.error("Error parsing ".concat(n," on ").concat(e.className,": ").concat(t)))}i=new o(e,t);s&&s.data(e,r,i)})})},i},"object"==_typeof(e)&&e.exports?e.exports=s(n):n.fizzyUIUtils=s(n)},{}],3:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t,s){var e=t.prototype;return e.insert=function(t,e){var i,n,s,o,r,t=this._makeCells(t);t&&t.length&&(i=this.cells.length,e=void 0===e?i:e,r=t,n=document.createDocumentFragment(),r.forEach(function(t){return n.appendChild(t.element)}),r=n,(s=e===i)?this.slider.appendChild(r):(o=this.cells[e].element,this.slider.insertBefore(r,o)),0===e?this.cells=t.concat(this.cells):s?this.cells=this.cells.concat(t):(r=this.cells.splice(e,i-e),this.cells=this.cells.concat(t).concat(r)),this._sizeCells(t),this.cellChange(e),this.positionSliderAtSelected())},e.append=function(t){this.insert(t,this.cells.length)},e.prepend=function(t){this.insert(t,0)},e.remove=function(t){var i,n=this,t=this.getCells(t);t&&t.length&&(i=this.cells.length-1,t.forEach(function(t){t.remove();var e=n.cells.indexOf(t);i=Math.min(e,i),s.removeFrom(n.cells,t)}),this.cellChange(i),this.positionSliderAtSelected())},e.cellSizeChange=function(t){var t=this.getCell(t);t&&(t.getSize(),t=this.cells.indexOf(t),this.cellChange(t))},e.cellChange=function(t){var e=this.selectedElement,e=(this._positionCells(t),this._updateWrapShiftCells(),this.setGallerySize(),this.getCell(e));e&&(this.selectedIndex=this.getCellSlideIndex(e)),this.selectedIndex=Math.min(this.slides.length-1,this.selectedIndex),this.emitEvent("cellChange",[t]),this.select(this.selectedIndex)},t},"object"==_typeof(e)&&e.exports?e.exports=s(t("./core"),t("fizzy-ui-utils")):s(n.Flickity,n.fizzyUIUtils)},{"./core":6,"fizzy-ui-utils":2}],4:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(e){var t={startAnimation:function(){this.isAnimating||(this.isAnimating=!0,this.restingFrames=0,this.animate())},animate:function(){var t=this,e=(this.applyDragForce(),this.applySelectedAttraction(),this.x);this.integratePhysics(),this.positionSlider(),this.settle(e),this.isAnimating&&requestAnimationFrame(function(){return t.animate()})},positionSlider:function(){var t=this.x;this.isWrapping&&(t=e.modulo(t,this.slideableWidth)-this.slideableWidth,this.shiftWrapCells(t)),this.setTranslateX(t,this.isAnimating),this.dispatchScrollEvent()},setTranslateX:function(t,e){t+=this.cursorPosition,this.options.rightToLeft&&(t=-t);t=this.getPositionValue(t);this.slider.style.transform=e?"translate3d(".concat(t,",0,0)"):"translateX(".concat(t,")")},dispatchScrollEvent:function(){var t,e=this.slides[0];e&&(t=(e=-this.x-e.target)/this.slidesWidth,this.dispatchEvent("scroll",null,[t,e]))},positionSliderAtSelected:function(){this.cells.length&&(this.x=-this.selectedSlide.target,this.velocity=0,this.positionSlider())},getPositionValue:function(t){return this.options.percentPosition?.01*Math.round(t/this.size.innerWidth*1e4)+"%":Math.round(t)+"px"},settle:function(t){this.isPointerDown||Math.round(100*this.x)!==Math.round(100*t)||this.restingFrames++,2<this.restingFrames&&(this.isAnimating=!1,delete this.isFreeScrolling,this.positionSlider(),this.dispatchEvent("settle",null,[this.selectedIndex]))},shiftWrapCells:function(t){var e=this.cursorPosition+t,e=(this._shiftCells(this.beforeShiftCells,e,-1),this.size.innerWidth-(t+this.slideableWidth+this.cursorPosition));this._shiftCells(this.afterShiftCells,e,1)},_shiftCells:function(t,i,n){var s=this;t.forEach(function(t){var e=0<i?n:0;s._wrapShiftCell(t,e),i-=t.size.outerWidth})},_unshiftCells:function(t){var e=this;t&&t.length&&t.forEach(function(t){return e._wrapShiftCell(t,0)})},_wrapShiftCell:function(t,e){this._renderCellPosition(t,t.x+this.slideableWidth*e)},integratePhysics:function(){this.x+=this.velocity,this.velocity*=this.getFrictionFactor()},applyForce:function(t){this.velocity+=t},getFrictionFactor:function(){return 1-this.options[this.isFreeScrolling?"freeScrollFriction":"friction"]},getRestingPosition:function(){return this.x+this.velocity/(1-this.getFrictionFactor())},applyDragForce:function(){var t;this.isDraggable&&this.isPointerDown&&(t=this.dragX-this.x-this.velocity,this.applyForce(t))},applySelectedAttraction:function(){var t;this.isDraggable&&this.isPointerDown||this.isFreeScrolling||!this.slides.length||(t=(-1*this.selectedSlide.target-this.x)*this.options.selectedAttraction,this.applyForce(t))}};return t},"object"==_typeof(e)&&e.exports?e.exports=s(t("fizzy-ui-utils")):(n.Flickity=n.Flickity||{},n.Flickity.animatePrototype=s(n.fizzyUIUtils))},{"fizzy-ui-utils":2}],5:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t){var e="flickity-cell";function i(t){this.element=t,this.element.classList.add(e),this.x=0,this.unselect()}var n=i.prototype;return n.destroy=function(){this.unselect(),this.element.classList.remove(e),this.element.style.transform="",this.element.removeAttribute("aria-hidden")},n.getSize=function(){this.size=t(this.element)},n.select=function(){this.element.classList.add("is-selected"),this.element.removeAttribute("aria-hidden")},n.unselect=function(){this.element.classList.remove("is-selected"),this.element.setAttribute("aria-hidden","true")},n.remove=function(){this.element.remove()},i},"object"==_typeof(e)&&e.exports?e.exports=s(t("get-size")):(n.Flickity=n.Flickity||{},n.Flickity.Cell=s(n.getSize))},{"get-size":15}],6:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(a,t,e,l,i,h,n){var s=a.getComputedStyle,o=a.console,r=a.jQuery,c=0,u={};function d(t,e){var i,n=l.getQueryElement(t);if(n){if(this.element=n,this.element.flickityGUID)return(i=u[this.element.flickityGUID])&&i.option(e),i;r&&(this.$element=r(this.element)),this.options=_objectSpread({},this.constructor.defaults),this.option(e),this._create()}else o&&o.error("Bad element for Flickity: ".concat(n||t))}d.defaults={accessibility:!0,cellAlign:"center",freeScrollFriction:.075,friction:.28,namespaceJQueryEvents:!0,percentPosition:!0,resize:!0,selectedAttraction:.025,setGallerySize:!0},d.create={};var f=d.prototype,p=(Object.assign(f,t.prototype),f._create=function(){var t,e,i=this.options,n=i.resize,s=i.watchCSS,i=i.rightToLeft,o=this.guid=++c;for(t in this.element.flickityGUID=o,(u[o]=this).selectedIndex=0,this.restingFrames=0,this.x=0,this.velocity=0,this.beginMargin=i?"marginRight":"marginLeft",this.endMargin=i?"marginLeft":"marginRight",this.viewport=document.createElement("div"),this.viewport.className="flickity-viewport",this._createSlider(),this.focusableElems=[this.element],(n||s)&&a.addEventListener("resize",this),this.options.on){var r=this.options.on[t];this.on(t,r)}for(e in d.create)d.create[e].call(this);s?this.watchCSS():this.activate()},f.option=function(t){Object.assign(this.options,t)},f.activate=function(){var t,e;this.isActive||(this.isActive=!0,this.element.classList.add("flickity-enabled"),this.options.rightToLeft&&this.element.classList.add("flickity-rtl"),this.getSize(),e=this._filterFindCellElements(this.element.children),(t=this.slider).append.apply(t,_toConsumableArray(e)),this.viewport.append(this.slider),this.element.append(this.viewport),this.reloadCells(),this.options.accessibility&&(this.element.tabIndex=0,this.element.addEventListener("keydown",this)),this.emitEvent("activate"),this.selectInitialIndex(),this.isInitActivated=!0,this.dispatchEvent("ready"))},f._createSlider=function(){var t=document.createElement("div");t.className="flickity-slider",this.slider=t},f._filterFindCellElements=function(t){return l.filterFindElements(t,this.options.cellSelector)},f.reloadCells=function(){this.cells=this._makeCells(this.slider.children),this.positionCells(),this._updateWrapShiftCells(),this.setGallerySize()},f._makeCells=function(t){return this._filterFindCellElements(t).map(function(t){return new i(t)})},f.getLastCell=function(){return this.cells[this.cells.length-1]},f.getLastSlide=function(){return this.slides[this.slides.length-1]},f.positionCells=function(){this._sizeCells(this.cells),this._positionCells(0)},f._positionCells=function(t){var e,i=this,n=(this.maxCellHeight=(t=t||0)&&this.maxCellHeight||0,0);0<t&&(e=this.cells[t-1],n=e.x+e.size.outerWidth),this.cells.slice(t).forEach(function(t){t.x=n,i._renderCellPosition(t,n),n+=t.size.outerWidth,i.maxCellHeight=Math.max(t.size.outerHeight,i.maxCellHeight)}),this.slideableWidth=n,this.updateSlides(),this._containSlides(),this.slidesWidth=this.cells.length?this.getLastSlide().target-this.slides[0].target:0},f._renderCellPosition=function(t,e){e*=this.options.rightToLeft?-1:1,this.options.percentPosition&&(e*=this.size.innerWidth/t.size.width),e=this.getPositionValue(e);t.element.style.transform="translateX( ".concat(e," )")},f._sizeCells=function(t){t.forEach(function(t){return t.getSize()})},f.updateSlides=function(){var n,s,o,r,a=this;this.slides=[],this.cells.length&&(n=this.beginMargin,s=this.endMargin,o=new h(n,s,this.cellAlign),this.slides.push(o),r=this._getCanCellFit(),this.cells.forEach(function(t,e){var i;o.cells.length&&(i=o.outerWidth-o.firstMargin+(t.size.outerWidth-t.size[s]),r(e,i)||(o.updateTarget(),o=new h(n,s,a.cellAlign),a.slides.push(o))),o.addCell(t)}),o.updateTarget(),this.updateSelectedSlide())},f._getCanCellFit=function(){var e,t,i,n=this.options.groupCells;return n?"number"==typeof n?(e=parseInt(n,10),function(t){return t%e!=0}):(t=1,(n="string"==typeof n&&n.match(/^(\d+)%$/))&&(t=parseInt(n[1],10)/100),i=(this.size.innerWidth+1)*t,function(t,e){return e<=i}):function(){return!1}},f._init=f.reposition=function(){this.positionCells(),this.positionSliderAtSelected()},f.getSize=function(){this.size=e(this.element),this.setCellAlign(),this.cursorPosition=this.size.innerWidth*this.cellAlign},{left:0,center:.5,right:1}),g=(f.setCellAlign=function(){var t=this.options,e=t.cellAlign,t=t.rightToLeft,i=p[e];this.cellAlign=void 0!==i?i:e,t&&(this.cellAlign=1-this.cellAlign)},f.setGallerySize=function(){var t;this.options.setGallerySize&&(t=this.options.adaptiveHeight&&this.selectedSlide?this.selectedSlide.height:this.maxCellHeight,this.viewport.style.height="".concat(t,"px"))},f._updateWrapShiftCells=function(){var t,e;this.isWrapping=this.getIsWrapping(),this.isWrapping&&(this._unshiftCells(this.beforeShiftCells),this._unshiftCells(this.afterShiftCells),e=this.cursorPosition,t=this.cells.length-1,this.beforeShiftCells=this._getGapCells(e,t,-1),e=this.size.innerWidth-this.cursorPosition,this.afterShiftCells=this._getGapCells(e,0,1))},f.getIsWrapping=function(){var t=this.options.wrapAround;if(!t||this.slides.length<2)return!1;if("fill"===t){var e=this.slideableWidth-this.size.innerWidth;if(!(e>this.size.innerWidth)){var i,n=_createForOfIteratorHelper(this.cells);try{for(n.s();!(i=n.n()).done;)if(i.value.size.outerWidth>e)return!1}catch(t){n.e(t)}finally{n.f()}}}return!0},f._getGapCells=function(t,e,i){for(var n=[];0<t;){var s=this.cells[e];if(!s)break;n.push(s),e+=i,t-=s.size.outerWidth}return n},f._containSlides=function(){var e,i,n,s=this;this.options.contain&&!this.isWrapping&&this.cells.length&&((e=this.slideableWidth-this.getLastCell().size[this.endMargin])<this.size.innerWidth?this.slides.forEach(function(t){t.target=e*s.cellAlign}):(i=this.cursorPosition+this.cells[0].size[this.beginMargin],n=e-this.size.innerWidth*(1-this.cellAlign),this.slides.forEach(function(t){t.target=Math.max(t.target,i),t.target=Math.min(t.target,n)})))},f.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;this.emitEvent(t,n),r&&this.$element&&(n=t+=this.options.namespaceJQueryEvents?".flickity":"",e&&((e=new r.Event(e)).type=t,n=e),this.$element.trigger(n,i))},["dragStart","dragMove","dragEnd","pointerDown","pointerMove","pointerEnd","staticClick"]),m=f.emitEvent,t=(f.emitEvent=function(t,e){var i,n;"staticClick"===t&&(i=(n=this.getParentCell(e[0].target))&&n.element,n=n&&this.cells.indexOf(n),e=e.concat(i,n)),m.call(this,t,e),g.includes(t)&&r&&this.$element&&(t+=this.options.namespaceJQueryEvents?".flickity":"",i=e.shift(0),(n=new r.Event(i)).type=t,this.$element.trigger(n,e))},f.select=function(t,e,i){this.isActive&&(t=parseInt(t,10),this._wrapSelect(t),(this.isWrapping||e)&&(t=l.modulo(t,this.slides.length)),this.slides[t])&&(e=this.selectedIndex,this.selectedIndex=t,this.updateSelectedSlide(),i?this.positionSliderAtSelected():this.startAnimation(),this.options.adaptiveHeight&&this.setGallerySize(),this.dispatchEvent("select",null,[t]),t!==e)&&this.dispatchEvent("change",null,[t])},f._wrapSelect=function(t){var e,i,n,s,o,r;this.isWrapping&&(e=this.selectedIndex,i=this.slideableWidth,n=this.slides.length,this.isDragSelect||(r=l.modulo(t,n),s=Math.abs(r-e),o=Math.abs(r+n-e),r=Math.abs(r-n-e),o<s?t+=n:r<s&&(t-=n)),t<0?this.x-=i:n<=t&&(this.x+=i))},f.previous=function(t,e){this.select(this.selectedIndex-1,t,e)},f.next=function(t,e){this.select(this.selectedIndex+1,t,e)},f.updateSelectedSlide=function(){var t=this.slides[this.selectedIndex];t&&(this.unselectSelectedSlide(),(this.selectedSlide=t).select(),this.selectedCells=t.cells,this.selectedElements=t.getCellElements(),this.selectedCell=t.cells[0],this.selectedElement=this.selectedElements[0])},f.unselectSelectedSlide=function(){this.selectedSlide&&this.selectedSlide.unselect()},f.selectInitialIndex=function(){var t=this.options.initialIndex;if(this.isInitActivated)this.select(this.selectedIndex,!1,!0);else{if(t&&"string"==typeof t)if(this.queryCell(t))return void this.selectCell(t,!1,!0);var e=0;t&&this.slides[t]&&(e=t),this.select(e,!1,!0)}},f.selectCell=function(t,e,i){var t=this.queryCell(t);t&&(t=this.getCellSlideIndex(t),this.select(t,e,i))},f.getCellSlideIndex=function(e){var t=this.slides.find(function(t){return t.cells.includes(e)});return this.slides.indexOf(t)},f.getCell=function(t){var e,i=_createForOfIteratorHelper(this.cells);try{for(i.s();!(e=i.n()).done;){var n=e.value;if(n.element===t)return n}}catch(t){i.e(t)}finally{i.f()}},f.getCells=function(t){var e=this;return(t=l.makeArray(t)).map(function(t){return e.getCell(t)}).filter(Boolean)},f.getCellElements=function(){return this.cells.map(function(t){return t.element})},f.getParentCell=function(t){var e=this.getCell(t);return e||(e=t.closest(".flickity-slider > *"),this.getCell(e))},f.getAdjacentCellElements=function(t,e){if(!t)return this.selectedSlide.getCellElements();e=void 0===e?this.selectedIndex:e;var i=this.slides.length;if(i<=1+2*t)return this.getCellElements();for(var n=[],s=e-t;s<=e+t;s++){var o=this.isWrapping?l.modulo(s,i):s,o=this.slides[o];o&&(n=n.concat(o.getCellElements()))}return n},f.queryCell=function(t){return"number"==typeof t?this.cells[t]:("string"==typeof t&&!t.match(/^[#.]?[\d/]/)&&(t=this.element.querySelector(t)),this.getCell(t))},f.uiChange=function(){this.emitEvent("uiChange")},f.onresize=function(){this.watchCSS(),this.resize()},l.debounceMethod(d,"onresize",150),f.resize=function(){var t;!this.isActive||this.isAnimating||this.isDragging||(this.getSize(),this.isWrapping&&(this.x=l.modulo(this.x,this.slideableWidth)),this.positionCells(),this._updateWrapShiftCells(),this.setGallerySize(),this.emitEvent("resize"),t=this.selectedElements&&this.selectedElements[0],this.selectCell(t,!1,!0))},f.watchCSS=function(){this.options.watchCSS&&(s(this.element,":after").content.includes("flickity")?this.activate():this.deactivate())},f.onkeydown=function(t){var e=document.activeElement,t=d.keyboardHandlers[t.key];this.options.accessibility&&e&&t&&this.focusableElems.some(function(t){return e===t})&&t.call(this)},d.keyboardHandlers={ArrowLeft:function(){this.uiChange(),this[this.options.rightToLeft?"next":"previous"]()},ArrowRight:function(){this.uiChange(),this[this.options.rightToLeft?"previous":"next"]()}},f.focus=function(){this.element.focus({preventScroll:!0})},f.deactivate=function(){var t;this.isActive&&(this.element.classList.remove("flickity-enabled"),this.element.classList.remove("flickity-rtl"),this.unselectSelectedSlide(),this.cells.forEach(function(t){return t.destroy()}),this.viewport.remove(),(t=this.element).append.apply(t,_toConsumableArray(this.slider.children)),this.options.accessibility&&(this.element.removeAttribute("tabIndex"),this.element.removeEventListener("keydown",this)),this.isActive=!1,this.emitEvent("deactivate"))},f.destroy=function(){this.deactivate(),a.removeEventListener("resize",this),this.allOff(),this.emitEvent("destroy"),r&&this.$element&&r.removeData(this.element,"flickity"),delete this.element.flickityGUID,delete u[this.guid]},Object.assign(f,n),d.data=function(t){if(t=l.getQueryElement(t))return u[t.flickityGUID]},l.htmlInit(d,"flickity"),a.jQueryBridget);return r&&t&&t("flickity",d,r),d.setJQuery=function(t){r=t},d.Cell=i,d.Slide=h,d},"object"==_typeof(e)&&e.exports?e.exports=s(n,t("ev-emitter"),t("get-size"),t("fizzy-ui-utils"),t("./cell"),t("./slide"),t("./animate")):(e=n.Flickity,n.Flickity=s(n,n.EvEmitter,n.getSize,n.fizzyUIUtils,e.Cell,e.Slide,e.animatePrototype))},{"./animate":4,"./cell":5,"./slide":14,"ev-emitter":1,"fizzy-ui-utils":2,"get-size":15}],7:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(s,t,e,o){Object.assign(t.defaults,{draggable:">1",dragThreshold:3});var i=t.prototype;function r(){return{x:s.pageXOffset,y:s.pageYOffset}}return Object.assign(i,e.prototype),i.touchActionValue="",t.create.drag=function(){this.on("activate",this.onActivateDrag),this.on("uiChange",this._uiChangeDrag),this.on("deactivate",this.onDeactivateDrag),this.on("cellChange",this.updateDraggable),this.on("pointerDown",this.handlePointerDown),this.on("pointerUp",this.handlePointerUp),this.on("pointerDown",this.handlePointerDone),this.on("dragStart",this.handleDragStart),this.on("dragMove",this.handleDragMove),this.on("dragEnd",this.handleDragEnd),this.on("staticClick",this.handleStaticClick)},i.onActivateDrag=function(){this.handles=[this.viewport],this.bindHandles(),this.updateDraggable()},i.onDeactivateDrag=function(){this.unbindHandles(),this.element.classList.remove("is-draggable")},i.updateDraggable=function(){">1"===this.options.draggable?this.isDraggable=1<this.slides.length:this.isDraggable=this.options.draggable,this.element.classList.toggle("is-draggable",this.isDraggable)},i._uiChangeDrag=function(){delete this.isFreeScrolling},i.handlePointerDown=function(t){var e,i,n;this.isDraggable&&(e="touchstart"===t.type,i="touch"===t.pointerType,n=t.target.matches("input, textarea, select"),e||i||n||t.preventDefault(),n||this.focus(),document.activeElement!==this.element&&document.activeElement.blur(),this.dragX=this.x,this.viewport.classList.add("is-pointer-down"),this.pointerDownScroll=r(),s.addEventListener("scroll",this)),this.bindActivePointerEvents(t)},i.hasDragStarted=function(t){return Math.abs(t.x)>this.options.dragThreshold},i.handlePointerUp=function(){delete this.isTouchScrolling,this.viewport.classList.remove("is-pointer-down")},i.handlePointerDone=function(){s.removeEventListener("scroll",this),delete this.pointerDownScroll},i.handleDragStart=function(){this.isDraggable&&(this.dragStartPosition=this.x,this.startAnimation(),s.removeEventListener("scroll",this))},i.handleDragMove=function(t,e,i){this.isDraggable&&(t.preventDefault(),this.previousDragX=this.dragX,t=this.options.rightToLeft?-1:1,this.isWrapping&&(i.x%=this.slideableWidth),i=this.dragStartPosition+i.x*t,this.isWrapping||(i=(i=(t=Math.max(-this.slides[0].target,this.dragStartPosition))<i?.5*(i+t):i)<(t=Math.min(-this.getLastSlide().target,this.dragStartPosition))?.5*(i+t):i),this.dragX=i,this.dragMoveTime=new Date)},i.handleDragEnd=function(){var t,e,i;this.isDraggable&&((t=this.options.freeScroll)&&(this.isFreeScrolling=!0),e=this.dragEndRestingSelect(),t&&!this.isWrapping?(i=this.getRestingPosition(),this.isFreeScrolling=-i>this.slides[0].target&&-i<this.getLastSlide().target):t||e!==this.selectedIndex||(e+=this.dragEndBoostSelect()),delete this.previousDragX,this.isDragSelect=this.isWrapping,this.select(e),delete this.isDragSelect)},i.dragEndRestingSelect=function(){var t=this.getRestingPosition(),e=Math.abs(this.getSlideDistance(-t,this.selectedIndex)),i=this._getClosestResting(t,e,1),t=this._getClosestResting(t,e,-1);return(i.distance<t.distance?i:t).index},i._getClosestResting=function(t,e,i){for(var n=this.selectedIndex,s=1/0,o=this.options.contain&&!this.isWrapping?function(t,e){return t<=e}:function(t,e){return t<e};o(e,s)&&(s=e,null!==(e=this.getSlideDistance(-t,n+=i)));)e=Math.abs(e);return{distance:s,index:n-i}},i.getSlideDistance=function(t,e){var i=this.slides.length,n=this.options.wrapAround&&1<i,s=n?o.modulo(e,i):e,s=this.slides[s];return s?(n=n?this.slideableWidth*Math.floor(e/i):0,t-(s.target+n)):null},i.dragEndBoostSelect=function(){var t,e;return void 0===this.previousDragX||!this.dragMoveTime||100<new Date-this.dragMoveTime?0:(t=this.getSlideDistance(-this.dragX,this.selectedIndex),e=this.previousDragX-this.dragX,0<t&&0<e?1:t<0&&e<0?-1:0)},i.onscroll=function(){var t=r(),e=this.pointerDownScroll.x-t.x,t=this.pointerDownScroll.y-t.y;(3<Math.abs(e)||3<Math.abs(t))&&this.pointerDone()},t},"object"==_typeof(e)&&e.exports?e.exports=s(n,t("./core"),t("unidragger"),t("fizzy-ui-utils")):n.Flickity=s(n,n.Flickity,n.Unidragger,n.fizzyUIUtils)},{"./core":6,"fizzy-ui-utils":2,unidragger:18}],8:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t,e){return t.create.imagesLoaded=function(){this.on("activate",this.imagesLoaded)},t.prototype.imagesLoaded=function(){var i=this;this.options.imagesLoaded&&e(this.slider).on("progress",function(t,e){e=i.getParentCell(e.img);i.cellSizeChange(e&&e.element),i.options.freeScroll||i.positionSliderAtSelected()})},t},"object"==_typeof(e)&&e.exports?e.exports=s(t("./core"),t("imagesloaded")):s(n.Flickity,n.imagesLoaded)},{"./core":6,imagesloaded:16}],9:[function(t,e,i){var n;"object"==_typeof(e)&&e.exports&&(n=t("./core"),t("./drag"),t("./prev-next-button"),t("./page-dots"),t("./player"),t("./add-remove-cell"),t("./lazyload"),t("./imagesloaded"),e.exports=n)},{"./add-remove-cell":3,"./core":6,"./drag":7,"./imagesloaded":8,"./lazyload":10,"./page-dots":11,"./player":12,"./prev-next-button":13}],10:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t,e){var s="data-flickity-lazyload",o="".concat(s,"-src"),r="".concat(s,"-srcset"),a="img[".concat(s,"], img[").concat(o,"], ")+"img[".concat(r,"], source[").concat(r,"]"),i=(t.create.lazyLoad=function(){this.on("select",this.lazyLoad),this.handleLazyLoadComplete=this.onLazyLoadComplete.bind(this)},t.prototype);function n(t){if(t.matches("img")){var e=t.getAttribute(s),i=t.getAttribute(o),n=t.getAttribute(r);if(e||i||n)return t}return _toConsumableArray(t.querySelectorAll(a))}function l(t,e){this.img=t,this.onComplete=e,this.load()}return i.lazyLoad=function(){var e=this,t=this.options.lazyLoad;t&&this.getAdjacentCellElements("number"==typeof t?t:0).map(n).flat().forEach(function(t){return new l(t,e.handleLazyLoadComplete)})},i.onLazyLoadComplete=function(t,e){t=this.getParentCell(t),t=t&&t.element;this.cellSizeChange(t),this.dispatchEvent("lazyLoad",e,t)},l.prototype.handleEvent=e.handleEvent,l.prototype.load=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this);var t=this.img.getAttribute(s)||this.img.getAttribute(o),e=this.img.getAttribute(r);this.img.src=t,e&&this.img.setAttribute("srcset",e),this.img.removeAttribute(s),this.img.removeAttribute(o),this.img.removeAttribute(r)},l.prototype.onload=function(t){this.complete(t,"flickity-lazyloaded")},l.prototype.onerror=function(t){this.complete(t,"flickity-lazyerror")},l.prototype.complete=function(t,e){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this),(this.img.parentNode.matches("picture")?this.img.parentNode:this.img).classList.add(e),this.onComplete(this.img,t)},t.LazyLoader=l,t},"object"==_typeof(e)&&e.exports?e.exports=s(t("./core"),t("fizzy-ui-utils")):s(n.Flickity,n.fizzyUIUtils)},{"./core":6,"fizzy-ui-utils":2}],11:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t,i){function e(){this.holder=document.createElement("div"),this.holder.className="flickity-page-dots",this.dots=[]}e.prototype.setDots=function(t){t-=this.dots.length;0<t?this.addDots(t):t<0&&this.removeDots(-t)},e.prototype.addDots=function(t){var e,n=this,t=new Array(t).fill().map(function(t,e){var i=document.createElement("button"),e=(i.setAttribute("type","button"),e+1+n.dots.length);return i.className="flickity-page-dot",i.textContent="View slide ".concat(e),i});(e=this.holder).append.apply(e,_toConsumableArray(t)),this.dots=this.dots.concat(t)},e.prototype.removeDots=function(t){this.dots.splice(this.dots.length-t,t).forEach(function(t){return t.remove()})},e.prototype.updateSelected=function(t){this.selectedDot&&(this.selectedDot.classList.remove("is-selected"),this.selectedDot.removeAttribute("aria-current")),this.dots.length&&(this.selectedDot=this.dots[t],this.selectedDot.classList.add("is-selected"),this.selectedDot.setAttribute("aria-current","step"))},t.PageDots=e,Object.assign(t.defaults,{pageDots:!0}),t.create.pageDots=function(){this.options.pageDots&&(this.pageDots=new e,this.handlePageDotsClick=this.onPageDotsClick.bind(this),this.on("activate",this.activatePageDots),this.on("select",this.updateSelectedPageDots),this.on("cellChange",this.updatePageDots),this.on("resize",this.updatePageDots),this.on("deactivate",this.deactivatePageDots))};var n=t.prototype;return n.activatePageDots=function(){var t;this.pageDots.setDots(this.slides.length),(t=this.focusableElems).push.apply(t,_toConsumableArray(this.pageDots.dots)),this.pageDots.holder.addEventListener("click",this.handlePageDotsClick),this.element.append(this.pageDots.holder)},n.onPageDotsClick=function(t){t=this.pageDots.dots.indexOf(t.target);-1!==t&&(this.uiChange(),this.select(t))},n.updateSelectedPageDots=function(){this.pageDots.updateSelected(this.selectedIndex)},n.updatePageDots=function(){var t,e=this;this.pageDots.dots.forEach(function(t){i.removeFrom(e.focusableElems,t)}),this.pageDots.setDots(this.slides.length),(t=this.focusableElems).push.apply(t,_toConsumableArray(this.pageDots.dots))},n.deactivatePageDots=function(){this.pageDots.holder.remove(),this.pageDots.holder.removeEventListener("click",this.handlePageDotsClick)},t.PageDots=e,t},"object"==_typeof(e)&&e.exports?e.exports=s(t("./core"),t("fizzy-ui-utils")):s(n.Flickity,n.fizzyUIUtils)},{"./core":6,"fizzy-ui-utils":2}],12:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t){function e(t,e){this.autoPlay=t,this.onTick=e,this.state="stopped",this.onVisibilityChange=this.visibilityChange.bind(this),this.onVisibilityPlay=this.visibilityPlay.bind(this)}e.prototype.play=function(){"playing"!==this.state&&(document.hidden?document.addEventListener("visibilitychange",this.onVisibilityPlay):(this.state="playing",document.addEventListener("visibilitychange",this.onVisibilityChange),this.tick()))},e.prototype.tick=function(){var t,e=this;"playing"===this.state&&(t="number"==typeof this.autoPlay?this.autoPlay:3e3,this.clear(),this.timeout=setTimeout(function(){e.onTick(),e.tick()},t))},e.prototype.stop=function(){this.state="stopped",this.clear(),document.removeEventListener("visibilitychange",this.onVisibilityChange)},e.prototype.clear=function(){clearTimeout(this.timeout)},e.prototype.pause=function(){"playing"===this.state&&(this.state="paused",this.clear())},e.prototype.unpause=function(){"paused"===this.state&&this.play()},e.prototype.visibilityChange=function(){this[document.hidden?"pause":"unpause"]()},e.prototype.visibilityPlay=function(){this.play(),document.removeEventListener("visibilitychange",this.onVisibilityPlay)},Object.assign(t.defaults,{pauseAutoPlayOnHover:!0}),t.create.player=function(){var t=this;this.player=new e(this.options.autoPlay,function(){t.next(!0)}),this.on("activate",this.activatePlayer),this.on("uiChange",this.stopPlayer),this.on("pointerDown",this.stopPlayer),this.on("deactivate",this.deactivatePlayer)};var i=t.prototype;return i.activatePlayer=function(){this.options.autoPlay&&(this.player.play(),this.element.addEventListener("mouseenter",this))},i.playPlayer=function(){this.player.play()},i.stopPlayer=function(){this.player.stop()},i.pausePlayer=function(){this.player.pause()},i.unpausePlayer=function(){this.player.unpause()},i.deactivatePlayer=function(){this.player.stop(),this.element.removeEventListener("mouseenter",this)},i.onmouseenter=function(){this.options.pauseAutoPlayOnHover&&(this.player.pause(),this.element.addEventListener("mouseleave",this))},i.onmouseleave=function(){this.player.unpause(),this.element.removeEventListener("mouseleave",this)},t.Player=e,t},"object"==_typeof(e)&&e.exports?e.exports=s(t("./core")):s(n.Flickity)},{"./core":6}],13:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t){var h="http://www.w3.org/2000/svg";function s(t,e,i){this.increment=t,this.direction=e,this.isPrevious="previous"===t,this.isLeft="left"===e,this._create(i)}s.prototype._create=function(t){var e=this.element=document.createElement("button"),i=(e.className="flickity-button flickity-prev-next-button ".concat(this.increment),this.isPrevious?"Previous":"Next"),i=(e.setAttribute("type","button"),e.setAttribute("aria-label",i),this.disable(),this.createSVG(i,t));e.append(i)},s.prototype.createSVG=function(t,e){var i,n,s,o,r=document.createElementNS(h,"svg"),a=(r.setAttribute("class","flickity-button-icon"),r.setAttribute("viewBox","0 0 100 100"),document.createElementNS(h,"title")),t=(a.append(t),document.createElementNS(h,"path")),l="string"==typeof(e=e)?e:(l=e.x0,i=e.x1,n=e.x2,s=e.x3,o=e.y1,e=e.y2,"M ".concat(l,", 50\n    L ").concat(i,", ").concat(o+50,"\n    L ").concat(n,", ").concat(e+50,"\n    L ").concat(s,", 50\n    L ").concat(n,", ").concat(50-e,"\n    L ").concat(i,", ").concat(50-o,"\n    Z"));return t.setAttribute("d",l),t.setAttribute("class","arrow"),this.isLeft||t.setAttribute("transform","translate(100, 100) rotate(180)"),r.append(a,t),r},s.prototype.enable=function(){this.element.removeAttribute("disabled")},s.prototype.disable=function(){this.element.setAttribute("disabled",!0)},Object.assign(t.defaults,{prevNextButtons:!0,arrowShape:{x0:10,x1:60,y1:50,x2:70,y2:40,x3:30}}),t.create.prevNextButtons=function(){var t,e,i,n=this;this.options.prevNextButtons&&(t=(e=this.options).rightToLeft,e=e.arrowShape,i=t?"left":"right",this.prevButton=new s("previous",t?"right":"left",e),this.nextButton=new s("next",i,e),this.focusableElems.push(this.prevButton.element),this.focusableElems.push(this.nextButton.element),this.handlePrevButtonClick=function(){n.uiChange(),n.previous()},this.handleNextButtonClick=function(){n.uiChange(),n.next()},this.on("activate",this.activatePrevNextButtons),this.on("select",this.updatePrevNextButtons))};var e=t.prototype;return e.updatePrevNextButtons=function(){var t=this.slides.length?this.slides.length-1:0;this.updatePrevNextButton(this.prevButton,0),this.updatePrevNextButton(this.nextButton,t)},e.updatePrevNextButton=function(t,e){this.isWrapping&&1<this.slides.length?t.enable():(t[(e=this.selectedIndex!==e)?"enable":"disable"](),e||document.activeElement!==t.element||this.focus())},e.activatePrevNextButtons=function(){this.prevButton.element.addEventListener("click",this.handlePrevButtonClick),this.nextButton.element.addEventListener("click",this.handleNextButtonClick),this.element.append(this.prevButton.element,this.nextButton.element),this.on("deactivate",this.deactivatePrevNextButtons)},e.deactivatePrevNextButtons=function(){this.prevButton.element.remove(),this.nextButton.element.remove(),this.prevButton.element.removeEventListener("click",this.handlePrevButtonClick),this.nextButton.element.removeEventListener("click",this.handleNextButtonClick),this.off("deactivate",this.deactivatePrevNextButtons)},t.PrevNextButton=s,t},"object"==_typeof(e)&&e.exports?e.exports=s(t("./core")):s(n.Flickity)},{"./core":6}],14:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(){function t(t,e,i){this.beginMargin=t,this.endMargin=e,this.cellAlign=i,this.cells=[],this.outerWidth=0,this.height=0}var e=t.prototype;return e.addCell=function(t){this.cells.push(t),this.outerWidth+=t.size.outerWidth,this.height=Math.max(t.size.outerHeight,this.height),1===this.cells.length&&(this.x=t.x,this.firstMargin=t.size[this.beginMargin])},e.updateTarget=function(){var t=this.getLastCell(),t=t?t.size[this.endMargin]:0,t=this.outerWidth-(this.firstMargin+t);this.target=this.x+this.firstMargin+t*this.cellAlign},e.getLastCell=function(){return this.cells[this.cells.length-1]},e.select=function(){this.cells.forEach(function(t){return t.select()})},e.unselect=function(){this.cells.forEach(function(t){return t.unselect()})},e.getCellElements=function(){return this.cells.map(function(t){return t.element})},t},"object"==_typeof(e)&&e.exports?e.exports=s():(n.Flickity=n.Flickity||{},n.Flickity.Slide=s())},{}],15:[function(t,e,i){var n,s;n=window,s=function(){function u(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}var d=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];d.length;return function(t){var i,e,n,s,o,r,a,l,h,c;if((t="string"==typeof t?document.querySelector(t):t)&&"object"==_typeof(t)&&t.nodeType)return"none"==(i=getComputedStyle(t)).display?(e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},d.forEach(function(t){e[t]=0}),e):((n={}).width=t.offsetWidth,n.height=t.offsetHeight,t=n.isBorderBox="border-box"==i.boxSizing,d.forEach(function(t){var e=i[t],e=parseFloat(e);n[t]=isNaN(e)?0:e}),s=n.paddingLeft+n.paddingRight,o=n.paddingTop+n.paddingBottom,r=n.marginLeft+n.marginRight,a=n.marginTop+n.marginBottom,l=n.borderLeftWidth+n.borderRightWidth,h=n.borderTopWidth+n.borderBottomWidth,!1!==(c=u(i.width))&&(n.width=c+(t?0:s+l)),!1!==(c=u(i.height))&&(n.height=c+(t?0:o+h)),n.innerWidth=n.width-(s+l),n.innerHeight=n.height-(o+h),n.outerWidth=n.width+r,n.outerHeight=n.height+a,n)}},"object"==_typeof(e)&&e.exports?e.exports=s():n.getSize=s()},{}],16:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(e,t){var o=e.jQuery,r=e.console;function a(t,e,i){if(!(this instanceof a))return new a(t,e,i);var n,s=t;(s="string"==typeof t?document.querySelectorAll(t):s)?(this.elements=(n=s,Array.isArray(n)?n:"object"==_typeof(n)&&"number"==typeof n.length?_toConsumableArray(n):[n]),this.options={},"function"==typeof e?i=e:Object.assign(this.options,e),i&&this.on("always",i),this.getImages(),o&&(this.jqDeferred=new o.Deferred),setTimeout(this.check.bind(this))):r.error("Bad element for imagesLoaded ".concat(s||t))}(a.prototype=Object.create(t.prototype)).getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)};var l=[1,9,11],s=(a.prototype.addElementImages=function(t){"IMG"===t.nodeName&&this.addImage(t),!0===this.options.background&&this.addElementBackgroundImages(t);var e=t.nodeType;if(e&&l.includes(e)){var i,n=_createForOfIteratorHelper(t.querySelectorAll("img"));try{for(n.s();!(i=n.n()).done;){var s=i.value;this.addImage(s)}}catch(t){n.e(t)}finally{n.f()}if("string"==typeof this.options.background){var o,r=_createForOfIteratorHelper(t.querySelectorAll(this.options.background));try{for(r.s();!(o=r.n()).done;){var a=o.value;this.addElementBackgroundImages(a)}}catch(t){r.e(t)}finally{r.f()}}}},/url\((['"])?(.*?)\1\)/gi);function i(t){this.img=t}function n(t,e){this.url=t,this.element=e,this.img=new Image}return a.prototype.addElementBackgroundImages=function(t){var e=getComputedStyle(t);if(e)for(var i=s.exec(e.backgroundImage);null!==i;){var n=i&&i[2];n&&this.addBackground(n,t),i=s.exec(e.backgroundImage)}},a.prototype.addImage=function(t){t=new i(t);this.images.push(t)},a.prototype.addBackground=function(t,e){t=new n(t,e);this.images.push(t)},a.prototype.check=function(){var e,n=this;this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?(e=function(t,e,i){setTimeout(function(){n.progress(t,e,i)})},this.images.forEach(function(t){t.once("progress",e),t.check()})):this.complete()},a.prototype.progress=function(t,e,i){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!t.isLoaded,this.emitEvent("progress",[this,t,e]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,t),this.progressedCount===this.images.length&&this.complete(),this.options.debug&&r&&r.log("progress: ".concat(i),t,e)},a.prototype.complete=function(){var t=this.hasAnyBroken?"fail":"done";this.isComplete=!0,this.emitEvent(t,[this]),this.emitEvent("always",[this]),this.jqDeferred&&(t=this.hasAnyBroken?"reject":"resolve",this.jqDeferred[t](this))},(i.prototype=Object.create(t.prototype)).check=function(){this.getIsImageComplete()?this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.img.crossOrigin&&(this.proxyImage.crossOrigin=this.img.crossOrigin),this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.proxyImage.src=this.img.currentSrc||this.img.src)},i.prototype.getIsImageComplete=function(){return this.img.complete&&this.img.naturalWidth},i.prototype.confirm=function(t,e){this.isLoaded=t;t=this.img.parentNode,t="PICTURE"===t.nodeName?t:this.img;this.emitEvent("progress",[this,t,e])},i.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},i.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},i.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},(n.prototype=Object.create(i.prototype)).check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url,this.getIsImageComplete()&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},n.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},n.prototype.confirm=function(t,e){this.isLoaded=t,this.emitEvent("progress",[this,this.element,e])},(a.makeJQueryPlugin=function(t){(t=t||e.jQuery)&&((o=t).fn.imagesLoaded=function(t,e){return new a(this,t,e).jqDeferred.promise(o(this))})})(),a},"object"==_typeof(e)&&e.exports?e.exports=s(n,t("ev-emitter")):n.imagesLoaded=s(n,n.EvEmitter)},{"ev-emitter":1}],17:[function(t,e,i){var n="undefined"!=typeof window?window:{},s=function(n,d,o){var f,p,t,g,F,r,m,e,c,j,a,O,B,i,N,l,u,v,H,y,b,C,U,E,R,q,X,G,s,h,V,Q,w,S,$,x,J,K,Y,z,A,D,_,P,Z,tt,et,it,L,nt,st,ot,rt,k,I,W,at,M,lt,ht,ct,T,ut,dt,ft,pt,gt,mt,vt={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",fastLoadedClass:"ls-is-cached",iframeLoadMode:0,srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:!0,ricTimeout:0,throttleDelay:125};for(t in p=n.lazySizesConfig||n.lazysizesConfig||{},vt)t in p||(p[t]=vt[t]);return d&&d.getElementsByClassName?(g=d.documentElement,F=n.HTMLPictureElement,m="getAttribute",e=n[r="addEventListener"].bind(n),c=n.setTimeout,j=n.requestAnimationFrame||c,a=n.requestIdleCallback,O=/^picture$/i,B=["load","error","lazyincluded","_lazyloaded"],i={},N=Array.prototype.forEach,l=function(t,e){return i[e]||(i[e]=new RegExp("(\\s|^)"+e+"(\\s|$)")),i[e].test(t[m]("class")||"")&&i[e]},u=function(t,e){l(t,e)||t.setAttribute("class",(t[m]("class")||"").trim()+" "+e)},v=function(t,e){(e=l(t,e))&&t.setAttribute("class",(t[m]("class")||"").replace(e," "))},H=function t(e,i,n){var s=n?r:"removeEventListener";n&&t(e,i),B.forEach(function(t){e[s](t,i)})},y=function(t,e,i,n,s){var o=d.createEvent("Event");return(i=i||{}).instance=f,o.initEvent(e,!n,!s),o.detail=i,t.dispatchEvent(o),o},b=function(t,e){var i;!F&&(i=n.picturefill||p.pf)?(e&&e.src&&!t[m]("srcset")&&t.setAttribute("srcset",e.src),i({reevaluate:!0,elements:[t]})):e&&e.src&&(t.src=e.src)},C=function(t,e){return(getComputedStyle(t,null)||{})[e]},U=function(t,e,i){for(i=i||t.offsetWidth;i<p.minSize&&e&&!t._lazysizesWidth;)i=e.offsetWidth,e=e.parentNode;return i},G=[],s=X=[],bt._lsFlush=yt,E=bt,h=function(i,t){return t?function(){E(i)}:function(){var t=this,e=arguments;E(function(){i.apply(t,e)})}},V=function(t){function e(){var t=o.now()-n;t<99?c(e,99-t):(a||s)(s)}var i,n,s=function(){i=null,t()};return function(){n=o.now(),i=i||c(e,99)}},st=/^img$/i,ot=/^iframe$/i,rt="onscroll"in n&&!/(gle|ing)bot/.test(navigator.userAgent),W=-1,at=function(t){return(P=null==P?"hidden"==C(d.body,"visibility"):P)||!("hidden"==C(t.parentNode,"visibility")&&"hidden"==C(t,"visibility"))},Z=Et,et=I=k=0,it=p.throttleDelay,L=p.ricTimeout,nt=a&&49<L?function(){a(wt,{timeout:L}),L!==p.ricTimeout&&(L=p.ricTimeout)}:h(function(){c(wt)},!0),lt=h(St),ht=function(t){lt({target:t.target})},ct=h(function(e,t,i,n,s){var o,r,a,l,h;(r=y(e,"lazybeforeunveil",t)).defaultPrevented||(n&&(i?u(e,p.autosizesClass):e.setAttribute("sizes",n)),i=e[m](p.srcsetAttr),n=e[m](p.srcAttr),s&&(o=(l=e.parentNode)&&O.test(l.nodeName||"")),a=t.firesLoad||"src"in e&&(i||n||o),r={target:e},u(e,p.loadingClass),a&&(clearTimeout($),$=c(Ct,2500),H(e,ht,!0)),o&&N.call(l.getElementsByTagName("source"),xt),i?e.setAttribute("srcset",i):n&&!o&&(ot.test(e.nodeName)?(t=n,0==(h=(l=e).getAttribute("data-load-mode")||p.iframeLoadMode)?l.contentWindow.location.replace(t):1==h&&(l.src=t)):e.src=n),s&&(i||o)&&b(e,{src:n})),e._lazyRace&&delete e._lazyRace,v(e,p.lazyClass),E(function(){var t=e.complete&&1<e.naturalWidth;a&&!t||(t&&u(e,p.fastLoadedClass),St(r),e._lazyCache=!0,c(function(){"_lazyCache"in e&&delete e._lazyCache},9)),"lazy"==e.loading&&I--},!0)}),ut=V(function(){p.loadMode=3,M()}),Q={_:function(){J=o.now(),f.elements=d.getElementsByClassName(p.lazyClass),w=d.getElementsByClassName(p.lazyClass+" "+p.preloadClass),e("scroll",M,!0),e("resize",M,!0),e("pageshow",function(t){var e;t.persisted&&(e=d.querySelectorAll("."+p.loadingClass)).length&&e.forEach&&j(function(){e.forEach(function(t){t.complete&&T(t)})})}),n.MutationObserver?new MutationObserver(M).observe(g,{childList:!0,subtree:!0,attributes:!0}):(g[r]("DOMNodeInserted",M,!0),g[r]("DOMAttrModified",M,!0),setInterval(M,999)),e("hashchange",M,!0),["focus","mouseover","click","load","transitionend","animationend"].forEach(function(t){d[r](t,M,!0)}),/d$|^c/.test(d.readyState)?At():(e("load",At),d[r]("DOMContentLoaded",M),c(At,2e4)),f.elements.length?(Et(),E._lsFlush()):M()},checkElems:M=function(t){var e;(t=!0===t)&&(L=33),tt||(tt=!0,(e=it-(o.now()-et))<0&&(e=0),t||e<9?nt():c(nt,e))},unveil:T=function(t){var e,i,n,s;t._lazyRace||!(!(s="auto"==(n=(i=st.test(t.nodeName))&&(t[m](p.sizesAttr)||t[m]("sizes"))))&&S||!i||!t[m]("src")&&!t.srcset||t.complete||l(t,p.errorClass))&&l(t,p.lazyClass)||(e=y(t,"lazyunveilread").detail,s&&dt.updateElem(t,!0,t.offsetWidth),t._lazyRace=!0,I++,ct(t,e,s,n,i))},_aLSL:zt},pt=h(function(t,e,i,n){var s,o,r;if(t._lazysizesWidth=n,t.setAttribute("sizes",n+="px"),O.test(e.nodeName||""))for(o=0,r=(s=e.getElementsByTagName("source")).length;o<r;o++)s[o].setAttribute("sizes",n);i.detail.dataAttr||b(t,i.detail)}),dt={_:function(){ft=d.getElementsByClassName(p.autosizesClass),e("resize",gt)},checkElems:gt=V(function(){var t,e=ft.length;if(e)for(t=0;t<e;t++)Dt(ft[t])}),updateElem:Dt},mt=function t(){!t.i&&d.getElementsByClassName&&(t.i=!0,dt._(),Q._())},c(function(){p.init&&mt()}),f={cfg:p,autoSizer:dt,loader:Q,init:mt,uP:b,aC:u,rC:v,hC:l,fire:y,gW:U,rAF:E}):{init:function(){},cfg:p,noSupport:!0};function yt(){var t=s;for(s=X.length?G:X,q=!(R=!0);t.length;)t.shift()();R=!1}function bt(t,e){R&&!e?t.apply(this,arguments):(s.push(t),q||(q=!0,(d.hidden?c:j)(yt)))}function Ct(t){I--,t&&!(I<0)&&t.target||(I=0)}function Et(){var t,e,i,n,s,o,r,a,l,h,c,u=f.elements;if((x=p.loadMode)&&I<8&&(t=u.length)){for(e=0,W++;e<t;e++)if(u[e]&&!u[e]._lazyRace)if(!rt||f.prematureUnveil&&f.prematureUnveil(u[e]))T(u[e]);else if((r=u[e][m]("data-expand"))&&(s=+r)||(s=k),l||(l=!p.expand||p.expand<1?500<g.clientHeight&&500<g.clientWidth?500:370:p.expand,h=(f._defEx=l)*p.expFactor,c=p.hFac,P=null,k<h&&I<1&&2<W&&2<x&&!d.hidden?(k=h,W=0):k=1<x&&1<W&&I<6?l:0),a!==s&&(K=innerWidth+s*c,Y=innerHeight+s,o=-1*s,a=s),h=u[e].getBoundingClientRect(),(_=h.bottom)>=o&&(z=h.top)<=Y&&(D=h.right)>=o*c&&(A=h.left)<=K&&(_||D||A||z)&&(p.loadHidden||at(u[e]))&&(S&&I<3&&!r&&(x<3||W<4)||function(t,e){var i,n=t,s=at(t);for(z-=e,_+=e,A-=e,D+=e;s&&(n=n.offsetParent)&&n!=d.body&&n!=g;)(s=0<(C(n,"opacity")||1))&&"visible"!=C(n,"overflow")&&(i=n.getBoundingClientRect(),s=D>i.left&&A<i.right&&_>i.top-1&&z<i.bottom+1);return s}(u[e],s))){if(T(u[e]),n=!0,9<I)break}else!n&&S&&!i&&I<4&&W<4&&2<x&&(w[0]||p.preloadAfterLoad)&&(w[0]||!r&&(_||D||A||z||"auto"!=u[e][m](p.sizesAttr)))&&(i=w[0]||u[e]);i&&!n&&T(i)}}function wt(){tt=!1,et=o.now(),Z()}function St(t){var e=t.target;e._lazyCache?delete e._lazyCache:(Ct(t),u(e,p.loadedClass),v(e,p.loadingClass),H(e,ht),y(e,"lazyloaded"))}function xt(t){var e,i=t[m](p.srcsetAttr);(e=p.customMedia[t[m]("data-media")||t[m]("media")])&&t.setAttribute("media",e),i&&t.setAttribute("srcset",i)}function zt(){3==p.loadMode&&(p.loadMode=2),ut()}function At(){S||(o.now()-J<999?c(At,999):(S=!0,p.loadMode=3,M(),e("scroll",zt,!0)))}function Dt(t,e,i){var n=t.parentNode;n&&(i=U(t,n,i),(e=y(t,"lazybeforesizes",{width:i,dataAttr:!!e})).defaultPrevented||(i=e.detail.width)&&i!==t._lazysizesWidth&&pt(t,n,e,i))}};s=s(n,n.document,Date),n.lazySizes=s,"object"==_typeof(e)&&e.exports&&(e.exports=s)},{}],18:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(s,t){function e(){}var o,i,t=e.prototype=Object.create(t.prototype),r=(t.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i="ontouchstart"in s?(o="touchstart",["touchmove","touchend","touchcancel"]):s.PointerEvent?(o="pointerdown",["pointermove","pointerup","pointercancel"]):(o="mousedown",["mousemove","mouseup"]),t.touchActionValue="none",t.bindHandles=function(){this._bindHandles("addEventListener",this.touchActionValue)},t.unbindHandles=function(){this._bindHandles("removeEventListener","")},t._bindHandles=function(e,i){var n=this;this.handles.forEach(function(t){t[e](o,n),t[e]("click",n),s.PointerEvent&&(t.style.touchAction=i)})},t.bindActivePointerEvents=function(){var e=this;i.forEach(function(t){s.addEventListener(t,e)})},t.unbindActivePointerEvents=function(){var e=this;i.forEach(function(t){s.removeEventListener(t,e)})},t.withPointer=function(t,e){e.pointerId===this.pointerIdentifier&&this[t](e,e)},t.withTouch=function(t,e){var i,n,s=_createForOfIteratorHelper(e.changedTouches);try{for(s.s();!(n=s.n()).done;){var o=n.value;o.identifier===this.pointerIdentifier&&(i=o)}}catch(t){s.e(t)}finally{s.f()}i&&this[t](e,i)},t.onmousedown=function(t){this.pointerDown(t,t)},t.ontouchstart=function(t){this.pointerDown(t,t.changedTouches[0])},t.onpointerdown=function(t){this.pointerDown(t,t)},["TEXTAREA","INPUT","SELECT","OPTION"]),a=["radio","checkbox","button","submit","image","file"];return t.pointerDown=function(t,e){var i=r.includes(t.target.nodeName),n=a.includes(t.target.type);this.isPointerDown||t.button||i&&!n||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==e.pointerId?e.pointerId:e.identifier,this.pointerDownPointer={pageX:e.pageX,pageY:e.pageY},this.bindActivePointerEvents(),this.emitEvent("pointerDown",[t,e]))},t.onmousemove=function(t){this.pointerMove(t,t)},t.onpointermove=function(t){this.withPointer("pointerMove",t)},t.ontouchmove=function(t){this.withTouch("pointerMove",t)},t.pointerMove=function(t,e){var i={x:e.pageX-this.pointerDownPointer.pageX,y:e.pageY-this.pointerDownPointer.pageY};this.emitEvent("pointerMove",[t,e,i]),!this.isDragging&&this.hasDragStarted(i)&&this.dragStart(t,e),this.isDragging&&this.dragMove(t,e,i)},t.hasDragStarted=function(t){return 3<Math.abs(t.x)||3<Math.abs(t.y)},t.dragStart=function(t,e){this.isDragging=!0,this.isPreventingClicks=!0,this.emitEvent("dragStart",[t,e])},t.dragMove=function(t,e,i){this.emitEvent("dragMove",[t,e,i])},t.onmouseup=function(t){this.pointerUp(t,t)},t.onpointerup=function(t){this.withPointer("pointerUp",t)},t.ontouchend=function(t){this.withTouch("pointerUp",t)},t.pointerUp=function(t,e){this.pointerDone(),this.emitEvent("pointerUp",[t,e]),this.isDragging?this.dragEnd(t,e):this.staticClick(t,e)},t.dragEnd=function(t,e){var i=this;this.isDragging=!1,setTimeout(function(){return delete i.isPreventingClicks}),this.emitEvent("dragEnd",[t,e])},t.pointerDone=function(){this.isPointerDown=!1,delete this.pointerIdentifier,this.unbindActivePointerEvents(),this.emitEvent("pointerDone")},t.onpointercancel=function(t){this.withPointer("pointerCancel",t)},t.ontouchcancel=function(t){this.withTouch("pointerCancel",t)},t.pointerCancel=function(t,e){this.pointerDone(),this.emitEvent("pointerCancel",[t,e])},t.onclick=function(t){this.isPreventingClicks&&t.preventDefault()},t.staticClick=function(t,e){var i=this,n="mouseup"===t.type;n&&this.isIgnoringMouseUp||(this.emitEvent("staticClick",[t,e]),n&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete i.isIgnoringMouseUp},400)))},e},"object"==_typeof(e)&&e.exports?e.exports=s(n,t("ev-emitter")):n.Unidragger=s(n,n.EvEmitter)},{"ev-emitter":1}],19:[function(t,e,i){window.Flickity=t("flickity"),t("lazysizes"),window.PubSub=t("./scripts/pubsub")},{"./scripts/pubsub":20,flickity:9,lazysizes:17}],20:[function(t,e,i){e.exports={EVENTS:{cartUpdated:"cart-updated"},subscribers:{},subscribe:function(t,e){var i=this;return void 0===this.subscribers[t]&&(this.subscribers[t]=[]),this.subscribers[t]=[].concat(_toConsumableArray(this.subscribers[t]),[e]),function(){i.subscribers[t]=i.subscribers[t].filter(function(t){return t!==e})}},publish:function(t,e){this.subscribers[t]&&this.subscribers[t].forEach(function(t){t(e)})}}},{}]},{},[19]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvZXYtZW1pdHRlci9ldi1lbWl0dGVyLmpzIiwiZ2xvYmFsLmpzIiwibm9kZV9tb2R1bGVzL2Zpenp5LXVpLXV0aWxzL3V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2FkZC1yZW1vdmUtY2VsbC5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9hbmltYXRlLmpzIiwibm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2NlbGwuanMiLCJub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvY29yZS5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9kcmFnLmpzIiwibm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2xhenlsb2FkLmpzIiwibm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2ltYWdlc2xvYWRlZC5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9wYWdlLWRvdHMuanMiLCJub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvcGxheWVyLmpzIiwibm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL3ByZXYtbmV4dC1idXR0b24uanMiLCJub2RlX21vZHVsZXMvZ2V0LXNpemUvZ2V0LXNpemUuanMiLCJub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvc2xpZGUuanMiLCJub2RlX21vZHVsZXMvaW1hZ2VzbG9hZGVkL2ltYWdlc2xvYWRlZC5qcyIsIm5vZGVfbW9kdWxlcy9sYXp5c2l6ZXMvbGF6eXNpemVzLmpzIiwic3JjL3NjcmlwdHMvcHVic3ViLmpzIiwibm9kZV9tb2R1bGVzL3VuaWRyYWdnZXIvdW5pZHJhZ2dlci5qcyIsInNyYy9nbG9iYWwuanMiXSwibmFtZXMiOlsiciIsImUiLCJuIiwidCIsIm8iLCJpIiwiZiIsImMiLCJyZXF1aXJlIiwidSIsImEiLCJFcnJvciIsImNvZGUiLCJwIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwiZ2xvYmFsIiwiZmFjdG9yeSIsIndpbmRvdyIsInRoaXMiLCJFdkVtaXR0ZXIiLCJwcm90byIsInByb3RvdHlwZSIsIm9uIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJldmVudHMiLCJfZXZlbnRzIiwiaW5jbHVkZXMiLCJwdXNoIiwib25jZSIsIm9uY2VFdmVudHMiLCJfb25jZUV2ZW50cyIsIm9mZiIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImVtaXRFdmVudCIsImFyZ3MiLCJzbGljZSIsIl9zdGVwIiwib25jZUxpc3RlbmVycyIsIl9pdGVyYXRvciIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwicyIsImRvbmUiLCJ2YWx1ZSIsImFwcGx5IiwiZXJyIiwiYWxsT2ZmIiwiX3R5cGVvZiIsIjIiLCJ1dGlscyIsImIiLCJPYmplY3QiLCJhc3NpZ24iLCJudW0iLCJkaXYiLCJvYmoiLCJBcnJheSIsImlzQXJyYXkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnkiLCJlbGVtIiwic2VsZWN0b3IiLCJwYXJlbnROb2RlIiwiZG9jdW1lbnQiLCJib2R5IiwibWF0Y2hlcyIsInF1ZXJ5U2VsZWN0b3IiLCJldmVudCIsIm1ldGhvZCIsInR5cGUiLCJlbGVtcyIsIm1ha2VBcnJheSIsImZpbHRlciIsIkhUTUxFbGVtZW50IiwicmVkdWNlIiwiZmZFbGVtcyIsImNoaWxkRWxlbXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY29uY2F0IiwiX2NsYXNzIiwibWV0aG9kTmFtZSIsInRocmVzaG9sZCIsInRpbWVvdXROYW1lIiwiX3RoaXMiLCJjbGVhclRpbWVvdXQiLCJhcmd1bWVudHMiLCJzZXRUaW1lb3V0Iiwib25Eb2NSZWFkeSIsInJlYWR5U3RhdGUiLCJhZGRFdmVudExpc3RlbmVyIiwic3RyIiwicmVwbGFjZSIsIm1hdGNoIiwiJDEiLCIkMiIsInRvTG93ZXJDYXNlIiwiY29uc29sZSIsImh0bWxJbml0IiwiV2lkZ2V0Q2xhc3MiLCJuYW1lc3BhY2UiLCJkb2NSZWFkeSIsImRhdGFBdHRyIiwidG9EYXNoZWQiLCJkYXRhQXR0ckVsZW1zIiwialF1ZXJ5IiwiZm9yRWFjaCIsIm9wdGlvbnMiLCJhdHRyIiwiZ2V0QXR0cmlidXRlIiwiSlNPTiIsInBhcnNlIiwiZXJyb3IiLCJjbGFzc05hbWUiLCJpbnN0YW5jZSIsImRhdGEiLCJmaXp6eVVJVXRpbHMiLCIzIiwiRmxpY2tpdHkiLCJpbnNlcnQiLCJsZW4iLCJmcmFnbWVudCIsImlzQXBwZW5kIiwiaW5zZXJ0Q2VsbEVsZW1lbnQiLCJlbmRDZWxscyIsImNlbGxzIiwiX21ha2VDZWxscyIsInVuZGVmaW5lZCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjZWxsIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50Iiwic2xpZGVyIiwiaW5zZXJ0QmVmb3JlIiwiX3NpemVDZWxscyIsImNlbGxDaGFuZ2UiLCJwb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQiLCJhcHBlbmQiLCJwcmVwZW5kIiwicmVtb3ZlIiwibWluQ2VsbEluZGV4IiwiX3RoaXMyIiwiZ2V0Q2VsbHMiLCJNYXRoIiwibWluIiwicmVtb3ZlRnJvbSIsImNlbGxTaXplQ2hhbmdlIiwiZ2V0Q2VsbCIsImdldFNpemUiLCJjaGFuZ2VkQ2VsbEluZGV4IiwicHJldlNlbGVjdGVkRWxlbSIsInNlbGVjdGVkRWxlbWVudCIsIl9wb3NpdGlvbkNlbGxzIiwiX3VwZGF0ZVdyYXBTaGlmdENlbGxzIiwic2V0R2FsbGVyeVNpemUiLCJzZWxlY3RlZEluZGV4IiwiZ2V0Q2VsbFNsaWRlSW5kZXgiLCJzbGlkZXMiLCJzZWxlY3QiLCIuL2NvcmUiLCJpc0FuaW1hdGluZyIsInJlc3RpbmdGcmFtZXMiLCJhbmltYXRlIiwiX3RoaXMzIiwicHJldmlvdXNYIiwiYXBwbHlEcmFnRm9yY2UiLCJhcHBseVNlbGVjdGVkQXR0cmFjdGlvbiIsIngiLCJpbnRlZ3JhdGVQaHlzaWNzIiwicG9zaXRpb25TbGlkZXIiLCJzZXR0bGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpc1dyYXBwaW5nIiwibW9kdWxvIiwic2xpZGVhYmxlV2lkdGgiLCJzaGlmdFdyYXBDZWxscyIsInNldFRyYW5zbGF0ZVgiLCJkaXNwYXRjaFNjcm9sbEV2ZW50IiwiaXMzZCIsImN1cnNvclBvc2l0aW9uIiwicmlnaHRUb0xlZnQiLCJ0cmFuc2xhdGVYIiwiZ2V0UG9zaXRpb25WYWx1ZSIsInN0eWxlIiwidHJhbnNmb3JtIiwicHJvZ3Jlc3MiLCJmaXJzdFNsaWRlIiwicG9zaXRpb25YIiwidGFyZ2V0Iiwic2xpZGVzV2lkdGgiLCJkaXNwYXRjaEV2ZW50Iiwic2VsZWN0ZWRTbGlkZSIsInZlbG9jaXR5IiwicG9zaXRpb24iLCJwZXJjZW50UG9zaXRpb24iLCJyb3VuZCIsInNpemUiLCJpbm5lcldpZHRoIiwiaXNQb2ludGVyRG93biIsImlzRnJlZVNjcm9sbGluZyIsImJlZm9yZUdhcCIsImFmdGVyR2FwIiwiX3NoaWZ0Q2VsbHMiLCJiZWZvcmVTaGlmdENlbGxzIiwiYWZ0ZXJTaGlmdENlbGxzIiwiZ2FwIiwic2hpZnQiLCJfdGhpczQiLCJjZWxsU2hpZnQiLCJfd3JhcFNoaWZ0Q2VsbCIsIm91dGVyV2lkdGgiLCJfdGhpczUiLCJfcmVuZGVyQ2VsbFBvc2l0aW9uIiwiZ2V0RnJpY3Rpb25GYWN0b3IiLCJmb3JjZSIsImRyYWdGb3JjZSIsImlzRHJhZ2dhYmxlIiwiZHJhZ1giLCJhcHBseUZvcmNlIiwic2VsZWN0ZWRBdHRyYWN0aW9uIiwiYW5pbWF0ZVByb3RvdHlwZSIsImZpenp5LXVpLXV0aWxzIiwiNSIsImNlbGxDbGFzc05hbWUiLCJDZWxsIiwiY2xhc3NMaXN0IiwiYWRkIiwidW5zZWxlY3QiLCJkZXN0cm95IiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiZ2V0LXNpemUiLCI2IiwiU2xpZGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiR1VJRCIsImluc3RhbmNlcyIsInF1ZXJ5RWxlbWVudCIsImdldFF1ZXJ5RWxlbWVudCIsImZsaWNraXR5R1VJRCIsIm9wdGlvbiIsIiRlbGVtZW50IiwiX29iamVjdFNwcmVhZCIsImNvbnN0cnVjdG9yIiwiZGVmYXVsdHMiLCJfY3JlYXRlIiwiYWNjZXNzaWJpbGl0eSIsImNlbGxBbGlnbiIsImZyZWVTY3JvbGxGcmljdGlvbiIsImZyaWN0aW9uIiwibmFtZXNwYWNlSlF1ZXJ5RXZlbnRzIiwicmVzaXplIiwiY3JlYXRlIiwiY2VsbEFsaWduU2hvcnRoYW5kcyIsIl90aGlzJG9wdGlvbnMiLCJ3YXRjaENTUyIsImlkIiwiZ3VpZCIsImJlZ2luTWFyZ2luIiwiZW5kTWFyZ2luIiwidmlld3BvcnQiLCJjcmVhdGVFbGVtZW50IiwiX2NyZWF0ZVNsaWRlciIsImZvY3VzYWJsZUVsZW1zIiwiYWN0aXZhdGUiLCJvcHRzIiwiX3RoaXMkc2xpZGVyIiwiY2VsbEVsZW1zIiwiaXNBY3RpdmUiLCJfZmlsdGVyRmluZENlbGxFbGVtZW50cyIsImNoaWxkcmVuIiwicmVsb2FkQ2VsbHMiLCJ0YWJJbmRleCIsInNlbGVjdEluaXRpYWxJbmRleCIsImlzSW5pdEFjdGl2YXRlZCIsImZpbHRlckZpbmRFbGVtZW50cyIsImNlbGxTZWxlY3RvciIsInBvc2l0aW9uQ2VsbHMiLCJtYXAiLCJjZWxsRWxlbSIsImdldExhc3RDZWxsIiwiZ2V0TGFzdFNsaWRlIiwic3RhcnRDZWxsIiwiX3RoaXM2IiwiY2VsbFgiLCJtYXhDZWxsSGVpZ2h0IiwibWF4Iiwib3V0ZXJIZWlnaHQiLCJ1cGRhdGVTbGlkZXMiLCJfY29udGFpblNsaWRlcyIsInJlbmRlclgiLCJ3aWR0aCIsInBvc2l0aW9uVmFsdWUiLCJzbGlkZSIsImNhbkNlbGxGaXQiLCJfdGhpczciLCJfZ2V0Q2FuQ2VsbEZpdCIsInNsaWRlV2lkdGgiLCJmaXJzdE1hcmdpbiIsInVwZGF0ZVRhcmdldCIsImFkZENlbGwiLCJ1cGRhdGVTZWxlY3RlZFNsaWRlIiwibnVtYmVyIiwicGVyY2VudCIsImdyb3VwV2lkdGgiLCJncm91cENlbGxzIiwicGFyc2VJbnQiLCJwZXJjZW50TWF0Y2giLCJfaW5pdCIsInJlcG9zaXRpb24iLCJzZXRDZWxsQWxpZ24iLCJsZWZ0IiwiY2VudGVyIiwicmlnaHQiLCJ1bmlkcmFnZ2VyRXZlbnRzIiwiX3RoaXMkb3B0aW9uczIiLCJzaG9ydGhhbmQiLCJoZWlnaHQiLCJhZGFwdGl2ZUhlaWdodCIsImxhc3RJbmRleCIsImFmdGVyR2FwWCIsImdldElzV3JhcHBpbmciLCJfdW5zaGlmdENlbGxzIiwiYmVmb3JlR2FwWCIsIl9nZXRHYXBDZWxscyIsIndyYXBBcm91bmQiLCJnYXBXaWR0aCIsIl9zdGVwMiIsIl9pdGVyYXRvcjIiLCJnYXBYIiwiY2VsbEluZGV4IiwiaW5jcmVtZW50IiwiY29udGVudFdpZHRoIiwiYmVnaW5Cb3VuZCIsImVuZEJvdW5kIiwiX3RoaXM4IiwiY29udGFpbiIsImVtaXRBcmdzIiwiJGV2ZW50IiwialFFdmVudCIsIkV2ZW50IiwidHJpZ2dlciIsIl9lbWl0RXZlbnQiLCJqUXVlcnlCcmlkZ2V0IiwiY2xpY2tlZENlbGwiLCJnZXRQYXJlbnRDZWxsIiwiaXNXcmFwIiwiaXNJbnN0YW50IiwiX3dyYXBTZWxlY3QiLCJwcmV2SW5kZXgiLCJzdGFydEFuaW1hdGlvbiIsImRlbHRhIiwiYmFja1dyYXBEZWx0YSIsImZvcmV3YXJkV3JhcERlbHRhIiwiaXNEcmFnU2VsZWN0Iiwid3JhcEluZGV4IiwiYWJzIiwicHJldmlvdXMiLCJuZXh0IiwidW5zZWxlY3RTZWxlY3RlZFNsaWRlIiwic2VsZWN0ZWRDZWxscyIsInNlbGVjdGVkRWxlbWVudHMiLCJnZXRDZWxsRWxlbWVudHMiLCJzZWxlY3RlZENlbGwiLCJpbml0aWFsSW5kZXgiLCJxdWVyeUNlbGwiLCJzZWxlY3RDZWxsIiwiY2VsbFNsaWRlIiwiZmluZCIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJfdGhpczkiLCJCb29sZWFuIiwiY2xvc2VzdCIsImdldEFkamFjZW50Q2VsbEVsZW1lbnRzIiwiYWRqQ291bnQiLCJzbGlkZUluZGV4IiwidWlDaGFuZ2UiLCJvbnJlc2l6ZSIsImRlYm91bmNlTWV0aG9kIiwiaXNEcmFnZ2luZyIsImNvbnRlbnQiLCJkZWFjdGl2YXRlIiwib25rZXlkb3duIiwiYWN0aXZlRWxlbWVudCIsImhhbmRsZXIiLCJrZXlib2FyZEhhbmRsZXJzIiwia2V5Iiwic29tZSIsIkFycm93TGVmdCIsIkFycm93UmlnaHQiLCJmb2N1cyIsInByZXZlbnRTY3JvbGwiLCJfdGhpcyRlbGVtZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZURhdGEiLCJzZXRKUXVlcnkiLCJqcSIsIl9GbGlja2l0eSIsIi4vYW5pbWF0ZSIsImV2LWVtaXR0ZXIiLCI3IiwiVW5pZHJhZ2dlciIsImRyYWdnYWJsZSIsImRyYWdUaHJlc2hvbGQiLCJnZXRTY3JvbGxQb3NpdGlvbiIsInBhZ2VYT2Zmc2V0IiwieSIsInBhZ2VZT2Zmc2V0IiwidG91Y2hBY3Rpb25WYWx1ZSIsImRyYWciLCJvbkFjdGl2YXRlRHJhZyIsIl91aUNoYW5nZURyYWciLCJvbkRlYWN0aXZhdGVEcmFnIiwidXBkYXRlRHJhZ2dhYmxlIiwiaGFuZGxlUG9pbnRlckRvd24iLCJoYW5kbGVQb2ludGVyVXAiLCJoYW5kbGVQb2ludGVyRG9uZSIsImhhbmRsZURyYWdTdGFydCIsImhhbmRsZURyYWdNb3ZlIiwiaGFuZGxlRHJhZ0VuZCIsImhhbmRsZVN0YXRpY0NsaWNrIiwiaGFuZGxlcyIsImJpbmRIYW5kbGVzIiwidW5iaW5kSGFuZGxlcyIsInRvZ2dsZSIsImlzVG91Y2hTdGFydCIsImlzVG91Y2hQb2ludGVyIiwiaXNGb2N1c05vZGUiLCJwb2ludGVyVHlwZSIsInByZXZlbnREZWZhdWx0IiwiYmx1ciIsInBvaW50ZXJEb3duU2Nyb2xsIiwiYmluZEFjdGl2ZVBvaW50ZXJFdmVudHMiLCJoYXNEcmFnU3RhcnRlZCIsIm1vdmVWZWN0b3IiLCJpc1RvdWNoU2Nyb2xsaW5nIiwiZHJhZ1N0YXJ0UG9zaXRpb24iLCJwb2ludGVyIiwicHJldmlvdXNEcmFnWCIsImRpcmVjdGlvbiIsIm9yaWdpbkJvdW5kIiwiZHJhZ01vdmVUaW1lIiwiRGF0ZSIsImZyZWVTY3JvbGwiLCJyZXN0aW5nWCIsImRyYWdFbmRSZXN0aW5nU2VsZWN0IiwiZ2V0UmVzdGluZ1Bvc2l0aW9uIiwiZHJhZ0VuZEJvb3N0U2VsZWN0IiwiZGlzdGFuY2UiLCJnZXRTbGlkZURpc3RhbmNlIiwicG9zaXRpdmVSZXN0aW5nIiwiX2dldENsb3Nlc3RSZXN0aW5nIiwibmVnYXRpdmVSZXN0aW5nIiwibWluRGlzdGFuY2UiLCJJbmZpbml0eSIsImNvbmRpdGlvbiIsImRpc3QiLCJtaW5EaXN0IiwiaXNXcmFwQXJvdW5kIiwid3JhcCIsImZsb29yIiwib25zY3JvbGwiLCJzY3JvbGwiLCJzY3JvbGxNb3ZlWCIsInNjcm9sbE1vdmVZIiwicG9pbnRlckRvbmUiLCJsYXp5U3JjQXR0ciIsInVuaWRyYWdnZXIiLCI4IiwiaW1hZ2VzTG9hZGVkIiwiX3RoaXMxMCIsImltYWdlIiwiaW1nIiwiaW1hZ2VzbG9hZGVkIiwiOSIsIi4vYWRkLXJlbW92ZS1jZWxsIiwibGF6eVNyY3NldEF0dHIiLCIuL2ltYWdlc2xvYWRlZCIsIi4vbGF6eWxvYWQiLCIuL3BhZ2UtZG90cyIsIi4vcGxheWVyIiwiLi9wcmV2LW5leHQtYnV0dG9uIiwiMTAiLCJsYXp5QXR0ciIsImltZ1NlbGVjdG9yIiwibGF6eUxvYWQiLCJoYW5kbGVMYXp5TG9hZENvbXBsZXRlIiwib25MYXp5TG9hZENvbXBsZXRlIiwiYmluZCIsImdldENlbGxMYXp5SW1hZ2VzIiwiY2VsbEF0dHIiLCJjZWxsU3JjQXR0ciIsImNlbGxTcmNzZXRBdHRyIiwiTGF6eUxvYWRlciIsIm9uQ29tcGxldGUiLCJsb2FkIiwiX3RoaXMxMSIsImZsYXQiLCJoYW5kbGVFdmVudCIsInNyYyIsInNyY3NldCIsIm9ubG9hZCIsImNvbXBsZXRlIiwib25lcnJvciIsInVwZGF0ZVBhZ2VEb3RzIiwiMTEiLCJQYWdlRG90cyIsImhvbGRlciIsImRvdHMiLCJzZXREb3RzIiwic2xpZGVzTGVuZ3RoIiwiYWRkRG90cyIsInJlbW92ZURvdHMiLCJjb3VudCIsIl90aGlzJGhvbGRlciIsIl90aGlzMTIiLCJuZXdEb3RzIiwiZmlsbCIsIml0ZW0iLCJkb3QiLCJ0ZXh0Q29udGVudCIsInVwZGF0ZVNlbGVjdGVkIiwic2VsZWN0ZWREb3QiLCJwYWdlRG90cyIsImhhbmRsZVBhZ2VEb3RzQ2xpY2siLCJvblBhZ2VEb3RzQ2xpY2siLCJhY3RpdmF0ZVBhZ2VEb3RzIiwidXBkYXRlU2VsZWN0ZWRQYWdlRG90cyIsImRlYWN0aXZhdGVQYWdlRG90cyIsIl90aGlzJGZvY3VzYWJsZUVsZW1zIiwiX3RoaXMkZm9jdXNhYmxlRWxlbXMyIiwiX3RoaXMxMyIsInVucGF1c2VQbGF5ZXIiLCIxMiIsIlBsYXllciIsImF1dG9QbGF5Iiwib25UaWNrIiwic3RhdGUiLCJvblZpc2liaWxpdHlDaGFuZ2UiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwib25WaXNpYmlsaXR5UGxheSIsInZpc2liaWxpdHlQbGF5IiwicGxheSIsImhpZGRlbiIsInRpY2siLCJ0aW1lIiwiX3RoaXMxNCIsImNsZWFyIiwidGltZW91dCIsInN0b3AiLCJwYXVzZSIsInVucGF1c2UiLCJwYXVzZUF1dG9QbGF5T25Ib3ZlciIsInBsYXllciIsIl90aGlzMTUiLCJhY3RpdmF0ZVBsYXllciIsInN0b3BQbGF5ZXIiLCJkZWFjdGl2YXRlUGxheWVyIiwicGxheVBsYXllciIsInBhdXNlUGxheWVyIiwib25tb3VzZWVudGVyIiwib25tb3VzZWxlYXZlIiwiaXNEaXNhYmxlZEZvY3VzZWQiLCJpc0VuYWJsZWQiLCJzdmdVUkkiLCJQcmV2TmV4dEJ1dHRvbiIsImFycm93U2hhcGUiLCJpc1ByZXZpb3VzIiwiaXNMZWZ0IiwibGFiZWwiLCJzdmciLCJkaXNhYmxlIiwiY3JlYXRlU1ZHIiwieDEiLCJ4MiIsIngzIiwieTEiLCJjcmVhdGVFbGVtZW50TlMiLCJ0aXRsZSIsInBhdGgiLCJwYXRoTW92ZW1lbnRzIiwic2hhcGUiLCJ4MCIsInkyIiwiZW5hYmxlIiwicHJldk5leHRCdXR0b25zIiwibmV4dERpcmVjdGlvbiIsIl90aGlzMTYiLCJfdGhpcyRvcHRpb25zMyIsInByZXZCdXR0b24iLCJuZXh0QnV0dG9uIiwiaGFuZGxlUHJldkJ1dHRvbkNsaWNrIiwiaGFuZGxlTmV4dEJ1dHRvbkNsaWNrIiwiYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMiLCJ1cGRhdGVQcmV2TmV4dEJ1dHRvbnMiLCJ1cGRhdGVQcmV2TmV4dEJ1dHRvbiIsImJ1dHRvbiIsImRpc2FibGVkSW5kZXgiLCJkZWFjdGl2YXRlUHJldk5leHRCdXR0b25zIiwiMTQiLCJsYXN0Q2VsbCIsImxhc3RNYXJnaW4iLCIxNSIsImdldFN0eWxlU2l6ZSIsInBhcnNlRmxvYXQiLCJpc05hTiIsIm1lYXN1cmVtZW50cyIsInBhZGRpbmdXaWR0aCIsInBhZGRpbmdIZWlnaHQiLCJtYXJnaW5XaWR0aCIsIm1hcmdpbkhlaWdodCIsImJvcmRlcldpZHRoIiwiYm9yZGVySGVpZ2h0Iiwic3R5bGVIZWlnaHQiLCJub2RlVHlwZSIsImRpc3BsYXkiLCJpbm5lckhlaWdodCIsIm1lYXN1cmVtZW50Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJpc0JvcmRlckJveCIsImJveFNpemluZyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsInN0eWxlV2lkdGgiLCIxNiIsImxvYWRpbmdJbWFnZSIsImNoZWNrIiwiJCIsIkltYWdlc0xvYWRlZCIsIm9uQWx3YXlzIiwicXVlcnlFbGVtIiwiZWxlbWVudHMiLCJnZXRJbWFnZXMiLCJqcURlZmVycmVkIiwiRGVmZXJyZWQiLCJpbWFnZXMiLCJhZGRFbGVtZW50SW1hZ2VzIiwiZWxlbWVudE5vZGVUeXBlcyIsInJlVVJMIiwibm9kZU5hbWUiLCJhZGRJbWFnZSIsImJhY2tncm91bmQiLCJhZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyIsIl9zdGVwNCIsIl9pdGVyYXRvcjQiLCJfc3RlcDUiLCJfaXRlcmF0b3I1IiwiY2hpbGQiLCJMb2FkaW5nSW1hZ2UiLCJCYWNrZ3JvdW5kIiwidXJsIiwiSW1hZ2UiLCJleGVjIiwiYmFja2dyb3VuZEltYWdlIiwiYWRkQmFja2dyb3VuZCIsIm9uUHJvZ3Jlc3MiLCJfdGhpczE3IiwicHJvZ3Jlc3NlZENvdW50IiwiaGFzQW55QnJva2VuIiwibWVzc2FnZSIsImlzTG9hZGVkIiwibm90aWZ5IiwiZGVidWciLCJsb2ciLCJpc0NvbXBsZXRlIiwianFNZXRob2QiLCJnZXRJc0ltYWdlQ29tcGxldGUiLCJjb25maXJtIiwibmF0dXJhbFdpZHRoIiwicHJveHlJbWFnZSIsImNyb3NzT3JpZ2luIiwiY3VycmVudFNyYyIsInVuYmluZEV2ZW50cyIsIm1ha2VKUXVlcnlQbHVnaW4iLCJmbiIsInByb21pc2UiLCJydW5uaW5nIiwiMTciLCJsYXp5c2l6ZXMiLCJsYXp5U2l6ZXNDZmciLCJwcm9wIiwiZG9jRWxlbSIsInN1cHBvcnRQaWN0dXJlIiwiX2FkZEV2ZW50TGlzdGVuZXIiLCJfZ2V0QXR0cmlidXRlIiwicmVxdWVzdElkbGVDYWxsYmFjayIsInJlZ1BpY3R1cmUiLCJsb2FkRXZlbnRzIiwicmVnQ2xhc3NDYWNoZSIsImhhc0NsYXNzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImFkZFJlbW92ZUxvYWRFdmVudHMiLCJ0cmlnZ2VyRXZlbnQiLCJ1cGRhdGVQb2x5ZmlsbCIsImdldENTUyIsImdldFdpZHRoIiwickFGIiwid2FpdGluZyIsImZpcnN0Rm5zIiwic2Vjb25kRm5zIiwiZm5zIiwickFGSXQiLCJkZWJvdW5jZSIsImxvYWRlciIsInByZWxvYWRFbGVtcyIsImlzQ29tcGxldGVkIiwicmVzZXRQcmVsb2FkaW5nVGltZXIiLCJsb2FkTW9kZSIsInN0YXJ0ZWQiLCJlTHZXIiwiZWx2SCIsImVMdG9wIiwiZUxsZWZ0IiwiZUxyaWdodCIsImVMYm90dG9tIiwiaXNCb2R5SGlkZGVuIiwibGFzdFRpbWUiLCJnRGVsYXkiLCJySUNUaW1lb3V0IiwiaWRsZUNhbGxiYWNrIiwicmVnSW1nIiwicmVnSWZyYW1lIiwic3VwcG9ydFNjcm9sbCIsImN1cnJlbnRFeHBhbmQiLCJpc0xvYWRpbmciLCJsb3dSdW5zIiwiaXNWaXNpYmxlIiwidGhyb3R0bGVkQ2hlY2tFbGVtZW50cyIsInJhZmVkU3dpdGNoTG9hZGluZ0NsYXNzIiwicmFmU3dpdGNoTG9hZGluZ0NsYXNzIiwibGF6eVVudmVpbCIsInVudmVpbEVsZW1lbnQiLCJhZnRlclNjcm9sbCIsImF1dG9TaXplciIsImF1dG9zaXplc0VsZW1zIiwic2l6ZUVsZW1lbnQiLCJkZWJvdW5jZWRVcGRhdGVFbGVtZW50c1NpemVzIiwiaW5pdCIsImxhenlTaXplc0RlZmF1bHRzIiwibGF6eUNsYXNzIiwibG9hZGVkQ2xhc3MiLCJsb2FkaW5nQ2xhc3MiLCJwcmVsb2FkQ2xhc3MiLCJlcnJvckNsYXNzIiwiYXV0b3NpemVzQ2xhc3MiLCJmYXN0TG9hZGVkQ2xhc3MiLCJpZnJhbWVMb2FkTW9kZSIsInNyY0F0dHIiLCJzcmNzZXRBdHRyIiwic2l6ZXNBdHRyIiwibWluU2l6ZSIsImN1c3RvbU1lZGlhIiwiZXhwRmFjdG9yIiwiaEZhYyIsImxvYWRIaWRkZW4iLCJyaWNUaW1lb3V0IiwidGhyb3R0bGVEZWxheSIsImxhenlTaXplc0NvbmZpZyIsImxhenlzaXplc0NvbmZpZyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJkb2N1bWVudEVsZW1lbnQiLCJIVE1MUGljdHVyZUVsZW1lbnQiLCJlbGUiLCJjbHMiLCJSZWdFeHAiLCJ0ZXN0IiwidHJpbSIsInJlZyIsImRvbSIsImFjdGlvbiIsImV2dCIsIm5hbWUiLCJkZXRhaWwiLCJub0J1YmJsZXMiLCJub0NhbmNlbGFibGUiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImVsIiwiZnVsbCIsInBvbHlmaWxsIiwicGljdHVyZWZpbGwiLCJwZiIsInJlZXZhbHVhdGUiLCJwYXJlbnQiLCJfbGF6eXNpemVzV2lkdGgiLCJyYWZCYXRjaCIsIl9sc0ZsdXNoIiwicnVuIiwic2ltcGxlIiwidGhhdCIsImZ1bmMiLCJsYXRlciIsImxhc3QiLCJub3ciLCJ0aW1lc3RhbXAiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJjaGVja0VsZW1lbnRzIiwic3dpdGNoTG9hZGluZ0NsYXNzIiwiaXNBdXRvIiwic2l6ZXMiLCJpc0ltZyIsImlzUGljdHVyZSIsImZpcmVzTG9hZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXNldFByZWxvYWRpbmciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImhhbmRsZVNvdXJjZXMiLCJjb250ZW50V2luZG93IiwibG9jYXRpb24iLCJfbGF6eVJhY2UiLCJfbGF6eUNhY2hlIiwibG9hZGluZyIsIl8iLCJsb2FkaW5nRWxlbWVudHMiLCJwZXJzaXN0ZWQiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJhdHRyaWJ1dGVzIiwic2V0SW50ZXJ2YWwiLCJjaGVja0VsZW1zIiwiaXNQcmlvcml0eSIsImRlbGF5IiwidW52ZWlsIiwidXBkYXRlRWxlbSIsIl9hTFNMIiwiYWx0TG9hZG1vZGVTY3JvbGxMaXN0bmVyIiwic291cmNlcyIsImdldFNpemVFbGVtZW50IiwiY2ZnIiwidVAiLCJhQyIsInJDIiwiaEMiLCJmaXJlIiwiZ1ciLCJub1N1cHBvcnQiLCJydW5GbnMiLCJxdWV1ZSIsImVMbGVuIiwiYXV0b0xvYWRFbGVtIiwibG9hZGVkU29tZXRoaW5nIiwiZWxlbUV4cGFuZCIsImVsZW1OZWdhdGl2ZUV4cGFuZCIsImVsZW1FeHBhbmRWYWwiLCJiZWZvcmVFeHBhbmRWYWwiLCJkZWZhdWx0RXhwYW5kIiwicHJlbG9hZEV4cGFuZCIsImxhenlsb2FkRWxlbXMiLCJwcmVtYXR1cmVVbnZlaWwiLCJleHBhbmQiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsIl9kZWZFeCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib3R0b20iLCJ0b3AiLCJvdXRlclJlY3QiLCJ2aXNpYmxlIiwib2Zmc2V0UGFyZW50IiwicHJlbG9hZEFmdGVyTG9hZCIsInNvdXJjZSIsInNvdXJjZVNyY3NldCIsImxhenlTaXplcyIsIjE4Iiwic3Vic2NyaWJlcnMiLCJzdGFydEV2ZW50IiwiYWN0aXZlRXZlbnRzIiwiY3Vyc29yTm9kZXMiLCJQb2ludGVyRXZlbnQiLCJfYmluZEhhbmRsZXMiLCJiaW5kTWV0aG9kIiwidG91Y2hBY3Rpb24iLCJfdGhpczE4IiwiaGFuZGxlIiwiX3RoaXMxOSIsInVuYmluZEFjdGl2ZVBvaW50ZXJFdmVudHMiLCJfdGhpczIwIiwid2l0aFBvaW50ZXIiLCJwb2ludGVySWQiLCJwb2ludGVySWRlbnRpZmllciIsIndpdGhUb3VjaCIsInRvdWNoIiwiX3N0ZXA2IiwiX2l0ZXJhdG9yNiIsImNoYW5nZWRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoIiwiaWRlbnRpZmllciIsIm9ubW91c2Vkb3duIiwicG9pbnRlckRvd24iLCJvbnRvdWNoc3RhcnQiLCJvbnBvaW50ZXJkb3duIiwiY2xpY2tUeXBlcyIsImlzQ3Vyc29yTm9kZSIsImlzQ2xpY2tUeXBlIiwicG9pbnRlckRvd25Qb2ludGVyIiwicGFnZVgiLCJwYWdlWSIsIm9ubW91c2Vtb3ZlIiwicG9pbnRlck1vdmUiLCJvbnBvaW50ZXJtb3ZlIiwib250b3VjaG1vdmUiLCJkcmFnU3RhcnQiLCJkcmFnTW92ZSIsImlzUHJldmVudGluZ0NsaWNrcyIsIm9ubW91c2V1cCIsInBvaW50ZXJVcCIsIm9ucG9pbnRlcnVwIiwib250b3VjaGVuZCIsImRyYWdFbmQiLCJzdGF0aWNDbGljayIsIl90aGlzMjEiLCJvbnBvaW50ZXJjYW5jZWwiLCJvbnRvdWNoY2FuY2VsIiwicG9pbnRlckNhbmNlbCIsIm9uY2xpY2siLCJfdGhpczIyIiwiaXNNb3VzZXVwIiwiaXNJZ25vcmluZ01vdXNlVXAiLCIxOSIsIlB1YlN1YiIsIi4vc2NyaXB0cy9wdWJzdWIiLCJmbGlja2l0eSIsIjIwIiwiRVZFTlRTIiwiY2FydFVwZGF0ZWQiLCJzdWJzY3JpYmUiLCJjYWxsYmFjayIsIl90aGlzMjQiLCJjYiIsInB1Ymxpc2giXSwibWFwcGluZ3MiOiJvL0ZBQUEsQ0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxHQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQUEsR0FBQSxDQUFBSixFQUFBRyxHQUFBLENBQUEsR0FBQSxDQUFBSixFQUFBSSxHQUFBLENBQUEsSUFBQUUsRUFBQSxZQUFBLE9BQUFDLFNBQUFBLFFBQUEsR0FBQSxDQUFBRixHQUFBQyxFQUFBLE9BQUFBLEVBQUFGLEVBQUEsQ0FBQSxDQUFBLEVBQUEsR0FBQUksRUFBQSxPQUFBQSxFQUFBSixFQUFBLENBQUEsQ0FBQSxFQUFBLE1BQUFLLEVBQUEsSUFBQUMsTUFBQSx1QkFBQU4sRUFBQSxHQUFBLEdBQUFPLEtBQUEsbUJBQUFGLENBQUEsQ0FBQUcsRUFBQVgsRUFBQUcsR0FBQSxDQUFBUyxRQUFBLEVBQUEsRUFBQWIsRUFBQUksR0FBQSxHQUFBVSxLQUFBRixFQUFBQyxRQUFBLFNBQUFkLEdBQUEsT0FBQUksRUFBQUgsRUFBQUksR0FBQSxHQUFBTCxJQUFBQSxDQUFBLENBQUEsRUFBQWEsRUFBQUEsRUFBQUMsUUFBQWQsRUFBQUMsRUFBQUMsRUFBQUMsQ0FBQSxDQUFBLENBQUEsT0FBQUQsRUFBQUcsR0FBQVMsT0FBQSxDQUFBLElBQUEsSUFBQUwsRUFBQSxZQUFBLE9BQUFELFNBQUFBLFFBQUFILEVBQUEsRUFBQUEsRUFBQUYsRUFBQWEsT0FBQVgsQ0FBQSxHQUFBRCxFQUFBRCxFQUFBRSxFQUFBLEVBQUEsT0FBQUQsQ0FBQSxFQUFBLENBQUFhLEVBQUEsQ0FBQSxTQUFBVCxFQUFBVSxFQUFBSixHQ01BLElBQUFLLEVBQUFDLEVBQUFELEVBVUEsYUFBQSxPQUFBRSxPQUFBQSxPQUFBQyxLQVZBRixFQVVBLFdBRUEsU0FBQUcsS0FFQSxJQUFB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QUFwWSxFQUNBQyxFQUNBQSxFQUFBRSxTQUFBLENsQnlpSUEsRUFBRSxDQUFDK1gsYUFBYSxDQUFDLEdBQUd1aEIsR0FBRyxDQUFDLFNBQVNyNkIsRUFBUVUsRUFBT0osR21CMWpJaERPLE9BQUF1RyxTQUFBcEgsRUFBQSxVQUFBLEVBQ0FBLEVBQUEsV0FBQSxFQUdBYSxPQUFBeTVCLE9BQUF0NkIsRUFBQSxrQkFBQSxDbkJza0lBLEVBQUUsQ0FBQ3U2QixtQkFBbUIsR0FBR0MsU0FBVyxFQUFFeFAsVUFBWSxFQUFFLEdBQUd5UCxHQUFHLENBQUMsU0FBU3o2QixFQUFRVSxFQUFPSixHaUIza0luRkksRUFBQUosUUFBQSxDQUNBbzZCLE9BQUEsQ0FDQUMsWUFBQSxjQUNBLEVBQ0E1RCxZQUFBLEdBQ0E2RCxVQUFBLFNBQUF6NUIsRUFBQTA1QixHQUFBLElBQUFDLEVBQUFoNkIsS0FPQSxPQU5BK0csS0FBQUEsSUFBQS9HLEtBQUFpMkIsWUFBQTUxQixLQUNBTCxLQUFBaTJCLFlBQUE1MUIsR0FBQSxJQUdBTCxLQUFBaTJCLFlBQUE1MUIsR0FBQSxHQUFBMEQsT0FBQXBCLG1CQUFBM0MsS0FBQWkyQixZQUFBNTFCLEVBQUEsRUFBQSxDQUFBMDVCLEVBQUEsRUFFQSxXQUNBQyxFQUFBL0QsWUFBQTUxQixHQUFBMjVCLEVBQUEvRCxZQUFBNTFCLEdBQUFvRCxPQUFBLFNBQUF3MkIsR0FDQSxPQUFBQSxJQUFBRixDQUNBLENBQUEsQ0FDQSxDQUNBLEVBQ0FHLFFBQUEsU0FBQTc1QixFQUFBOEYsR0FDQW5HLEtBQUFpMkIsWUFBQTUxQixJQUNBTCxLQUFBaTJCLFlBQUE1MUIsR0FBQXFGLFFBQUEsU0FBQXEwQixHQUNBQSxFQUFBNXpCLENBQUEsQ0FDQSxDQUFBLENBRUEsQ0FDQSxDakI4a0lBLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHIiwiZmlsZSI6Imdsb2JhbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvKipcbiAqIEV2RW1pdHRlciB2Mi4xLjFcbiAqIExpbCcgZXZlbnQgZW1pdHRlclxuICogTUlUIExpY2Vuc2VcbiAqL1xuXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgZ2xvYmFsLkV2RW1pdHRlciA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oKSB7XG5cbmZ1bmN0aW9uIEV2RW1pdHRlcigpIHt9XG5cbmxldCBwcm90byA9IEV2RW1pdHRlci5wcm90b3R5cGU7XG5cbnByb3RvLm9uID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSByZXR1cm4gdGhpcztcblxuICAvLyBzZXQgZXZlbnRzIGhhc2hcbiAgbGV0IGV2ZW50cyA9IHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IGxpc3RlbmVycyBhcnJheVxuICBsZXQgbGlzdGVuZXJzID0gZXZlbnRzWyBldmVudE5hbWUgXSA9IGV2ZW50c1sgZXZlbnROYW1lIF0gfHwgW107XG4gIC8vIG9ubHkgYWRkIG9uY2VcbiAgaWYgKCAhbGlzdGVuZXJzLmluY2x1ZGVzKCBsaXN0ZW5lciApICkge1xuICAgIGxpc3RlbmVycy5wdXNoKCBsaXN0ZW5lciApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vbmNlID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSByZXR1cm4gdGhpcztcblxuICAvLyBhZGQgZXZlbnRcbiAgdGhpcy5vbiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICAvLyBzZXQgb25jZSBmbGFnXG4gIC8vIHNldCBvbmNlRXZlbnRzIGhhc2hcbiAgbGV0IG9uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IG9uY2VMaXN0ZW5lcnMgb2JqZWN0XG4gIGxldCBvbmNlTGlzdGVuZXJzID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSB8fCB7fTtcbiAgLy8gc2V0IGZsYWdcbiAgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXSA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vZmYgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgbGV0IGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSByZXR1cm4gdGhpcztcblxuICBsZXQgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xuICBsZXQgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHJldHVybiB0aGlzO1xuXG4gIC8vIGNvcHkgb3ZlciB0byBhdm9pZCBpbnRlcmZlcmVuY2UgaWYgLm9mZigpIGluIGxpc3RlbmVyXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSggMCApO1xuICBhcmdzID0gYXJncyB8fCBbXTtcbiAgLy8gb25jZSBzdHVmZlxuICBsZXQgb25jZUxpc3RlbmVycyA9IHRoaXMuX29uY2VFdmVudHMgJiYgdGhpcy5fb25jZUV2ZW50c1sgZXZlbnROYW1lIF07XG5cbiAgZm9yICggbGV0IGxpc3RlbmVyIG9mIGxpc3RlbmVycyApIHtcbiAgICBsZXQgaXNPbmNlID0gb25jZUxpc3RlbmVycyAmJiBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIGlmICggaXNPbmNlICkge1xuICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyXG4gICAgICAvLyByZW1vdmUgYmVmb3JlIHRyaWdnZXIgdG8gcHJldmVudCByZWN1cnNpb25cbiAgICAgIHRoaXMub2ZmKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gICAgICAvLyB1bnNldCBvbmNlIGZsYWdcbiAgICAgIGRlbGV0ZSBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIH1cbiAgICAvLyB0cmlnZ2VyIGxpc3RlbmVyXG4gICAgbGlzdGVuZXIuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uYWxsT2ZmID0gZnVuY3Rpb24oKSB7XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gIGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnJldHVybiBFdkVtaXR0ZXI7XG5cbn0gKSApO1xuIiwiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEV2RW1pdHRlciB2Mi4xLjFcbiAqIExpbCcgZXZlbnQgZW1pdHRlclxuICogTUlUIExpY2Vuc2VcbiAqL1xuXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgZ2xvYmFsLkV2RW1pdHRlciA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oKSB7XG5cbmZ1bmN0aW9uIEV2RW1pdHRlcigpIHt9XG5cbmxldCBwcm90byA9IEV2RW1pdHRlci5wcm90b3R5cGU7XG5cbnByb3RvLm9uID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSByZXR1cm4gdGhpcztcblxuICAvLyBzZXQgZXZlbnRzIGhhc2hcbiAgbGV0IGV2ZW50cyA9IHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IGxpc3RlbmVycyBhcnJheVxuICBsZXQgbGlzdGVuZXJzID0gZXZlbnRzWyBldmVudE5hbWUgXSA9IGV2ZW50c1sgZXZlbnROYW1lIF0gfHwgW107XG4gIC8vIG9ubHkgYWRkIG9uY2VcbiAgaWYgKCAhbGlzdGVuZXJzLmluY2x1ZGVzKCBsaXN0ZW5lciApICkge1xuICAgIGxpc3RlbmVycy5wdXNoKCBsaXN0ZW5lciApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vbmNlID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSByZXR1cm4gdGhpcztcblxuICAvLyBhZGQgZXZlbnRcbiAgdGhpcy5vbiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICAvLyBzZXQgb25jZSBmbGFnXG4gIC8vIHNldCBvbmNlRXZlbnRzIGhhc2hcbiAgbGV0IG9uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IG9uY2VMaXN0ZW5lcnMgb2JqZWN0XG4gIGxldCBvbmNlTGlzdGVuZXJzID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSB8fCB7fTtcbiAgLy8gc2V0IGZsYWdcbiAgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXSA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vZmYgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgbGV0IGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSByZXR1cm4gdGhpcztcblxuICBsZXQgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xuICBsZXQgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHJldHVybiB0aGlzO1xuXG4gIC8vIGNvcHkgb3ZlciB0byBhdm9pZCBpbnRlcmZlcmVuY2UgaWYgLm9mZigpIGluIGxpc3RlbmVyXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSggMCApO1xuICBhcmdzID0gYXJncyB8fCBbXTtcbiAgLy8gb25jZSBzdHVmZlxuICBsZXQgb25jZUxpc3RlbmVycyA9IHRoaXMuX29uY2VFdmVudHMgJiYgdGhpcy5fb25jZUV2ZW50c1sgZXZlbnROYW1lIF07XG5cbiAgZm9yICggbGV0IGxpc3RlbmVyIG9mIGxpc3RlbmVycyApIHtcbiAgICBsZXQgaXNPbmNlID0gb25jZUxpc3RlbmVycyAmJiBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIGlmICggaXNPbmNlICkge1xuICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyXG4gICAgICAvLyByZW1vdmUgYmVmb3JlIHRyaWdnZXIgdG8gcHJldmVudCByZWN1cnNpb25cbiAgICAgIHRoaXMub2ZmKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gICAgICAvLyB1bnNldCBvbmNlIGZsYWdcbiAgICAgIGRlbGV0ZSBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIH1cbiAgICAvLyB0cmlnZ2VyIGxpc3RlbmVyXG4gICAgbGlzdGVuZXIuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uYWxsT2ZmID0gZnVuY3Rpb24oKSB7XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gIGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnJldHVybiBFdkVtaXR0ZXI7XG5cbn0gKSApO1xuXG59LHt9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogRml6enkgVUkgdXRpbHMgdjMuMC4wXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggZ2xvYmFsICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBnbG9iYWwuZml6enlVSVV0aWxzID0gZmFjdG9yeSggZ2xvYmFsICk7XG4gIH1cblxufSggdGhpcywgZnVuY3Rpb24gZmFjdG9yeSggZ2xvYmFsICkge1xuXG5sZXQgdXRpbHMgPSB7fTtcblxuLy8gLS0tLS0gZXh0ZW5kIC0tLS0tIC8vXG5cbi8vIGV4dGVuZHMgb2JqZWN0c1xudXRpbHMuZXh0ZW5kID0gZnVuY3Rpb24oIGEsIGIgKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKCBhLCBiICk7XG59O1xuXG4vLyAtLS0tLSBtb2R1bG8gLS0tLS0gLy9cblxudXRpbHMubW9kdWxvID0gZnVuY3Rpb24oIG51bSwgZGl2ICkge1xuICByZXR1cm4gKCAoIG51bSAlIGRpdiApICsgZGl2ICkgJSBkaXY7XG59O1xuXG4vLyAtLS0tLSBtYWtlQXJyYXkgLS0tLS0gLy9cblxuLy8gdHVybiBlbGVtZW50IG9yIG5vZGVMaXN0IGludG8gYW4gYXJyYXlcbnV0aWxzLm1ha2VBcnJheSA9IGZ1bmN0aW9uKCBvYmogKSB7XG4gIC8vIHVzZSBvYmplY3QgaWYgYWxyZWFkeSBhbiBhcnJheVxuICBpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkgcmV0dXJuIG9iajtcblxuICAvLyByZXR1cm4gZW1wdHkgYXJyYXkgaWYgdW5kZWZpbmVkIG9yIG51bGwuICM2XG4gIGlmICggb2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkICkgcmV0dXJuIFtdO1xuXG4gIGxldCBpc0FycmF5TGlrZSA9IHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcic7XG4gIC8vIGNvbnZlcnQgbm9kZUxpc3QgdG8gYXJyYXlcbiAgaWYgKCBpc0FycmF5TGlrZSApIHJldHVybiBbIC4uLm9iaiBdO1xuXG4gIC8vIGFycmF5IG9mIHNpbmdsZSBpbmRleFxuICByZXR1cm4gWyBvYmogXTtcbn07XG5cbi8vIC0tLS0tIHJlbW92ZUZyb20gLS0tLS0gLy9cblxudXRpbHMucmVtb3ZlRnJvbSA9IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcbiAgbGV0IGluZGV4ID0gYXJ5LmluZGV4T2YoIG9iaiApO1xuICBpZiAoIGluZGV4ICE9IC0xICkge1xuICAgIGFyeS5zcGxpY2UoIGluZGV4LCAxICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGdldFBhcmVudCAtLS0tLSAvL1xuXG51dGlscy5nZXRQYXJlbnQgPSBmdW5jdGlvbiggZWxlbSwgc2VsZWN0b3IgKSB7XG4gIHdoaWxlICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0gIT0gZG9jdW1lbnQuYm9keSApIHtcbiAgICBlbGVtID0gZWxlbS5wYXJlbnROb2RlO1xuICAgIGlmICggZWxlbS5tYXRjaGVzKCBzZWxlY3RvciApICkgcmV0dXJuIGVsZW07XG4gIH1cbn07XG5cbi8vIC0tLS0tIGdldFF1ZXJ5RWxlbWVudCAtLS0tLSAvL1xuXG4vLyB1c2UgZWxlbWVudCBhcyBzZWxlY3RvciBzdHJpbmdcbnV0aWxzLmdldFF1ZXJ5RWxlbWVudCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XG4gIH1cbiAgcmV0dXJuIGVsZW07XG59O1xuXG4vLyAtLS0tLSBoYW5kbGVFdmVudCAtLS0tLSAvL1xuXG4vLyBlbmFibGUgLm9udHlwZSB0byB0cmlnZ2VyIGZyb20gLmFkZEV2ZW50TGlzdGVuZXIoIGVsZW0sICd0eXBlJyApXG51dGlscy5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgbGV0IG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBmaWx0ZXJGaW5kRWxlbWVudHMgLS0tLS0gLy9cblxudXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zLCBzZWxlY3RvciApIHtcbiAgLy8gbWFrZSBhcnJheSBvZiBlbGVtc1xuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcblxuICByZXR1cm4gZWxlbXNcbiAgICAvLyBjaGVjayB0aGF0IGVsZW0gaXMgYW4gYWN0dWFsIGVsZW1lbnRcbiAgICAuZmlsdGVyKCAoIGVsZW0gKSA9PiBlbGVtIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgKVxuICAgIC5yZWR1Y2UoICggZmZFbGVtcywgZWxlbSApID0+IHtcbiAgICAgIC8vIGFkZCBlbGVtIGlmIG5vIHNlbGVjdG9yXG4gICAgICBpZiAoICFzZWxlY3RvciApIHtcbiAgICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XG4gICAgICAgIHJldHVybiBmZkVsZW1zO1xuICAgICAgfVxuICAgICAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGEgc2VsZWN0b3JcbiAgICAgIC8vIGZpbHRlclxuICAgICAgaWYgKCBlbGVtLm1hdGNoZXMoIHNlbGVjdG9yICkgKSB7XG4gICAgICAgIGZmRWxlbXMucHVzaCggZWxlbSApO1xuICAgICAgfVxuICAgICAgLy8gZmluZCBjaGlsZHJlblxuICAgICAgbGV0IGNoaWxkRWxlbXMgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHNlbGVjdG9yICk7XG4gICAgICAvLyBjb25jYXQgY2hpbGRFbGVtcyB0byBmaWx0ZXJGb3VuZCBhcnJheVxuICAgICAgZmZFbGVtcyA9IGZmRWxlbXMuY29uY2F0KCAuLi5jaGlsZEVsZW1zICk7XG4gICAgICByZXR1cm4gZmZFbGVtcztcbiAgICB9LCBbXSApO1xufTtcblxuLy8gLS0tLS0gZGVib3VuY2VNZXRob2QgLS0tLS0gLy9cblxudXRpbHMuZGVib3VuY2VNZXRob2QgPSBmdW5jdGlvbiggX2NsYXNzLCBtZXRob2ROYW1lLCB0aHJlc2hvbGQgKSB7XG4gIHRocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAxMDA7XG4gIC8vIG9yaWdpbmFsIG1ldGhvZFxuICBsZXQgbWV0aG9kID0gX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdO1xuICBsZXQgdGltZW91dE5hbWUgPSBtZXRob2ROYW1lICsgJ1RpbWVvdXQnO1xuXG4gIF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXSA9IGZ1bmN0aW9uKCkge1xuICAgIGNsZWFyVGltZW91dCggdGhpc1sgdGltZW91dE5hbWUgXSApO1xuXG4gICAgbGV0IGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdGhpc1sgdGltZW91dE5hbWUgXSA9IHNldFRpbWVvdXQoICgpID0+IHtcbiAgICAgIG1ldGhvZC5hcHBseSggdGhpcywgYXJncyApO1xuICAgICAgZGVsZXRlIHRoaXNbIHRpbWVvdXROYW1lIF07XG4gICAgfSwgdGhyZXNob2xkICk7XG4gIH07XG59O1xuXG4vLyAtLS0tLSBkb2NSZWFkeSAtLS0tLSAvL1xuXG51dGlscy5kb2NSZWFkeSA9IGZ1bmN0aW9uKCBvbkRvY1JlYWR5ICkge1xuICBsZXQgcmVhZHlTdGF0ZSA9IGRvY3VtZW50LnJlYWR5U3RhdGU7XG4gIGlmICggcmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnIHx8IHJlYWR5U3RhdGUgPT0gJ2ludGVyYWN0aXZlJyApIHtcbiAgICAvLyBkbyBhc3luYyB0byBhbGxvdyBmb3Igb3RoZXIgc2NyaXB0cyB0byBydW4uIG1ldGFmaXp6eS9mbGlja2l0eSM0NDFcbiAgICBzZXRUaW1lb3V0KCBvbkRvY1JlYWR5ICk7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ0RPTUNvbnRlbnRMb2FkZWQnLCBvbkRvY1JlYWR5ICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGh0bWxJbml0IC0tLS0tIC8vXG5cbi8vIGh0dHA6Ly9iaXQubHkvM29ZTHVzY1xudXRpbHMudG9EYXNoZWQgPSBmdW5jdGlvbiggc3RyICkge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoIC8oLikoW0EtWl0pL2csIGZ1bmN0aW9uKCBtYXRjaCwgJDEsICQyICkge1xuICAgIHJldHVybiAkMSArICctJyArICQyO1xuICB9ICkudG9Mb3dlckNhc2UoKTtcbn07XG5cbmxldCBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG5cbi8vIGFsbG93IHVzZXIgdG8gaW5pdGlhbGl6ZSBjbGFzc2VzIHZpYSBbZGF0YS1uYW1lc3BhY2VdIG9yIC5qcy1uYW1lc3BhY2UgY2xhc3Ncbi8vIGh0bWxJbml0KCBXaWRnZXQsICd3aWRnZXROYW1lJyApXG4vLyBvcHRpb25zIGFyZSBwYXJzZWQgZnJvbSBkYXRhLW5hbWVzcGFjZS1vcHRpb25zXG51dGlscy5odG1sSW5pdCA9IGZ1bmN0aW9uKCBXaWRnZXRDbGFzcywgbmFtZXNwYWNlICkge1xuICB1dGlscy5kb2NSZWFkeSggZnVuY3Rpb24oKSB7XG4gICAgbGV0IGRhc2hlZE5hbWVzcGFjZSA9IHV0aWxzLnRvRGFzaGVkKCBuYW1lc3BhY2UgKTtcbiAgICBsZXQgZGF0YUF0dHIgPSAnZGF0YS0nICsgZGFzaGVkTmFtZXNwYWNlO1xuICAgIGxldCBkYXRhQXR0ckVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggYFske2RhdGFBdHRyfV1gICk7XG4gICAgbGV0IGpRdWVyeSA9IGdsb2JhbC5qUXVlcnk7XG5cbiAgICBbIC4uLmRhdGFBdHRyRWxlbXMgXS5mb3JFYWNoKCAoIGVsZW0gKSA9PiB7XG4gICAgICBsZXQgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBkYXRhQXR0ciApO1xuICAgICAgbGV0IG9wdGlvbnM7XG4gICAgICB0cnkge1xuICAgICAgICBvcHRpb25zID0gYXR0ciAmJiBKU09OLnBhcnNlKCBhdHRyICk7XG4gICAgICB9IGNhdGNoICggZXJyb3IgKSB7XG4gICAgICAgIC8vIGxvZyBlcnJvciwgZG8gbm90IGluaXRpYWxpemVcbiAgICAgICAgaWYgKCBjb25zb2xlICkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIGBFcnJvciBwYXJzaW5nICR7ZGF0YUF0dHJ9IG9uICR7ZWxlbS5jbGFzc05hbWV9OiAke2Vycm9yfWAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBpbml0aWFsaXplXG4gICAgICBsZXQgaW5zdGFuY2UgPSBuZXcgV2lkZ2V0Q2xhc3MoIGVsZW0sIG9wdGlvbnMgKTtcbiAgICAgIC8vIG1ha2UgYXZhaWxhYmxlIHZpYSAkKCkuZGF0YSgnbmFtZXNwYWNlJylcbiAgICAgIGlmICggalF1ZXJ5ICkge1xuICAgICAgICBqUXVlcnkuZGF0YSggZWxlbSwgbmFtZXNwYWNlLCBpbnN0YW5jZSApO1xuICAgICAgfVxuICAgIH0gKTtcblxuICB9ICk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIHV0aWxzO1xuXG59ICkgKTtcblxufSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBhZGQsIHJlbW92ZSBjZWxsXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHJlcXVpcmUoJy4vY29yZScpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXG4gICAgKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSggRmxpY2tpdHksIHV0aWxzICkge1xuXG4vLyBhcHBlbmQgY2VsbHMgdG8gYSBkb2N1bWVudCBmcmFnbWVudFxuZnVuY3Rpb24gZ2V0Q2VsbHNGcmFnbWVudCggY2VsbHMgKSB7XG4gIGxldCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgY2VsbHMuZm9yRWFjaCggKCBjZWxsICkgPT4gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNlbGwuZWxlbWVudCApICk7XG4gIHJldHVybiBmcmFnbWVudDtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYWRkL3JlbW92ZSBjZWxsIHByb3RvdHlwZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5sZXQgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG5cbi8qKlxuICogSW5zZXJ0LCBwcmVwZW5kLCBvciBhcHBlbmQgY2VsbHNcbiAqIEBwYXJhbSB7W0VsZW1lbnQsIEFycmF5LCBOb2RlTGlzdF19IGVsZW1zIC0gRWxlbWVudHMgdG8gaW5zZXJ0XG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gWmVyby1iYXNlZCBudW1iZXIgdG8gaW5zZXJ0XG4gKi9cbnByb3RvLmluc2VydCA9IGZ1bmN0aW9uKCBlbGVtcywgaW5kZXggKSB7XG4gIGxldCBjZWxscyA9IHRoaXMuX21ha2VDZWxscyggZWxlbXMgKTtcbiAgaWYgKCAhY2VsbHMgfHwgIWNlbGxzLmxlbmd0aCApIHJldHVybjtcblxuICBsZXQgbGVuID0gdGhpcy5jZWxscy5sZW5ndGg7XG4gIC8vIGRlZmF1bHQgdG8gYXBwZW5kXG4gIGluZGV4ID0gaW5kZXggPT09IHVuZGVmaW5lZCA/IGxlbiA6IGluZGV4O1xuICAvLyBhZGQgY2VsbHMgd2l0aCBkb2N1bWVudCBmcmFnbWVudFxuICBsZXQgZnJhZ21lbnQgPSBnZXRDZWxsc0ZyYWdtZW50KCBjZWxscyApO1xuICAvLyBhcHBlbmQgdG8gc2xpZGVyXG4gIGxldCBpc0FwcGVuZCA9IGluZGV4ID09PSBsZW47XG4gIGlmICggaXNBcHBlbmQgKSB7XG4gICAgdGhpcy5zbGlkZXIuYXBwZW5kQ2hpbGQoIGZyYWdtZW50ICk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluc2VydENlbGxFbGVtZW50ID0gdGhpcy5jZWxsc1sgaW5kZXggXS5lbGVtZW50O1xuICAgIHRoaXMuc2xpZGVyLmluc2VydEJlZm9yZSggZnJhZ21lbnQsIGluc2VydENlbGxFbGVtZW50ICk7XG4gIH1cbiAgLy8gYWRkIHRvIHRoaXMuY2VsbHNcbiAgaWYgKCBpbmRleCA9PT0gMCApIHtcbiAgICAvLyBwcmVwZW5kLCBhZGQgdG8gc3RhcnRcbiAgICB0aGlzLmNlbGxzID0gY2VsbHMuY29uY2F0KCB0aGlzLmNlbGxzICk7XG4gIH0gZWxzZSBpZiAoIGlzQXBwZW5kICkge1xuICAgIC8vIGFwcGVuZCwgYWRkIHRvIGVuZFxuICAgIHRoaXMuY2VsbHMgPSB0aGlzLmNlbGxzLmNvbmNhdCggY2VsbHMgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpbnNlcnQgaW4gdGhpcy5jZWxsc1xuICAgIGxldCBlbmRDZWxscyA9IHRoaXMuY2VsbHMuc3BsaWNlKCBpbmRleCwgbGVuIC0gaW5kZXggKTtcbiAgICB0aGlzLmNlbGxzID0gdGhpcy5jZWxscy5jb25jYXQoIGNlbGxzICkuY29uY2F0KCBlbmRDZWxscyApO1xuICB9XG5cbiAgdGhpcy5fc2l6ZUNlbGxzKCBjZWxscyApO1xuICB0aGlzLmNlbGxDaGFuZ2UoIGluZGV4ICk7XG4gIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG59O1xuXG5wcm90by5hcHBlbmQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHRoaXMuaW5zZXJ0KCBlbGVtcywgdGhpcy5jZWxscy5sZW5ndGggKTtcbn07XG5cbnByb3RvLnByZXBlbmQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHRoaXMuaW5zZXJ0KCBlbGVtcywgMCApO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgY2VsbHNcbiAqIEBwYXJhbSB7W0VsZW1lbnQsIEFycmF5LCBOb2RlTGlzdF19IGVsZW1zIC0gRUxlbWVudHMgdG8gcmVtb3ZlXG4gKi9cbnByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgbGV0IGNlbGxzID0gdGhpcy5nZXRDZWxscyggZWxlbXMgKTtcbiAgaWYgKCAhY2VsbHMgfHwgIWNlbGxzLmxlbmd0aCApIHJldHVybjtcblxuICBsZXQgbWluQ2VsbEluZGV4ID0gdGhpcy5jZWxscy5sZW5ndGggLSAxO1xuICAvLyByZW1vdmUgY2VsbHMgZnJvbSBjb2xsZWN0aW9uICYgRE9NXG4gIGNlbGxzLmZvckVhY2goICggY2VsbCApID0+IHtcbiAgICBjZWxsLnJlbW92ZSgpO1xuICAgIGxldCBpbmRleCA9IHRoaXMuY2VsbHMuaW5kZXhPZiggY2VsbCApO1xuICAgIG1pbkNlbGxJbmRleCA9IE1hdGgubWluKCBpbmRleCwgbWluQ2VsbEluZGV4ICk7XG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5jZWxscywgY2VsbCApO1xuICB9ICk7XG5cbiAgdGhpcy5jZWxsQ2hhbmdlKCBtaW5DZWxsSW5kZXggKTtcbiAgdGhpcy5wb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQoKTtcbn07XG5cbi8qKlxuICogbG9naWMgdG8gYmUgcnVuIGFmdGVyIGEgY2VsbCdzIHNpemUgY2hhbmdlc1xuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtIC0gY2VsbCdzIGVsZW1lbnRcbiAqL1xucHJvdG8uY2VsbFNpemVDaGFuZ2UgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgbGV0IGNlbGwgPSB0aGlzLmdldENlbGwoIGVsZW0gKTtcbiAgaWYgKCAhY2VsbCApIHJldHVybjtcblxuICBjZWxsLmdldFNpemUoKTtcblxuICBsZXQgaW5kZXggPSB0aGlzLmNlbGxzLmluZGV4T2YoIGNlbGwgKTtcbiAgdGhpcy5jZWxsQ2hhbmdlKCBpbmRleCApO1xuICAvLyBkbyBub3QgcG9zaXRpb24gc2xpZGVyIGFmdGVyIGxhenkgbG9hZFxufTtcblxuLyoqXG4gKiBsb2dpYyBhbnkgdGltZSBhIGNlbGwgaXMgY2hhbmdlZDogYWRkZWQsIHJlbW92ZWQsIG9yIHNpemUgY2hhbmdlZFxuICogQHBhcmFtIHtJbnRlZ2VyfSBjaGFuZ2VkQ2VsbEluZGV4IC0gaW5kZXggb2YgdGhlIGNoYW5nZWQgY2VsbCwgb3B0aW9uYWxcbiAqL1xucHJvdG8uY2VsbENoYW5nZSA9IGZ1bmN0aW9uKCBjaGFuZ2VkQ2VsbEluZGV4ICkge1xuICBsZXQgcHJldlNlbGVjdGVkRWxlbSA9IHRoaXMuc2VsZWN0ZWRFbGVtZW50O1xuICB0aGlzLl9wb3NpdGlvbkNlbGxzKCBjaGFuZ2VkQ2VsbEluZGV4ICk7XG4gIHRoaXMuX3VwZGF0ZVdyYXBTaGlmdENlbGxzKCk7XG4gIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbiAgLy8gdXBkYXRlIHNlbGVjdGVkSW5kZXgsIHRyeSB0byBtYWludGFpbiBwb3NpdGlvbiAmIHNlbGVjdCBwcmV2aW91cyBzZWxlY3RlZCBlbGVtZW50XG4gIGxldCBjZWxsID0gdGhpcy5nZXRDZWxsKCBwcmV2U2VsZWN0ZWRFbGVtICk7XG4gIGlmICggY2VsbCApIHRoaXMuc2VsZWN0ZWRJbmRleCA9IHRoaXMuZ2V0Q2VsbFNsaWRlSW5kZXgoIGNlbGwgKTtcbiAgdGhpcy5zZWxlY3RlZEluZGV4ID0gTWF0aC5taW4oIHRoaXMuc2xpZGVzLmxlbmd0aCAtIDEsIHRoaXMuc2VsZWN0ZWRJbmRleCApO1xuXG4gIHRoaXMuZW1pdEV2ZW50KCAnY2VsbENoYW5nZScsIFsgY2hhbmdlZENlbGxJbmRleCBdICk7XG4gIC8vIHBvc2l0aW9uIHNsaWRlclxuICB0aGlzLnNlbGVjdCggdGhpcy5zZWxlY3RlZEluZGV4ICk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcblxufSx7XCIuL2NvcmVcIjo2LFwiZml6enktdWktdXRpbHNcIjoyfV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBhbmltYXRlXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IHdpbmRvdy5GbGlja2l0eSB8fCB7fTtcbiAgICB3aW5kb3cuRmxpY2tpdHkuYW5pbWF0ZVByb3RvdHlwZSA9IGZhY3RvcnkoIHdpbmRvdy5maXp6eVVJVXRpbHMgKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSggdXRpbHMgKSB7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGFuaW1hdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxubGV0IHByb3RvID0ge307XG5cbnByb3RvLnN0YXJ0QW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5pc0FuaW1hdGluZyApIHJldHVybjtcblxuICB0aGlzLmlzQW5pbWF0aW5nID0gdHJ1ZTtcbiAgdGhpcy5yZXN0aW5nRnJhbWVzID0gMDtcbiAgdGhpcy5hbmltYXRlKCk7XG59O1xuXG5wcm90by5hbmltYXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYXBwbHlEcmFnRm9yY2UoKTtcbiAgdGhpcy5hcHBseVNlbGVjdGVkQXR0cmFjdGlvbigpO1xuXG4gIGxldCBwcmV2aW91c1ggPSB0aGlzLng7XG5cbiAgdGhpcy5pbnRlZ3JhdGVQaHlzaWNzKCk7XG4gIHRoaXMucG9zaXRpb25TbGlkZXIoKTtcbiAgdGhpcy5zZXR0bGUoIHByZXZpb3VzWCApO1xuICAvLyBhbmltYXRlIG5leHQgZnJhbWVcbiAgaWYgKCB0aGlzLmlzQW5pbWF0aW5nICkgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCAoKSA9PiB0aGlzLmFuaW1hdGUoKSApO1xufTtcblxucHJvdG8ucG9zaXRpb25TbGlkZXIgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHggPSB0aGlzLng7XG4gIC8vIHdyYXAgcG9zaXRpb24gYXJvdW5kXG4gIGlmICggdGhpcy5pc1dyYXBwaW5nICkge1xuICAgIHggPSB1dGlscy5tb2R1bG8oIHgsIHRoaXMuc2xpZGVhYmxlV2lkdGggKSAtIHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gICAgdGhpcy5zaGlmdFdyYXBDZWxscyggeCApO1xuICB9XG5cbiAgdGhpcy5zZXRUcmFuc2xhdGVYKCB4LCB0aGlzLmlzQW5pbWF0aW5nICk7XG4gIHRoaXMuZGlzcGF0Y2hTY3JvbGxFdmVudCgpO1xufTtcblxucHJvdG8uc2V0VHJhbnNsYXRlWCA9IGZ1bmN0aW9uKCB4LCBpczNkICkge1xuICB4ICs9IHRoaXMuY3Vyc29yUG9zaXRpb247XG4gIC8vIHJldmVyc2UgaWYgcmlnaHQtdG8tbGVmdCBhbmQgdXNpbmcgdHJhbnNmb3JtXG4gIGlmICggdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ICkgeCA9IC14O1xuICBsZXQgdHJhbnNsYXRlWCA9IHRoaXMuZ2V0UG9zaXRpb25WYWx1ZSggeCApO1xuICAvLyB1c2UgM0QgdHJhbnNmb3JtcyBmb3IgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIG9uIGlPU1xuICAvLyBidXQgdXNlIDJEIHdoZW4gc2V0dGxlZCwgZm9yIGJldHRlciBmb250LXJlbmRlcmluZ1xuICB0aGlzLnNsaWRlci5zdHlsZS50cmFuc2Zvcm0gPSBpczNkID9cbiAgICBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVYfSwwLDApYCA6IGB0cmFuc2xhdGVYKCR7dHJhbnNsYXRlWH0pYDtcbn07XG5cbnByb3RvLmRpc3BhdGNoU2Nyb2xsRXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGZpcnN0U2xpZGUgPSB0aGlzLnNsaWRlc1swXTtcbiAgaWYgKCAhZmlyc3RTbGlkZSApIHJldHVybjtcblxuICBsZXQgcG9zaXRpb25YID0gLXRoaXMueCAtIGZpcnN0U2xpZGUudGFyZ2V0O1xuICBsZXQgcHJvZ3Jlc3MgPSBwb3NpdGlvblggLyB0aGlzLnNsaWRlc1dpZHRoO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdzY3JvbGwnLCBudWxsLCBbIHByb2dyZXNzLCBwb3NpdGlvblggXSApO1xufTtcblxucHJvdG8ucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMuY2VsbHMubGVuZ3RoICkgcmV0dXJuO1xuXG4gIHRoaXMueCA9IC10aGlzLnNlbGVjdGVkU2xpZGUudGFyZ2V0O1xuICB0aGlzLnZlbG9jaXR5ID0gMDsgLy8gc3RvcCB3b2JibGVcbiAgdGhpcy5wb3NpdGlvblNsaWRlcigpO1xufTtcblxucHJvdG8uZ2V0UG9zaXRpb25WYWx1ZSA9IGZ1bmN0aW9uKCBwb3NpdGlvbiApIHtcbiAgaWYgKCB0aGlzLm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICkge1xuICAgIC8vIHBlcmNlbnQgcG9zaXRpb24sIHJvdW5kIHRvIDIgZGlnaXRzLCBsaWtlIDEyLjM0JVxuICAgIHJldHVybiAoIE1hdGgucm91bmQoICggcG9zaXRpb24gLyB0aGlzLnNpemUuaW5uZXJXaWR0aCApICogMTAwMDAgKSAqIDAuMDEgKSArICclJztcbiAgfSBlbHNlIHtcbiAgICAvLyBwaXhlbCBwb3NpdGlvbmluZ1xuICAgIHJldHVybiBNYXRoLnJvdW5kKCBwb3NpdGlvbiApICsgJ3B4JztcbiAgfVxufTtcblxucHJvdG8uc2V0dGxlID0gZnVuY3Rpb24oIHByZXZpb3VzWCApIHtcbiAgLy8ga2VlcCB0cmFjayBvZiBmcmFtZXMgd2hlcmUgeCBoYXNuJ3QgbW92ZWRcbiAgbGV0IGlzUmVzdGluZyA9ICF0aGlzLmlzUG9pbnRlckRvd24gJiZcbiAgICAgIE1hdGgucm91bmQoIHRoaXMueCAqIDEwMCApID09PSBNYXRoLnJvdW5kKCBwcmV2aW91c1ggKiAxMDAgKTtcbiAgaWYgKCBpc1Jlc3RpbmcgKSB0aGlzLnJlc3RpbmdGcmFtZXMrKztcbiAgLy8gc3RvcCBhbmltYXRpbmcgaWYgcmVzdGluZyBmb3IgMyBvciBtb3JlIGZyYW1lc1xuICBpZiAoIHRoaXMucmVzdGluZ0ZyYW1lcyA+IDIgKSB7XG4gICAgdGhpcy5pc0FuaW1hdGluZyA9IGZhbHNlO1xuICAgIGRlbGV0ZSB0aGlzLmlzRnJlZVNjcm9sbGluZztcbiAgICAvLyByZW5kZXIgcG9zaXRpb24gd2l0aCB0cmFuc2xhdGVYIHdoZW4gc2V0dGxlZFxuICAgIHRoaXMucG9zaXRpb25TbGlkZXIoKTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoICdzZXR0bGUnLCBudWxsLCBbIHRoaXMuc2VsZWN0ZWRJbmRleCBdICk7XG4gIH1cbn07XG5cbnByb3RvLnNoaWZ0V3JhcENlbGxzID0gZnVuY3Rpb24oIHggKSB7XG4gIC8vIHNoaWZ0IGJlZm9yZSBjZWxsc1xuICBsZXQgYmVmb3JlR2FwID0gdGhpcy5jdXJzb3JQb3NpdGlvbiArIHg7XG4gIHRoaXMuX3NoaWZ0Q2VsbHMoIHRoaXMuYmVmb3JlU2hpZnRDZWxscywgYmVmb3JlR2FwLCAtMSApO1xuICAvLyBzaGlmdCBhZnRlciBjZWxsc1xuICBsZXQgYWZ0ZXJHYXAgPSB0aGlzLnNpemUuaW5uZXJXaWR0aCAtICggeCArIHRoaXMuc2xpZGVhYmxlV2lkdGggKyB0aGlzLmN1cnNvclBvc2l0aW9uICk7XG4gIHRoaXMuX3NoaWZ0Q2VsbHMoIHRoaXMuYWZ0ZXJTaGlmdENlbGxzLCBhZnRlckdhcCwgMSApO1xufTtcblxucHJvdG8uX3NoaWZ0Q2VsbHMgPSBmdW5jdGlvbiggY2VsbHMsIGdhcCwgc2hpZnQgKSB7XG4gIGNlbGxzLmZvckVhY2goICggY2VsbCApID0+IHtcbiAgICBsZXQgY2VsbFNoaWZ0ID0gZ2FwID4gMCA/IHNoaWZ0IDogMDtcbiAgICB0aGlzLl93cmFwU2hpZnRDZWxsKCBjZWxsLCBjZWxsU2hpZnQgKTtcbiAgICBnYXAgLT0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIH0gKTtcbn07XG5cbnByb3RvLl91bnNoaWZ0Q2VsbHMgPSBmdW5jdGlvbiggY2VsbHMgKSB7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSByZXR1cm47XG5cbiAgY2VsbHMuZm9yRWFjaCggKCBjZWxsICkgPT4gdGhpcy5fd3JhcFNoaWZ0Q2VsbCggY2VsbCwgMCApICk7XG59O1xuXG4vLyBAcGFyYW0ge0ludGVnZXJ9IHNoaWZ0IC0gMCwgMSwgb3IgLTFcbnByb3RvLl93cmFwU2hpZnRDZWxsID0gZnVuY3Rpb24oIGNlbGwsIHNoaWZ0ICkge1xuICB0aGlzLl9yZW5kZXJDZWxsUG9zaXRpb24oIGNlbGwsIGNlbGwueCArIHRoaXMuc2xpZGVhYmxlV2lkdGggKiBzaGlmdCApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcGh5c2ljcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by5pbnRlZ3JhdGVQaHlzaWNzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMueCArPSB0aGlzLnZlbG9jaXR5O1xuICB0aGlzLnZlbG9jaXR5ICo9IHRoaXMuZ2V0RnJpY3Rpb25GYWN0b3IoKTtcbn07XG5cbnByb3RvLmFwcGx5Rm9yY2UgPSBmdW5jdGlvbiggZm9yY2UgKSB7XG4gIHRoaXMudmVsb2NpdHkgKz0gZm9yY2U7XG59O1xuXG5wcm90by5nZXRGcmljdGlvbkZhY3RvciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gMSAtIHRoaXMub3B0aW9uc1sgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPyAnZnJlZVNjcm9sbEZyaWN0aW9uJyA6ICdmcmljdGlvbicgXTtcbn07XG5cbnByb3RvLmdldFJlc3RpbmdQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAvLyBteSB0aGFua3MgdG8gU3RldmVuIFdpdHRlbnMsIHdobyBzaW1wbGlmaWVkIHRoaXMgbWF0aCBncmVhdGx5XG4gIHJldHVybiB0aGlzLnggKyB0aGlzLnZlbG9jaXR5IC8gKCAxIC0gdGhpcy5nZXRGcmljdGlvbkZhY3RvcigpICk7XG59O1xuXG5wcm90by5hcHBseURyYWdGb3JjZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlIHx8ICF0aGlzLmlzUG9pbnRlckRvd24gKSByZXR1cm47XG5cbiAgLy8gY2hhbmdlIHRoZSBwb3NpdGlvbiB0byBkcmFnIHBvc2l0aW9uIGJ5IGFwcGx5aW5nIGZvcmNlXG4gIGxldCBkcmFnVmVsb2NpdHkgPSB0aGlzLmRyYWdYIC0gdGhpcy54O1xuICBsZXQgZHJhZ0ZvcmNlID0gZHJhZ1ZlbG9jaXR5IC0gdGhpcy52ZWxvY2l0eTtcbiAgdGhpcy5hcHBseUZvcmNlKCBkcmFnRm9yY2UgKTtcbn07XG5cbnByb3RvLmFwcGx5U2VsZWN0ZWRBdHRyYWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIC8vIGRvIG5vdCBhdHRyYWN0IGlmIHBvaW50ZXIgZG93biBvciBubyBzbGlkZXNcbiAgbGV0IGRyYWdEb3duID0gdGhpcy5pc0RyYWdnYWJsZSAmJiB0aGlzLmlzUG9pbnRlckRvd247XG4gIGlmICggZHJhZ0Rvd24gfHwgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgfHwgIXRoaXMuc2xpZGVzLmxlbmd0aCApIHJldHVybjtcblxuICBsZXQgZGlzdGFuY2UgPSB0aGlzLnNlbGVjdGVkU2xpZGUudGFyZ2V0ICogLTEgLSB0aGlzLng7XG4gIGxldCBmb3JjZSA9IGRpc3RhbmNlICogdGhpcy5vcHRpb25zLnNlbGVjdGVkQXR0cmFjdGlvbjtcbiAgdGhpcy5hcHBseUZvcmNlKCBmb3JjZSApO1xufTtcblxucmV0dXJuIHByb3RvO1xuXG59ICkgKTtcblxufSx7XCJmaXp6eS11aS11dGlsc1wiOjJ9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIEZsaWNraXR5LkNlbGxcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggcmVxdWlyZSgnZ2V0LXNpemUnKSApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LkZsaWNraXR5ID0gd2luZG93LkZsaWNraXR5IHx8IHt9O1xuICAgIHdpbmRvdy5GbGlja2l0eS5DZWxsID0gZmFjdG9yeSggd2luZG93LmdldFNpemUgKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSggZ2V0U2l6ZSApIHtcblxuY29uc3QgY2VsbENsYXNzTmFtZSA9ICdmbGlja2l0eS1jZWxsJztcblxuZnVuY3Rpb24gQ2VsbCggZWxlbSApIHtcbiAgdGhpcy5lbGVtZW50ID0gZWxlbTtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoIGNlbGxDbGFzc05hbWUgKTtcblxuICB0aGlzLnggPSAwO1xuICB0aGlzLnVuc2VsZWN0KCk7XG59XG5cbmxldCBwcm90byA9IENlbGwucHJvdG90eXBlO1xuXG5wcm90by5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlc2V0IHN0eWxlXG4gIHRoaXMudW5zZWxlY3QoKTtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoIGNlbGxDbGFzc05hbWUgKTtcbiAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xufTtcblxucHJvdG8uZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcbn07XG5cbnByb3RvLnNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtc2VsZWN0ZWQnKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbn07XG5cbnByb3RvLnVuc2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zZWxlY3RlZCcpO1xuICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCAnYXJpYS1oaWRkZW4nLCAndHJ1ZScgKTtcbn07XG5cbnByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlKCk7XG59O1xuXG5yZXR1cm4gQ2VsbDtcblxufSApICk7XG5cbn0se1wiZ2V0LXNpemVcIjoxNX1dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gRmxpY2tpdHkgbWFpblxuLyogZXNsaW50LWRpc2FibGUgbWF4LXBhcmFtcyAqL1xuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKSxcbiAgICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcbiAgICAgICAgcmVxdWlyZSgnLi9jZWxsJyksXG4gICAgICAgIHJlcXVpcmUoJy4vc2xpZGUnKSxcbiAgICAgICAgcmVxdWlyZSgnLi9hbmltYXRlJyksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGxldCBfRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHk7XG5cbiAgICB3aW5kb3cuRmxpY2tpdHkgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHdpbmRvdy5FdkVtaXR0ZXIsXG4gICAgICAgIHdpbmRvdy5nZXRTaXplLFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxuICAgICAgICBfRmxpY2tpdHkuQ2VsbCxcbiAgICAgICAgX0ZsaWNraXR5LlNsaWRlLFxuICAgICAgICBfRmxpY2tpdHkuYW5pbWF0ZVByb3RvdHlwZSxcbiAgICApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLFxuICAgIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgQ2VsbCwgU2xpZGUsIGFuaW1hdGVQcm90b3R5cGUgKSB7XG4vKiBlc2xpbnQtZW5hYmxlIG1heC1wYXJhbXMgKi9cblxuLy8gdmFyc1xuY29uc3QgeyBnZXRDb21wdXRlZFN0eWxlLCBjb25zb2xlIH0gPSB3aW5kb3c7XG5sZXQgeyBqUXVlcnkgfSA9IHdpbmRvdztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZ2xvYmFsbHkgdW5pcXVlIGlkZW50aWZpZXJzXG5sZXQgR1VJRCA9IDA7XG4vLyBpbnRlcm5hbCBzdG9yZSBvZiBhbGwgRmxpY2tpdHkgaW50YW5jZXNcbmxldCBpbnN0YW5jZXMgPSB7fTtcblxuZnVuY3Rpb24gRmxpY2tpdHkoIGVsZW1lbnQsIG9wdGlvbnMgKSB7XG4gIGxldCBxdWVyeUVsZW1lbnQgPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW1lbnQgKTtcbiAgaWYgKCAhcXVlcnlFbGVtZW50ICkge1xuICAgIGlmICggY29uc29sZSApIGNvbnNvbGUuZXJyb3IoYEJhZCBlbGVtZW50IGZvciBGbGlja2l0eTogJHtxdWVyeUVsZW1lbnQgfHwgZWxlbWVudH1gKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5lbGVtZW50ID0gcXVlcnlFbGVtZW50O1xuICAvLyBkbyBub3QgaW5pdGlhbGl6ZSB0d2ljZSBvbiBzYW1lIGVsZW1lbnRcbiAgaWYgKCB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEICkge1xuICAgIGxldCBpbnN0YW5jZSA9IGluc3RhbmNlc1sgdGhpcy5lbGVtZW50LmZsaWNraXR5R1VJRCBdO1xuICAgIGlmICggaW5zdGFuY2UgKSBpbnN0YW5jZS5vcHRpb24oIG9wdGlvbnMgKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH1cblxuICAvLyBhZGQgalF1ZXJ5XG4gIGlmICggalF1ZXJ5ICkge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBqUXVlcnkoIHRoaXMuZWxlbWVudCApO1xuICB9XG4gIC8vIG9wdGlvbnNcbiAgdGhpcy5vcHRpb25zID0geyAuLi50aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRzIH07XG4gIHRoaXMub3B0aW9uKCBvcHRpb25zICk7XG5cbiAgLy8ga2ljayB0aGluZ3Mgb2ZmXG4gIHRoaXMuX2NyZWF0ZSgpO1xufVxuXG5GbGlja2l0eS5kZWZhdWx0cyA9IHtcbiAgYWNjZXNzaWJpbGl0eTogdHJ1ZSxcbiAgLy8gYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxuICBjZWxsQWxpZ246ICdjZW50ZXInLFxuICAvLyBjZWxsU2VsZWN0b3I6IHVuZGVmaW5lZCxcbiAgLy8gY29udGFpbjogZmFsc2UsXG4gIGZyZWVTY3JvbGxGcmljdGlvbjogMC4wNzUsIC8vIGZyaWN0aW9uIHdoZW4gZnJlZS1zY3JvbGxpbmdcbiAgZnJpY3Rpb246IDAuMjgsIC8vIGZyaWN0aW9uIHdoZW4gc2VsZWN0aW5nXG4gIG5hbWVzcGFjZUpRdWVyeUV2ZW50czogdHJ1ZSxcbiAgLy8gaW5pdGlhbEluZGV4OiAwLFxuICBwZXJjZW50UG9zaXRpb246IHRydWUsXG4gIHJlc2l6ZTogdHJ1ZSxcbiAgc2VsZWN0ZWRBdHRyYWN0aW9uOiAwLjAyNSxcbiAgc2V0R2FsbGVyeVNpemU6IHRydWUsXG4gIC8vIHdhdGNoQ1NTOiBmYWxzZSxcbiAgLy8gd3JhcEFyb3VuZDogZmFsc2Vcbn07XG5cbi8vIGhhc2ggb2YgbWV0aG9kcyB0cmlnZ2VyZWQgb24gX2NyZWF0ZSgpXG5GbGlja2l0eS5jcmVhdGUgPSB7fTtcblxubGV0IHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuLy8gaW5oZXJpdCBFdmVudEVtaXR0ZXJcbk9iamVjdC5hc3NpZ24oIHByb3RvLCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbnByb3RvLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHsgcmVzaXplLCB3YXRjaENTUywgcmlnaHRUb0xlZnQgfSA9IHRoaXMub3B0aW9ucztcbiAgLy8gYWRkIGlkIGZvciBGbGlja2l0eS5kYXRhXG4gIGxldCBpZCA9IHRoaXMuZ3VpZCA9ICsrR1VJRDtcbiAgdGhpcy5lbGVtZW50LmZsaWNraXR5R1VJRCA9IGlkOyAvLyBleHBhbmRvXG4gIGluc3RhbmNlc1sgaWQgXSA9IHRoaXM7IC8vIGFzc29jaWF0ZSB2aWEgaWRcbiAgLy8gaW5pdGlhbCBwcm9wZXJ0aWVzXG4gIHRoaXMuc2VsZWN0ZWRJbmRleCA9IDA7XG4gIC8vIGhvdyBtYW55IGZyYW1lcyBzbGlkZXIgaGFzIGJlZW4gaW4gc2FtZSBwb3NpdGlvblxuICB0aGlzLnJlc3RpbmdGcmFtZXMgPSAwO1xuICAvLyBpbml0aWFsIHBoeXNpY3MgcHJvcGVydGllc1xuICB0aGlzLnggPSAwO1xuICB0aGlzLnZlbG9jaXR5ID0gMDtcbiAgdGhpcy5iZWdpbk1hcmdpbiA9IHJpZ2h0VG9MZWZ0ID8gJ21hcmdpblJpZ2h0JyA6ICdtYXJnaW5MZWZ0JztcbiAgdGhpcy5lbmRNYXJnaW4gPSByaWdodFRvTGVmdCA/ICdtYXJnaW5MZWZ0JyA6ICdtYXJnaW5SaWdodCc7XG4gIC8vIGNyZWF0ZSB2aWV3cG9ydCAmIHNsaWRlclxuICB0aGlzLnZpZXdwb3J0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRoaXMudmlld3BvcnQuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXZpZXdwb3J0JztcbiAgdGhpcy5fY3JlYXRlU2xpZGVyKCk7XG4gIC8vIHVzZWQgZm9yIGtleWJvYXJkIG5hdmlnYXRpb25cbiAgdGhpcy5mb2N1c2FibGVFbGVtcyA9IFsgdGhpcy5lbGVtZW50IF07XG5cbiAgaWYgKCByZXNpemUgfHwgd2F0Y2hDU1MgKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XG4gIH1cblxuICAvLyBhZGQgbGlzdGVuZXJzIGZyb20gb24gb3B0aW9uXG4gIGZvciAoIGxldCBldmVudE5hbWUgaW4gdGhpcy5vcHRpb25zLm9uICkge1xuICAgIGxldCBsaXN0ZW5lciA9IHRoaXMub3B0aW9ucy5vblsgZXZlbnROYW1lIF07XG4gICAgdGhpcy5vbiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICB9XG5cbiAgZm9yICggbGV0IG1ldGhvZCBpbiBGbGlja2l0eS5jcmVhdGUgKSB7XG4gICAgRmxpY2tpdHkuY3JlYXRlWyBtZXRob2QgXS5jYWxsKCB0aGlzICk7XG4gIH1cblxuICBpZiAoIHdhdGNoQ1NTICkge1xuICAgIHRoaXMud2F0Y2hDU1MoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogc2V0IG9wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBleHRlbmRcbiAqL1xucHJvdG8ub3B0aW9uID0gZnVuY3Rpb24oIG9wdHMgKSB7XG4gIE9iamVjdC5hc3NpZ24oIHRoaXMub3B0aW9ucywgb3B0cyApO1xufTtcblxucHJvdG8uYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLmlzQWN0aXZlICkgcmV0dXJuO1xuXG4gIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZmxpY2tpdHktZW5hYmxlZCcpO1xuICBpZiAoIHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCApIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZmxpY2tpdHktcnRsJyk7XG4gIH1cblxuICB0aGlzLmdldFNpemUoKTtcbiAgLy8gbW92ZSBpbml0aWFsIGNlbGwgZWxlbWVudHMgc28gdGhleSBjYW4gYmUgbG9hZGVkIGFzIGNlbGxzXG4gIGxldCBjZWxsRWxlbXMgPSB0aGlzLl9maWx0ZXJGaW5kQ2VsbEVsZW1lbnRzKCB0aGlzLmVsZW1lbnQuY2hpbGRyZW4gKTtcbiAgdGhpcy5zbGlkZXIuYXBwZW5kKCAuLi5jZWxsRWxlbXMgKTtcbiAgdGhpcy52aWV3cG9ydC5hcHBlbmQoIHRoaXMuc2xpZGVyICk7XG4gIHRoaXMuZWxlbWVudC5hcHBlbmQoIHRoaXMudmlld3BvcnQgKTtcbiAgLy8gZ2V0IGNlbGxzIGZyb20gY2hpbGRyZW5cbiAgdGhpcy5yZWxvYWRDZWxscygpO1xuXG4gIGlmICggdGhpcy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgKSB7XG4gICAgLy8gYWxsb3cgZWxlbWVudCB0byBmb2N1c2FibGVcbiAgICB0aGlzLmVsZW1lbnQudGFiSW5kZXggPSAwO1xuICAgIC8vIGxpc3RlbiBmb3Iga2V5IHByZXNzZXNcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCB0aGlzICk7XG4gIH1cblxuICB0aGlzLmVtaXRFdmVudCgnYWN0aXZhdGUnKTtcbiAgdGhpcy5zZWxlY3RJbml0aWFsSW5kZXgoKTtcbiAgLy8gZmxhZyBmb3IgaW5pdGlhbCBhY3RpdmF0aW9uLCBmb3IgdXNpbmcgaW5pdGlhbEluZGV4XG4gIHRoaXMuaXNJbml0QWN0aXZhdGVkID0gdHJ1ZTtcbiAgLy8gcmVhZHkgZXZlbnQuICM0OTNcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCdyZWFkeScpO1xufTtcblxuLy8gc2xpZGVyIHBvc2l0aW9ucyB0aGUgY2VsbHNcbnByb3RvLl9jcmVhdGVTbGlkZXIgPSBmdW5jdGlvbigpIHtcbiAgLy8gc2xpZGVyIGVsZW1lbnQgZG9lcyBhbGwgdGhlIHBvc2l0aW9uaW5nXG4gIGxldCBzbGlkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgc2xpZGVyLmNsYXNzTmFtZSA9ICdmbGlja2l0eS1zbGlkZXInO1xuICB0aGlzLnNsaWRlciA9IHNsaWRlcjtcbn07XG5cbnByb3RvLl9maWx0ZXJGaW5kQ2VsbEVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICByZXR1cm4gdXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzKCBlbGVtcywgdGhpcy5vcHRpb25zLmNlbGxTZWxlY3RvciApO1xufTtcblxuLy8gZ29lcyB0aHJvdWdoIGFsbCBjaGlsZHJlblxucHJvdG8ucmVsb2FkQ2VsbHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gY29sbGVjdGlvbiBvZiBpdGVtIGVsZW1lbnRzXG4gIHRoaXMuY2VsbHMgPSB0aGlzLl9tYWtlQ2VsbHMoIHRoaXMuc2xpZGVyLmNoaWxkcmVuICk7XG4gIHRoaXMucG9zaXRpb25DZWxscygpO1xuICB0aGlzLl91cGRhdGVXcmFwU2hpZnRDZWxscygpO1xuICB0aGlzLnNldEdhbGxlcnlTaXplKCk7XG59O1xuXG4vKipcbiAqIHR1cm4gZWxlbWVudHMgaW50byBGbGlja2l0eS5DZWxsc1xuICogQHBhcmFtIHtbQXJyYXksIE5vZGVMaXN0LCBIVE1MRWxlbWVudF19IGVsZW1zIC0gZWxlbWVudHMgdG8gbWFrZSBpbnRvIGNlbGxzXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gY29sbGVjdGlvbiBvZiBuZXcgRmxpY2tpdHkgQ2VsbHNcbiAqL1xucHJvdG8uX21ha2VDZWxscyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgbGV0IGNlbGxFbGVtcyA9IHRoaXMuX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMoIGVsZW1zICk7XG5cbiAgLy8gY3JlYXRlIG5ldyBDZWxscyBmb3IgY29sbGVjdGlvblxuICByZXR1cm4gY2VsbEVsZW1zLm1hcCggKCBjZWxsRWxlbSApID0+IG5ldyBDZWxsKCBjZWxsRWxlbSApICk7XG59O1xuXG5wcm90by5nZXRMYXN0Q2VsbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jZWxsc1sgdGhpcy5jZWxscy5sZW5ndGggLSAxIF07XG59O1xuXG5wcm90by5nZXRMYXN0U2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2xpZGVzWyB0aGlzLnNsaWRlcy5sZW5ndGggLSAxIF07XG59O1xuXG4vLyBwb3NpdGlvbnMgYWxsIGNlbGxzXG5wcm90by5wb3NpdGlvbkNlbGxzID0gZnVuY3Rpb24oKSB7XG4gIC8vIHNpemUgYWxsIGNlbGxzXG4gIHRoaXMuX3NpemVDZWxscyggdGhpcy5jZWxscyApO1xuICAvLyBwb3NpdGlvbiBhbGwgY2VsbHNcbiAgdGhpcy5fcG9zaXRpb25DZWxscyggMCApO1xufTtcblxuLyoqXG4gKiBwb3NpdGlvbiBjZXJ0YWluIGNlbGxzXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gd2hpY2ggY2VsbCB0byBzdGFydCB3aXRoXG4gKi9cbnByb3RvLl9wb3NpdGlvbkNlbGxzID0gZnVuY3Rpb24oIGluZGV4ICkge1xuICBpbmRleCA9IGluZGV4IHx8IDA7XG4gIC8vIGFsc28gbWVhc3VyZSBtYXhDZWxsSGVpZ2h0XG4gIC8vIHN0YXJ0IDAgaWYgcG9zaXRpb25pbmcgYWxsIGNlbGxzXG4gIHRoaXMubWF4Q2VsbEhlaWdodCA9IGluZGV4ID8gdGhpcy5tYXhDZWxsSGVpZ2h0IHx8IDAgOiAwO1xuICBsZXQgY2VsbFggPSAwO1xuICAvLyBnZXQgY2VsbFhcbiAgaWYgKCBpbmRleCA+IDAgKSB7XG4gICAgbGV0IHN0YXJ0Q2VsbCA9IHRoaXMuY2VsbHNbIGluZGV4IC0gMSBdO1xuICAgIGNlbGxYID0gc3RhcnRDZWxsLnggKyBzdGFydENlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICB9XG5cbiAgdGhpcy5jZWxscy5zbGljZSggaW5kZXggKS5mb3JFYWNoKCAoIGNlbGwgKSA9PiB7XG4gICAgY2VsbC54ID0gY2VsbFg7XG4gICAgdGhpcy5fcmVuZGVyQ2VsbFBvc2l0aW9uKCBjZWxsLCBjZWxsWCApO1xuICAgIGNlbGxYICs9IGNlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICAgIHRoaXMubWF4Q2VsbEhlaWdodCA9IE1hdGgubWF4KCBjZWxsLnNpemUub3V0ZXJIZWlnaHQsIHRoaXMubWF4Q2VsbEhlaWdodCApO1xuICB9ICk7XG4gIC8vIGtlZXAgdHJhY2sgb2YgY2VsbFggZm9yIHdyYXAtYXJvdW5kXG4gIHRoaXMuc2xpZGVhYmxlV2lkdGggPSBjZWxsWDtcbiAgLy8gc2xpZGVzXG4gIHRoaXMudXBkYXRlU2xpZGVzKCk7XG4gIC8vIGNvbnRhaW4gc2xpZGVzIHRhcmdldFxuICB0aGlzLl9jb250YWluU2xpZGVzKCk7XG4gIC8vIHVwZGF0ZSBzbGlkZXNXaWR0aFxuICB0aGlzLnNsaWRlc1dpZHRoID0gdGhpcy5jZWxscy5sZW5ndGggP1xuICAgIHRoaXMuZ2V0TGFzdFNsaWRlKCkudGFyZ2V0IC0gdGhpcy5zbGlkZXNbMF0udGFyZ2V0IDogMDtcbn07XG5cbnByb3RvLl9yZW5kZXJDZWxsUG9zaXRpb24gPSBmdW5jdGlvbiggY2VsbCwgeCApIHtcbiAgLy8gcmVuZGVyIHBvc2l0aW9uIG9mIGNlbGwgd2l0aCBpbiBzbGlkZXJcbiAgbGV0IHNpZGVPZmZzZXQgPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAtMSA6IDE7XG4gIGxldCByZW5kZXJYID0geCAqIHNpZGVPZmZzZXQ7XG4gIGlmICggdGhpcy5vcHRpb25zLnBlcmNlbnRQb3NpdGlvbiApIHJlbmRlclggKj0gdGhpcy5zaXplLmlubmVyV2lkdGggLyBjZWxsLnNpemUud2lkdGg7XG4gIGxldCBwb3NpdGlvblZhbHVlID0gdGhpcy5nZXRQb3NpdGlvblZhbHVlKCByZW5kZXJYICk7XG4gIGNlbGwuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCggJHtwb3NpdGlvblZhbHVlfSApYDtcbn07XG5cbi8qKlxuICogY2VsbC5nZXRTaXplKCkgb24gbXVsdGlwbGUgY2VsbHNcbiAqIEBwYXJhbSB7QXJyYXl9IGNlbGxzIC0gY2VsbHMgdG8gc2l6ZVxuICovXG5wcm90by5fc2l6ZUNlbGxzID0gZnVuY3Rpb24oIGNlbGxzICkge1xuICBjZWxscy5mb3JFYWNoKCAoIGNlbGwgKSA9PiBjZWxsLmdldFNpemUoKSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnByb3RvLnVwZGF0ZVNsaWRlcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNsaWRlcyA9IFtdO1xuICBpZiAoICF0aGlzLmNlbGxzLmxlbmd0aCApIHJldHVybjtcblxuICBsZXQgeyBiZWdpbk1hcmdpbiwgZW5kTWFyZ2luIH0gPSB0aGlzO1xuICBsZXQgc2xpZGUgPSBuZXcgU2xpZGUoIGJlZ2luTWFyZ2luLCBlbmRNYXJnaW4sIHRoaXMuY2VsbEFsaWduICk7XG4gIHRoaXMuc2xpZGVzLnB1c2goIHNsaWRlICk7XG5cbiAgbGV0IGNhbkNlbGxGaXQgPSB0aGlzLl9nZXRDYW5DZWxsRml0KCk7XG5cbiAgdGhpcy5jZWxscy5mb3JFYWNoKCAoIGNlbGwsIGkgKSA9PiB7XG4gICAgLy8ganVzdCBhZGQgY2VsbCBpZiBmaXJzdCBjZWxsIGluIHNsaWRlXG4gICAgaWYgKCAhc2xpZGUuY2VsbHMubGVuZ3RoICkge1xuICAgICAgc2xpZGUuYWRkQ2VsbCggY2VsbCApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBzbGlkZVdpZHRoID0gKCBzbGlkZS5vdXRlcldpZHRoIC0gc2xpZGUuZmlyc3RNYXJnaW4gKSArXG4gICAgICAoIGNlbGwuc2l6ZS5vdXRlcldpZHRoIC0gY2VsbC5zaXplWyBlbmRNYXJnaW4gXSApO1xuXG4gICAgaWYgKCBjYW5DZWxsRml0KCBpLCBzbGlkZVdpZHRoICkgKSB7XG4gICAgICBzbGlkZS5hZGRDZWxsKCBjZWxsICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGRvZXNuJ3QgZml0LCBuZXcgc2xpZGVcbiAgICAgIHNsaWRlLnVwZGF0ZVRhcmdldCgpO1xuXG4gICAgICBzbGlkZSA9IG5ldyBTbGlkZSggYmVnaW5NYXJnaW4sIGVuZE1hcmdpbiwgdGhpcy5jZWxsQWxpZ24gKTtcbiAgICAgIHRoaXMuc2xpZGVzLnB1c2goIHNsaWRlICk7XG4gICAgICBzbGlkZS5hZGRDZWxsKCBjZWxsICk7XG4gICAgfVxuICB9ICk7XG4gIC8vIGxhc3Qgc2xpZGVcbiAgc2xpZGUudXBkYXRlVGFyZ2V0KCk7XG4gIC8vIHVwZGF0ZSAuc2VsZWN0ZWRTbGlkZVxuICB0aGlzLnVwZGF0ZVNlbGVjdGVkU2xpZGUoKTtcbn07XG5cbnByb3RvLl9nZXRDYW5DZWxsRml0ID0gZnVuY3Rpb24oKSB7XG4gIGxldCB7IGdyb3VwQ2VsbHMgfSA9IHRoaXMub3B0aW9ucztcbiAgaWYgKCAhZ3JvdXBDZWxscyApIHJldHVybiAoKSA9PiBmYWxzZTtcblxuICBpZiAoIHR5cGVvZiBncm91cENlbGxzID09ICdudW1iZXInICkge1xuICAgIC8vIGdyb3VwIGJ5IG51bWJlci4gMyAtPiBbMCwxLDJdLCBbMyw0LDVdLCAuLi5cbiAgICBsZXQgbnVtYmVyID0gcGFyc2VJbnQoIGdyb3VwQ2VsbHMsIDEwICk7XG4gICAgcmV0dXJuICggaSApID0+ICggaSAlIG51bWJlciApICE9PSAwO1xuICB9XG4gIC8vIGRlZmF1bHQsIGdyb3VwIGJ5IHdpZHRoIG9mIHNsaWRlXG4gIGxldCBwZXJjZW50ID0gMTtcbiAgLy8gcGFyc2UgJzc1JVxuICBsZXQgcGVyY2VudE1hdGNoID0gdHlwZW9mIGdyb3VwQ2VsbHMgPT0gJ3N0cmluZycgJiYgZ3JvdXBDZWxscy5tYXRjaCggL14oXFxkKyklJC8gKTtcbiAgaWYgKCBwZXJjZW50TWF0Y2ggKSBwZXJjZW50ID0gcGFyc2VJbnQoIHBlcmNlbnRNYXRjaFsxXSwgMTAgKSAvIDEwMDtcbiAgbGV0IGdyb3VwV2lkdGggPSAoIHRoaXMuc2l6ZS5pbm5lcldpZHRoICsgMSApICogcGVyY2VudDtcbiAgcmV0dXJuICggaSwgc2xpZGVXaWR0aCApID0+IHNsaWRlV2lkdGggPD0gZ3JvdXBXaWR0aDtcbn07XG5cbi8vIGFsaWFzIF9pbml0IGZvciBqUXVlcnkgcGx1Z2luIC5mbGlja2l0eSgpXG5wcm90by5faW5pdCA9XG5wcm90by5yZXBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucG9zaXRpb25DZWxscygpO1xuICB0aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpO1xufTtcblxucHJvdG8uZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcbiAgdGhpcy5zZXRDZWxsQWxpZ24oKTtcbiAgdGhpcy5jdXJzb3JQb3NpdGlvbiA9IHRoaXMuc2l6ZS5pbm5lcldpZHRoICogdGhpcy5jZWxsQWxpZ247XG59O1xuXG5sZXQgY2VsbEFsaWduU2hvcnRoYW5kcyA9IHtcbiAgbGVmdDogMCxcbiAgY2VudGVyOiAwLjUsXG4gIHJpZ2h0OiAxLFxufTtcblxucHJvdG8uc2V0Q2VsbEFsaWduID0gZnVuY3Rpb24oKSB7XG4gIGxldCB7IGNlbGxBbGlnbiwgcmlnaHRUb0xlZnQgfSA9IHRoaXMub3B0aW9ucztcbiAgbGV0IHNob3J0aGFuZCA9IGNlbGxBbGlnblNob3J0aGFuZHNbIGNlbGxBbGlnbiBdO1xuICB0aGlzLmNlbGxBbGlnbiA9IHNob3J0aGFuZCAhPT0gdW5kZWZpbmVkID8gc2hvcnRoYW5kIDogY2VsbEFsaWduO1xuICBpZiAoIHJpZ2h0VG9MZWZ0ICkgdGhpcy5jZWxsQWxpZ24gPSAxIC0gdGhpcy5jZWxsQWxpZ247XG59O1xuXG5wcm90by5zZXRHYWxsZXJ5U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm9wdGlvbnMuc2V0R2FsbGVyeVNpemUgKSByZXR1cm47XG5cbiAgbGV0IGhlaWdodCA9IHRoaXMub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCAmJiB0aGlzLnNlbGVjdGVkU2xpZGUgP1xuICAgIHRoaXMuc2VsZWN0ZWRTbGlkZS5oZWlnaHQgOiB0aGlzLm1heENlbGxIZWlnaHQ7XG4gIHRoaXMudmlld3BvcnQuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YDtcbn07XG5cbnByb3RvLl91cGRhdGVXcmFwU2hpZnRDZWxscyA9IGZ1bmN0aW9uKCkge1xuICAvLyB1cGRhdGUgaXNXcmFwcGluZ1xuICB0aGlzLmlzV3JhcHBpbmcgPSB0aGlzLmdldElzV3JhcHBpbmcoKTtcbiAgLy8gb25seSBmb3Igd3JhcC1hcm91bmRcbiAgaWYgKCAhdGhpcy5pc1dyYXBwaW5nICkgcmV0dXJuO1xuXG4gIC8vIHVuc2hpZnQgcHJldmlvdXMgY2VsbHNcbiAgdGhpcy5fdW5zaGlmdENlbGxzKCB0aGlzLmJlZm9yZVNoaWZ0Q2VsbHMgKTtcbiAgdGhpcy5fdW5zaGlmdENlbGxzKCB0aGlzLmFmdGVyU2hpZnRDZWxscyApO1xuICAvLyBnZXQgYmVmb3JlIGNlbGxzXG4gIC8vIGluaXRpYWwgZ2FwXG4gIGxldCBiZWZvcmVHYXBYID0gdGhpcy5jdXJzb3JQb3NpdGlvbjtcbiAgbGV0IGxhc3RJbmRleCA9IHRoaXMuY2VsbHMubGVuZ3RoIC0gMTtcbiAgdGhpcy5iZWZvcmVTaGlmdENlbGxzID0gdGhpcy5fZ2V0R2FwQ2VsbHMoIGJlZm9yZUdhcFgsIGxhc3RJbmRleCwgLTEgKTtcbiAgLy8gZ2V0IGFmdGVyIGNlbGxzXG4gIC8vIGVuZGluZyBnYXAgYmV0d2VlbiBsYXN0IGNlbGwgYW5kIGVuZCBvZiBnYWxsZXJ5IHZpZXdwb3J0XG4gIGxldCBhZnRlckdhcFggPSB0aGlzLnNpemUuaW5uZXJXaWR0aCAtIHRoaXMuY3Vyc29yUG9zaXRpb247XG4gIC8vIHN0YXJ0IGNsb25pbmcgYXQgZmlyc3QgY2VsbCwgd29ya2luZyBmb3J3YXJkc1xuICB0aGlzLmFmdGVyU2hpZnRDZWxscyA9IHRoaXMuX2dldEdhcENlbGxzKCBhZnRlckdhcFgsIDAsIDEgKTtcbn07XG5cbnByb3RvLmdldElzV3JhcHBpbmcgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHsgd3JhcEFyb3VuZCB9ID0gdGhpcy5vcHRpb25zO1xuICBpZiAoICF3cmFwQXJvdW5kIHx8IHRoaXMuc2xpZGVzLmxlbmd0aCA8IDIgKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKCB3cmFwQXJvdW5kICE9PSAnZmlsbCcgKSByZXR1cm4gdHJ1ZTtcbiAgLy8gY2hlY2sgdGhhdCBzbGlkZXMgY2FuIGZpdFxuXG4gIGxldCBnYXBXaWR0aCA9IHRoaXMuc2xpZGVhYmxlV2lkdGggLSB0aGlzLnNpemUuaW5uZXJXaWR0aDtcbiAgaWYgKCBnYXBXaWR0aCA+IHRoaXMuc2l6ZS5pbm5lcldpZHRoICkgcmV0dXJuIHRydWU7IC8vIGdhcCAqIDJ4IGJpZywgYWxsIGdvb2RcbiAgLy8gY2hlY2sgdGhhdCBjb250ZW50IHdpZHRoIC0gc2hpZnRpbmcgY2VsbCBpcyBiaWdnZXIgdGhhbiB2aWV3cG9ydCB3aWR0aFxuICBmb3IgKCBsZXQgY2VsbCBvZiB0aGlzLmNlbGxzICkge1xuICAgIGlmICggY2VsbC5zaXplLm91dGVyV2lkdGggPiBnYXBXaWR0aCApIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnByb3RvLl9nZXRHYXBDZWxscyA9IGZ1bmN0aW9uKCBnYXBYLCBjZWxsSW5kZXgsIGluY3JlbWVudCApIHtcbiAgLy8ga2VlcCBhZGRpbmcgY2VsbHMgdW50aWwgdGhlIGNvdmVyIHRoZSBpbml0aWFsIGdhcFxuICBsZXQgY2VsbHMgPSBbXTtcbiAgd2hpbGUgKCBnYXBYID4gMCApIHtcbiAgICBsZXQgY2VsbCA9IHRoaXMuY2VsbHNbIGNlbGxJbmRleCBdO1xuICAgIGlmICggIWNlbGwgKSBicmVhaztcblxuICAgIGNlbGxzLnB1c2goIGNlbGwgKTtcbiAgICBjZWxsSW5kZXggKz0gaW5jcmVtZW50O1xuICAgIGdhcFggLT0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIH1cbiAgcmV0dXJuIGNlbGxzO1xufTtcblxuLy8gLS0tLS0gY29udGFpbiAmIHdyYXAgLS0tLS0gLy9cblxuLy8gY29udGFpbiBjZWxsIHRhcmdldHMgc28gbm8gZXhjZXNzIHNsaWRpbmdcbnByb3RvLl9jb250YWluU2xpZGVzID0gZnVuY3Rpb24oKSB7XG4gIGxldCBpc0NvbnRhaW5pbmcgPSB0aGlzLm9wdGlvbnMuY29udGFpbiAmJiAhdGhpcy5pc1dyYXBwaW5nICYmXG4gICAgICB0aGlzLmNlbGxzLmxlbmd0aDtcbiAgaWYgKCAhaXNDb250YWluaW5nICkgcmV0dXJuO1xuXG4gIGxldCBjb250ZW50V2lkdGggPSB0aGlzLnNsaWRlYWJsZVdpZHRoIC0gdGhpcy5nZXRMYXN0Q2VsbCgpLnNpemVbIHRoaXMuZW5kTWFyZ2luIF07XG4gIC8vIGNvbnRlbnQgaXMgbGVzcyB0aGFuIGdhbGxlcnkgc2l6ZVxuICBsZXQgaXNDb250ZW50U21hbGxlciA9IGNvbnRlbnRXaWR0aCA8IHRoaXMuc2l6ZS5pbm5lcldpZHRoO1xuICBpZiAoIGlzQ29udGVudFNtYWxsZXIgKSB7XG4gICAgLy8gYWxsIGNlbGxzIGZpdCBpbnNpZGUgZ2FsbGVyeVxuICAgIHRoaXMuc2xpZGVzLmZvckVhY2goICggc2xpZGUgKSA9PiB7XG4gICAgICBzbGlkZS50YXJnZXQgPSBjb250ZW50V2lkdGggKiB0aGlzLmNlbGxBbGlnbjtcbiAgICB9ICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gY29udGFpbiB0byBib3VuZHNcbiAgICBsZXQgYmVnaW5Cb3VuZCA9IHRoaXMuY3Vyc29yUG9zaXRpb24gKyB0aGlzLmNlbGxzWzBdLnNpemVbIHRoaXMuYmVnaW5NYXJnaW4gXTtcbiAgICBsZXQgZW5kQm91bmQgPSBjb250ZW50V2lkdGggLSB0aGlzLnNpemUuaW5uZXJXaWR0aCAqICggMSAtIHRoaXMuY2VsbEFsaWduICk7XG4gICAgdGhpcy5zbGlkZXMuZm9yRWFjaCggKCBzbGlkZSApID0+IHtcbiAgICAgIHNsaWRlLnRhcmdldCA9IE1hdGgubWF4KCBzbGlkZS50YXJnZXQsIGJlZ2luQm91bmQgKTtcbiAgICAgIHNsaWRlLnRhcmdldCA9IE1hdGgubWluKCBzbGlkZS50YXJnZXQsIGVuZEJvdW5kICk7XG4gICAgfSApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBldmVudHMgLS0tLS0gLy9cblxuLyoqXG4gKiBlbWl0cyBldmVudHMgdmlhIGV2ZW50RW1pdHRlciBhbmQgalF1ZXJ5IGV2ZW50c1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSBuYW1lIG9mIGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIG9yaWdpbmFsIGV2ZW50XG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIC0gZXh0cmEgYXJndW1lbnRzXG4gKi9cbnByb3RvLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiggdHlwZSwgZXZlbnQsIGFyZ3MgKSB7XG4gIGxldCBlbWl0QXJncyA9IGV2ZW50ID8gWyBldmVudCBdLmNvbmNhdCggYXJncyApIDogYXJncztcbiAgdGhpcy5lbWl0RXZlbnQoIHR5cGUsIGVtaXRBcmdzICk7XG5cbiAgaWYgKCBqUXVlcnkgJiYgdGhpcy4kZWxlbWVudCApIHtcbiAgICAvLyBkZWZhdWx0IHRyaWdnZXIgd2l0aCB0eXBlIGlmIG5vIGV2ZW50XG4gICAgdHlwZSArPSB0aGlzLm9wdGlvbnMubmFtZXNwYWNlSlF1ZXJ5RXZlbnRzID8gJy5mbGlja2l0eScgOiAnJztcbiAgICBsZXQgJGV2ZW50ID0gdHlwZTtcbiAgICBpZiAoIGV2ZW50ICkge1xuICAgICAgLy8gY3JlYXRlIGpRdWVyeSBldmVudFxuICAgICAgbGV0IGpRRXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBldmVudCApO1xuICAgICAgalFFdmVudC50eXBlID0gdHlwZTtcbiAgICAgICRldmVudCA9IGpRRXZlbnQ7XG4gICAgfVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlciggJGV2ZW50LCBhcmdzICk7XG4gIH1cbn07XG5cbmNvbnN0IHVuaWRyYWdnZXJFdmVudHMgPSBbXG4gICdkcmFnU3RhcnQnLFxuICAnZHJhZ01vdmUnLFxuICAnZHJhZ0VuZCcsXG4gICdwb2ludGVyRG93bicsXG4gICdwb2ludGVyTW92ZScsXG4gICdwb2ludGVyRW5kJyxcbiAgJ3N0YXRpY0NsaWNrJyxcbl07XG5cbmxldCBfZW1pdEV2ZW50ID0gcHJvdG8uZW1pdEV2ZW50O1xucHJvdG8uZW1pdEV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgYXJncyApIHtcbiAgaWYgKCBldmVudE5hbWUgPT09ICdzdGF0aWNDbGljaycgKSB7XG4gICAgLy8gYWRkIGNlbGxFbGVtIGFuZCBjZWxsSW5kZXggYXJncyB0byBzdGF0aWNDbGlja1xuICAgIGxldCBjbGlja2VkQ2VsbCA9IHRoaXMuZ2V0UGFyZW50Q2VsbCggYXJnc1swXS50YXJnZXQgKTtcbiAgICBsZXQgY2VsbEVsZW0gPSBjbGlja2VkQ2VsbCAmJiBjbGlja2VkQ2VsbC5lbGVtZW50O1xuICAgIGxldCBjZWxsSW5kZXggPSBjbGlja2VkQ2VsbCAmJiB0aGlzLmNlbGxzLmluZGV4T2YoIGNsaWNrZWRDZWxsICk7XG4gICAgYXJncyA9IGFyZ3MuY29uY2F0KCBjZWxsRWxlbSwgY2VsbEluZGV4ICk7XG4gIH1cbiAgLy8gZG8gcmVndWxhciB0aGluZ1xuICBfZW1pdEV2ZW50LmNhbGwoIHRoaXMsIGV2ZW50TmFtZSwgYXJncyApO1xuICAvLyBkdWNrLXB1bmNoIGluIGpRdWVyeSBldmVudHMgZm9yIFVuaWRyYWdnZXIgZXZlbnRzXG4gIGxldCBpc1VuaWRyYWdnZXJFdmVudCA9IHVuaWRyYWdnZXJFdmVudHMuaW5jbHVkZXMoIGV2ZW50TmFtZSApO1xuICBpZiAoICFpc1VuaWRyYWdnZXJFdmVudCB8fCAhalF1ZXJ5IHx8ICF0aGlzLiRlbGVtZW50ICkgcmV0dXJuO1xuXG4gIGV2ZW50TmFtZSArPSB0aGlzLm9wdGlvbnMubmFtZXNwYWNlSlF1ZXJ5RXZlbnRzID8gJy5mbGlja2l0eScgOiAnJztcbiAgbGV0IGV2ZW50ID0gYXJncy5zaGlmdCggMCApO1xuICBsZXQgalFFdmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIGV2ZW50ICk7XG4gIGpRRXZlbnQudHlwZSA9IGV2ZW50TmFtZTtcbiAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCBqUUV2ZW50LCBhcmdzICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBzZWxlY3QgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gaW5kZXggb2YgdGhlIHNsaWRlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzV3JhcCAtIHdpbGwgd3JhcC1hcm91bmQgdG8gbGFzdC9maXJzdCBpZiBhdCB0aGUgZW5kXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzSW5zdGFudCAtIHdpbGwgaW1tZWRpYXRlbHkgc2V0IHBvc2l0aW9uIGF0IHNlbGVjdGVkIGNlbGxcbiAqL1xucHJvdG8uc2VsZWN0ID0gZnVuY3Rpb24oIGluZGV4LCBpc1dyYXAsIGlzSW5zdGFudCApIHtcbiAgaWYgKCAhdGhpcy5pc0FjdGl2ZSApIHJldHVybjtcblxuICBpbmRleCA9IHBhcnNlSW50KCBpbmRleCwgMTAgKTtcbiAgdGhpcy5fd3JhcFNlbGVjdCggaW5kZXggKTtcblxuICBpZiAoIHRoaXMuaXNXcmFwcGluZyB8fCBpc1dyYXAgKSB7XG4gICAgaW5kZXggPSB1dGlscy5tb2R1bG8oIGluZGV4LCB0aGlzLnNsaWRlcy5sZW5ndGggKTtcbiAgfVxuICAvLyBiYWlsIGlmIGludmFsaWQgaW5kZXhcbiAgaWYgKCAhdGhpcy5zbGlkZXNbIGluZGV4IF0gKSByZXR1cm47XG5cbiAgbGV0IHByZXZJbmRleCA9IHRoaXMuc2VsZWN0ZWRJbmRleDtcbiAgdGhpcy5zZWxlY3RlZEluZGV4ID0gaW5kZXg7XG4gIHRoaXMudXBkYXRlU2VsZWN0ZWRTbGlkZSgpO1xuICBpZiAoIGlzSW5zdGFudCApIHtcbiAgICB0aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3RhcnRBbmltYXRpb24oKTtcbiAgfVxuICBpZiAoIHRoaXMub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCApIHtcbiAgICB0aGlzLnNldEdhbGxlcnlTaXplKCk7XG4gIH1cbiAgLy8gZXZlbnRzXG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ3NlbGVjdCcsIG51bGwsIFsgaW5kZXggXSApO1xuICAvLyBjaGFuZ2UgZXZlbnQgaWYgbmV3IGluZGV4XG4gIGlmICggaW5kZXggIT09IHByZXZJbmRleCApIHtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoICdjaGFuZ2UnLCBudWxsLCBbIGluZGV4IF0gKTtcbiAgfVxufTtcblxuLy8gd3JhcHMgcG9zaXRpb24gZm9yIHdyYXBBcm91bmQsIHRvIG1vdmUgdG8gY2xvc2VzdCBzbGlkZS4gIzExM1xucHJvdG8uX3dyYXBTZWxlY3QgPSBmdW5jdGlvbiggaW5kZXggKSB7XG4gIGlmICggIXRoaXMuaXNXcmFwcGluZyApIHJldHVybjtcblxuICBjb25zdCB7IHNlbGVjdGVkSW5kZXgsIHNsaWRlYWJsZVdpZHRoLCBzbGlkZXM6IHsgbGVuZ3RoIH0gfSA9IHRoaXM7XG4gIC8vIHNoaWZ0IGluZGV4IGZvciB3cmFwLCBkbyBub3Qgd3JhcCBkcmFnU2VsZWN0XG4gIGlmICggIXRoaXMuaXNEcmFnU2VsZWN0ICkge1xuICAgIGxldCB3cmFwSW5kZXggPSB1dGlscy5tb2R1bG8oIGluZGV4LCBsZW5ndGggKTtcbiAgICAvLyBnbyB0byBzaG9ydGVzdFxuICAgIGxldCBkZWx0YSA9IE1hdGguYWJzKCB3cmFwSW5kZXggLSBzZWxlY3RlZEluZGV4ICk7XG4gICAgbGV0IGJhY2tXcmFwRGVsdGEgPSBNYXRoLmFicyggKCB3cmFwSW5kZXggKyBsZW5ndGggKSAtIHNlbGVjdGVkSW5kZXggKTtcbiAgICBsZXQgZm9yZXdhcmRXcmFwRGVsdGEgPSBNYXRoLmFicyggKCB3cmFwSW5kZXggLSBsZW5ndGggKSAtIHNlbGVjdGVkSW5kZXggKTtcbiAgICBpZiAoIGJhY2tXcmFwRGVsdGEgPCBkZWx0YSApIHtcbiAgICAgIGluZGV4ICs9IGxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKCBmb3Jld2FyZFdyYXBEZWx0YSA8IGRlbHRhICkge1xuICAgICAgaW5kZXggLT0gbGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIC8vIHdyYXAgcG9zaXRpb24gc28gc2xpZGVyIGlzIHdpdGhpbiBub3JtYWwgYXJlYVxuICBpZiAoIGluZGV4IDwgMCApIHtcbiAgICB0aGlzLnggLT0gc2xpZGVhYmxlV2lkdGg7XG4gIH0gZWxzZSBpZiAoIGluZGV4ID49IGxlbmd0aCApIHtcbiAgICB0aGlzLnggKz0gc2xpZGVhYmxlV2lkdGg7XG4gIH1cbn07XG5cbnByb3RvLnByZXZpb3VzID0gZnVuY3Rpb24oIGlzV3JhcCwgaXNJbnN0YW50ICkge1xuICB0aGlzLnNlbGVjdCggdGhpcy5zZWxlY3RlZEluZGV4IC0gMSwgaXNXcmFwLCBpc0luc3RhbnQgKTtcbn07XG5cbnByb3RvLm5leHQgPSBmdW5jdGlvbiggaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIHRoaXMuc2VsZWN0KCB0aGlzLnNlbGVjdGVkSW5kZXggKyAxLCBpc1dyYXAsIGlzSW5zdGFudCApO1xufTtcblxucHJvdG8udXBkYXRlU2VsZWN0ZWRTbGlkZSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgc2xpZGUgPSB0aGlzLnNsaWRlc1sgdGhpcy5zZWxlY3RlZEluZGV4IF07XG4gIC8vIHNlbGVjdGVkSW5kZXggY291bGQgYmUgb3V0c2lkZSBvZiBzbGlkZXMsIGlmIHRyaWdnZXJlZCBiZWZvcmUgcmVzaXplKClcbiAgaWYgKCAhc2xpZGUgKSByZXR1cm47XG5cbiAgLy8gdW5zZWxlY3QgcHJldmlvdXMgc2VsZWN0ZWQgc2xpZGVcbiAgdGhpcy51bnNlbGVjdFNlbGVjdGVkU2xpZGUoKTtcbiAgLy8gdXBkYXRlIG5ldyBzZWxlY3RlZCBzbGlkZVxuICB0aGlzLnNlbGVjdGVkU2xpZGUgPSBzbGlkZTtcbiAgc2xpZGUuc2VsZWN0KCk7XG4gIHRoaXMuc2VsZWN0ZWRDZWxscyA9IHNsaWRlLmNlbGxzO1xuICB0aGlzLnNlbGVjdGVkRWxlbWVudHMgPSBzbGlkZS5nZXRDZWxsRWxlbWVudHMoKTtcbiAgLy8gSEFDSzogc2VsZWN0ZWRDZWxsICYgc2VsZWN0ZWRFbGVtZW50IGlzIGZpcnN0IGNlbGwgaW4gc2xpZGUsIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gIHRoaXMuc2VsZWN0ZWRDZWxsID0gc2xpZGUuY2VsbHNbMF07XG4gIHRoaXMuc2VsZWN0ZWRFbGVtZW50ID0gdGhpcy5zZWxlY3RlZEVsZW1lbnRzWzBdO1xufTtcblxucHJvdG8udW5zZWxlY3RTZWxlY3RlZFNsaWRlID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5zZWxlY3RlZFNsaWRlICkgdGhpcy5zZWxlY3RlZFNsaWRlLnVuc2VsZWN0KCk7XG59O1xuXG5wcm90by5zZWxlY3RJbml0aWFsSW5kZXggPSBmdW5jdGlvbigpIHtcbiAgbGV0IGluaXRpYWxJbmRleCA9IHRoaXMub3B0aW9ucy5pbml0aWFsSW5kZXg7XG4gIC8vIGFscmVhZHkgYWN0aXZhdGVkLCBzZWxlY3QgcHJldmlvdXMgc2VsZWN0ZWRJbmRleFxuICBpZiAoIHRoaXMuaXNJbml0QWN0aXZhdGVkICkge1xuICAgIHRoaXMuc2VsZWN0KCB0aGlzLnNlbGVjdGVkSW5kZXgsIGZhbHNlLCB0cnVlICk7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHNlbGVjdCB3aXRoIHNlbGVjdG9yIHN0cmluZ1xuICBpZiAoIGluaXRpYWxJbmRleCAmJiB0eXBlb2YgaW5pdGlhbEluZGV4ID09ICdzdHJpbmcnICkge1xuICAgIGxldCBjZWxsID0gdGhpcy5xdWVyeUNlbGwoIGluaXRpYWxJbmRleCApO1xuICAgIGlmICggY2VsbCApIHtcbiAgICAgIHRoaXMuc2VsZWN0Q2VsbCggaW5pdGlhbEluZGV4LCBmYWxzZSwgdHJ1ZSApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGxldCBpbmRleCA9IDA7XG4gIC8vIHNlbGVjdCB3aXRoIG51bWJlclxuICBpZiAoIGluaXRpYWxJbmRleCAmJiB0aGlzLnNsaWRlc1sgaW5pdGlhbEluZGV4IF0gKSB7XG4gICAgaW5kZXggPSBpbml0aWFsSW5kZXg7XG4gIH1cbiAgLy8gc2VsZWN0IGluc3RhbnRseVxuICB0aGlzLnNlbGVjdCggaW5kZXgsIGZhbHNlLCB0cnVlICk7XG59O1xuXG4vKipcbiAqIHNlbGVjdCBzbGlkZSBmcm9tIG51bWJlciBvciBjZWxsIGVsZW1lbnRcbiAqIEBwYXJhbSB7W0VsZW1lbnQsIE51bWJlcl19IHZhbHVlIC0gemVyby1iYXNlZCBpbmRleCBvciBlbGVtZW50IHRvIHNlbGVjdFxuICogQHBhcmFtIHtCb29sZWFufSBpc1dyYXAgLSBlbmFibGVzIHdyYXBwaW5nIGFyb3VuZCBmb3IgZXh0cmEgaW5kZXhcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbnN0YW50IC0gZGlzYWJsZXMgc2xpZGUgYW5pbWF0aW9uXG4gKi9cbnByb3RvLnNlbGVjdENlbGwgPSBmdW5jdGlvbiggdmFsdWUsIGlzV3JhcCwgaXNJbnN0YW50ICkge1xuICAvLyBnZXQgY2VsbFxuICBsZXQgY2VsbCA9IHRoaXMucXVlcnlDZWxsKCB2YWx1ZSApO1xuICBpZiAoICFjZWxsICkgcmV0dXJuO1xuXG4gIGxldCBpbmRleCA9IHRoaXMuZ2V0Q2VsbFNsaWRlSW5kZXgoIGNlbGwgKTtcbiAgdGhpcy5zZWxlY3QoIGluZGV4LCBpc1dyYXAsIGlzSW5zdGFudCApO1xufTtcblxucHJvdG8uZ2V0Q2VsbFNsaWRlSW5kZXggPSBmdW5jdGlvbiggY2VsbCApIHtcbiAgLy8gZ2V0IGluZGV4IG9mIHNsaWRlIHRoYXQgaGFzIGNlbGxcbiAgbGV0IGNlbGxTbGlkZSA9IHRoaXMuc2xpZGVzLmZpbmQoICggc2xpZGUgKSA9PiBzbGlkZS5jZWxscy5pbmNsdWRlcyggY2VsbCApICk7XG4gIHJldHVybiB0aGlzLnNsaWRlcy5pbmRleE9mKCBjZWxsU2xpZGUgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldCBjZWxscyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGdldCBGbGlja2l0eS5DZWxsLCBnaXZlbiBhbiBFbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW0gLSBtYXRjaGluZyBjZWxsIGVsZW1lbnRcbiAqIEByZXR1cm5zIHtGbGlja2l0eS5DZWxsfSBjZWxsIC0gbWF0Y2hpbmcgY2VsbFxuICovXG5wcm90by5nZXRDZWxsID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIC8vIGxvb3AgdGhyb3VnaCBjZWxscyB0byBnZXQgdGhlIG9uZSB0aGF0IG1hdGNoZXNcbiAgZm9yICggbGV0IGNlbGwgb2YgdGhpcy5jZWxscyApIHtcbiAgICBpZiAoIGNlbGwuZWxlbWVudCA9PT0gZWxlbSApIHJldHVybiBjZWxsO1xuICB9XG59O1xuXG4vKipcbiAqIGdldCBjb2xsZWN0aW9uIG9mIEZsaWNraXR5LkNlbGxzLCBnaXZlbiBFbGVtZW50c1xuICogQHBhcmFtIHtbRWxlbWVudCwgQXJyYXksIE5vZGVMaXN0XX0gZWxlbXMgLSBtdWx0aXBsZSBlbGVtZW50c1xuICogQHJldHVybnMge0FycmF5fSBjZWxscyAtIEZsaWNraXR5LkNlbGxzXG4gKi9cbnByb3RvLmdldENlbGxzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgcmV0dXJuIGVsZW1zLm1hcCggKCBlbGVtICkgPT4gdGhpcy5nZXRDZWxsKCBlbGVtICkgKS5maWx0ZXIoIEJvb2xlYW4gKTtcbn07XG5cbi8qKlxuICogZ2V0IGNlbGwgZWxlbWVudHNcbiAqIEByZXR1cm5zIHtBcnJheX0gY2VsbEVsZW1zXG4gKi9cbnByb3RvLmdldENlbGxFbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jZWxscy5tYXAoICggY2VsbCApID0+IGNlbGwuZWxlbWVudCApO1xufTtcblxuLyoqXG4gKiBnZXQgcGFyZW50IGNlbGwgZnJvbSBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW0gLSBjaGlsZCBlbGVtZW50XG4gKiBAcmV0dXJucyB7RmxpY2tpdC5DZWxsfSBjZWxsIC0gcGFyZW50IGNlbGxcbiAqL1xucHJvdG8uZ2V0UGFyZW50Q2VsbCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBmaXJzdCBjaGVjayBpZiBlbGVtIGlzIGNlbGxcbiAgbGV0IGNlbGwgPSB0aGlzLmdldENlbGwoIGVsZW0gKTtcbiAgaWYgKCBjZWxsICkgcmV0dXJuIGNlbGw7XG5cbiAgLy8gdHJ5IHRvIGdldCBwYXJlbnQgY2VsbCBlbGVtXG4gIGxldCBjbG9zZXN0ID0gZWxlbS5jbG9zZXN0KCcuZmxpY2tpdHktc2xpZGVyID4gKicpO1xuICByZXR1cm4gdGhpcy5nZXRDZWxsKCBjbG9zZXN0ICk7XG59O1xuXG4vKipcbiAqIGdldCBjZWxscyBhZGphY2VudCB0byBhIHNsaWRlXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGFkakNvdW50IC0gbnVtYmVyIG9mIGFkamFjZW50IHNsaWRlc1xuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIGluZGV4IG9mIHNsaWRlIHRvIHN0YXJ0XG4gKiBAcmV0dXJucyB7QXJyYXl9IGNlbGxzIC0gYXJyYXkgb2YgRmxpY2tpdHkuQ2VsbHNcbiAqL1xucHJvdG8uZ2V0QWRqYWNlbnRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbiggYWRqQ291bnQsIGluZGV4ICkge1xuICBpZiAoICFhZGpDb3VudCApIHJldHVybiB0aGlzLnNlbGVjdGVkU2xpZGUuZ2V0Q2VsbEVsZW1lbnRzKCk7XG5cbiAgaW5kZXggPSBpbmRleCA9PT0gdW5kZWZpbmVkID8gdGhpcy5zZWxlY3RlZEluZGV4IDogaW5kZXg7XG5cbiAgbGV0IGxlbiA9IHRoaXMuc2xpZGVzLmxlbmd0aDtcbiAgaWYgKCAxICsgKCBhZGpDb3VudCAqIDIgKSA+PSBsZW4gKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2VsbEVsZW1lbnRzKCk7IC8vIGdldCBhbGxcbiAgfVxuXG4gIGxldCBjZWxsRWxlbXMgPSBbXTtcbiAgZm9yICggbGV0IGkgPSBpbmRleCAtIGFkakNvdW50OyBpIDw9IGluZGV4ICsgYWRqQ291bnQ7IGkrKyApIHtcbiAgICBsZXQgc2xpZGVJbmRleCA9IHRoaXMuaXNXcmFwcGluZyA/IHV0aWxzLm1vZHVsbyggaSwgbGVuICkgOiBpO1xuICAgIGxldCBzbGlkZSA9IHRoaXMuc2xpZGVzWyBzbGlkZUluZGV4IF07XG4gICAgaWYgKCBzbGlkZSApIHtcbiAgICAgIGNlbGxFbGVtcyA9IGNlbGxFbGVtcy5jb25jYXQoIHNsaWRlLmdldENlbGxFbGVtZW50cygpICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjZWxsRWxlbXM7XG59O1xuXG4vKipcbiAqIHNlbGVjdCBzbGlkZSBmcm9tIG51bWJlciBvciBjZWxsIGVsZW1lbnRcbiAqIEBwYXJhbSB7W0VsZW1lbnQsIFN0cmluZywgTnVtYmVyXX0gc2VsZWN0b3IgLSBlbGVtZW50LCBzZWxlY3RvciBzdHJpbmcsIG9yIGluZGV4XG4gKiBAcmV0dXJucyB7RmxpY2tpdHkuQ2VsbH0gLSBtYXRjaGluZyBjZWxsXG4gKi9cbnByb3RvLnF1ZXJ5Q2VsbCA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcbiAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT0gJ251bWJlcicgKSB7XG4gICAgLy8gdXNlIG51bWJlciBhcyBpbmRleFxuICAgIHJldHVybiB0aGlzLmNlbGxzWyBzZWxlY3RvciBdO1xuICB9XG4gIC8vIGRvIG5vdCBzZWxlY3QgaW52YWxpZCBzZWxlY3RvcnMgZnJvbSBoYXNoOiAjMTIzLCAjLy4gIzc5MVxuICBsZXQgaXNTZWxlY3RvclN0cmluZyA9IHR5cGVvZiBzZWxlY3RvciA9PSAnc3RyaW5nJyAmJiAhc2VsZWN0b3IubWF0Y2goIC9eWyMuXT9bXFxkL10vICk7XG4gIGlmICggaXNTZWxlY3RvclN0cmluZyApIHtcbiAgICAvLyB1c2Ugc3RyaW5nIGFzIHNlbGVjdG9yLCBnZXQgZWxlbWVudFxuICAgIHNlbGVjdG9yID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoIHNlbGVjdG9yICk7XG4gIH1cbiAgLy8gZ2V0IGNlbGwgZnJvbSBlbGVtZW50XG4gIHJldHVybiB0aGlzLmdldENlbGwoIHNlbGVjdG9yICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBldmVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8udWlDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbWl0RXZlbnQoJ3VpQ2hhbmdlJyk7XG59O1xuXG4vLyAtLS0tLSByZXNpemUgLS0tLS0gLy9cblxucHJvdG8ub25yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy53YXRjaENTUygpO1xuICB0aGlzLnJlc2l6ZSgpO1xufTtcblxudXRpbHMuZGVib3VuY2VNZXRob2QoIEZsaWNraXR5LCAnb25yZXNpemUnLCAxNTAgKTtcblxucHJvdG8ucmVzaXplID0gZnVuY3Rpb24oKSB7XG4gIC8vICMxMTc3IGRpc2FibGUgcmVzaXplIGJlaGF2aW9yIHdoZW4gYW5pbWF0aW5nIG9yIGRyYWdnaW5nIGZvciBpT1MgMTVcbiAgaWYgKCAhdGhpcy5pc0FjdGl2ZSB8fCB0aGlzLmlzQW5pbWF0aW5nIHx8IHRoaXMuaXNEcmFnZ2luZyApIHJldHVybjtcbiAgdGhpcy5nZXRTaXplKCk7XG4gIC8vIHdyYXAgdmFsdWVzXG4gIGlmICggdGhpcy5pc1dyYXBwaW5nICkge1xuICAgIHRoaXMueCA9IHV0aWxzLm1vZHVsbyggdGhpcy54LCB0aGlzLnNsaWRlYWJsZVdpZHRoICk7XG4gIH1cbiAgdGhpcy5wb3NpdGlvbkNlbGxzKCk7XG4gIHRoaXMuX3VwZGF0ZVdyYXBTaGlmdENlbGxzKCk7XG4gIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbiAgdGhpcy5lbWl0RXZlbnQoJ3Jlc2l6ZScpO1xuICAvLyB1cGRhdGUgc2VsZWN0ZWQgaW5kZXggZm9yIGdyb3VwIHNsaWRlcywgaW5zdGFudFxuICAvLyBUT0RPOiBwb3NpdGlvbiBjYW4gYmUgbG9zdCBiZXR3ZWVuIGdyb3VwcyBvZiB2YXJpb3VzIG51bWJlcnNcbiAgbGV0IHNlbGVjdGVkRWxlbWVudCA9IHRoaXMuc2VsZWN0ZWRFbGVtZW50cyAmJiB0aGlzLnNlbGVjdGVkRWxlbWVudHNbMF07XG4gIHRoaXMuc2VsZWN0Q2VsbCggc2VsZWN0ZWRFbGVtZW50LCBmYWxzZSwgdHJ1ZSApO1xufTtcblxuLy8gd2F0Y2hlcyB0aGUgOmFmdGVyIHByb3BlcnR5LCBhY3RpdmF0ZXMvZGVhY3RpdmF0ZXNcbnByb3RvLndhdGNoQ1NTID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy53YXRjaENTUyApIHJldHVybjtcblxuICBsZXQgYWZ0ZXJDb250ZW50ID0gZ2V0Q29tcHV0ZWRTdHlsZSggdGhpcy5lbGVtZW50LCAnOmFmdGVyJyApLmNvbnRlbnQ7XG4gIC8vIGFjdGl2YXRlIGlmIDphZnRlciB7IGNvbnRlbnQ6ICdmbGlja2l0eScgfVxuICBpZiAoIGFmdGVyQ29udGVudC5pbmNsdWRlcygnZmxpY2tpdHknKSApIHtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGtleWRvd24gLS0tLS0gLy9cblxuLy8gZ28gcHJldmlvdXMvbmV4dCBpZiBsZWZ0L3JpZ2h0IGtleXMgcHJlc3NlZFxucHJvdG8ub25rZXlkb3duID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBsZXQgeyBhY3RpdmVFbGVtZW50IH0gPSBkb2N1bWVudDtcbiAgbGV0IGhhbmRsZXIgPSBGbGlja2l0eS5rZXlib2FyZEhhbmRsZXJzWyBldmVudC5rZXkgXTtcbiAgLy8gb25seSB3b3JrIGlmIGVsZW1lbnQgaXMgaW4gZm9jdXNcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgfHwgIWFjdGl2ZUVsZW1lbnQgfHwgIWhhbmRsZXIgKSByZXR1cm47XG5cbiAgbGV0IGlzRm9jdXNlZCA9IHRoaXMuZm9jdXNhYmxlRWxlbXMuc29tZSggKCBlbGVtICkgPT4gYWN0aXZlRWxlbWVudCA9PT0gZWxlbSApO1xuICBpZiAoIGlzRm9jdXNlZCApIGhhbmRsZXIuY2FsbCggdGhpcyApO1xufTtcblxuRmxpY2tpdHkua2V5Ym9hcmRIYW5kbGVycyA9IHtcbiAgQXJyb3dMZWZ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnVpQ2hhbmdlKCk7XG4gICAgbGV0IGxlZnRNZXRob2QgPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAnbmV4dCcgOiAncHJldmlvdXMnO1xuICAgIHRoaXNbIGxlZnRNZXRob2QgXSgpO1xuICB9LFxuICBBcnJvd1JpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnVpQ2hhbmdlKCk7XG4gICAgbGV0IHJpZ2h0TWV0aG9kID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gJ3ByZXZpb3VzJyA6ICduZXh0JztcbiAgICB0aGlzWyByaWdodE1ldGhvZCBdKCk7XG4gIH0sXG59O1xuXG4vLyAtLS0tLSBmb2N1cyAtLS0tLSAvL1xuXG5wcm90by5mb2N1cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGVzdHJveSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBkZWFjdGl2YXRlIGFsbCBGbGlja2l0eSBmdW5jdGlvbmFsaXR5LCBidXQga2VlcCBzdHVmZiBhdmFpbGFibGVcbnByb3RvLmRlYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5pc0FjdGl2ZSApIHJldHVybjtcblxuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZmxpY2tpdHktZW5hYmxlZCcpO1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZmxpY2tpdHktcnRsJyk7XG4gIHRoaXMudW5zZWxlY3RTZWxlY3RlZFNsaWRlKCk7XG4gIC8vIGRlc3Ryb3kgY2VsbHNcbiAgdGhpcy5jZWxscy5mb3JFYWNoKCAoIGNlbGwgKSA9PiBjZWxsLmRlc3Ryb3koKSApO1xuICB0aGlzLnZpZXdwb3J0LnJlbW92ZSgpO1xuICAvLyBtb3ZlIGNoaWxkIGVsZW1lbnRzIGJhY2sgaW50byBlbGVtZW50XG4gIHRoaXMuZWxlbWVudC5hcHBlbmQoIC4uLnRoaXMuc2xpZGVyLmNoaWxkcmVuICk7XG4gIGlmICggdGhpcy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgKSB7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGFiSW5kZXgnKTtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCB0aGlzICk7XG4gIH1cbiAgLy8gc2V0IGZsYWdzXG4gIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0RXZlbnQoJ2RlYWN0aXZhdGUnKTtcbn07XG5cbnByb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAncmVzaXplJywgdGhpcyApO1xuICB0aGlzLmFsbE9mZigpO1xuICB0aGlzLmVtaXRFdmVudCgnZGVzdHJveScpO1xuICBpZiAoIGpRdWVyeSAmJiB0aGlzLiRlbGVtZW50ICkge1xuICAgIGpRdWVyeS5yZW1vdmVEYXRhKCB0aGlzLmVsZW1lbnQsICdmbGlja2l0eScgKTtcbiAgfVxuICBkZWxldGUgdGhpcy5lbGVtZW50LmZsaWNraXR5R1VJRDtcbiAgZGVsZXRlIGluc3RhbmNlc1sgdGhpcy5ndWlkIF07XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuT2JqZWN0LmFzc2lnbiggcHJvdG8sIGFuaW1hdGVQcm90b3R5cGUgKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZXh0cmFzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogZ2V0IEZsaWNraXR5IGluc3RhbmNlIGZyb20gZWxlbWVudFxuICogQHBhcmFtIHtbRWxlbWVudCwgU3RyaW5nXX0gZWxlbSAtIGVsZW1lbnQgb3Igc2VsZWN0b3Igc3RyaW5nXG4gKiBAcmV0dXJucyB7RmxpY2tpdHl9IC0gRmxpY2tpdHkgaW5zdGFuY2VcbiAqL1xuRmxpY2tpdHkuZGF0YSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICBlbGVtID0gdXRpbHMuZ2V0UXVlcnlFbGVtZW50KCBlbGVtICk7XG4gIGlmICggZWxlbSApIHJldHVybiBpbnN0YW5jZXNbIGVsZW0uZmxpY2tpdHlHVUlEIF07XG59O1xuXG51dGlscy5odG1sSW5pdCggRmxpY2tpdHksICdmbGlja2l0eScgKTtcblxubGV0IHsgalF1ZXJ5QnJpZGdldCB9ID0gd2luZG93O1xuaWYgKCBqUXVlcnkgJiYgalF1ZXJ5QnJpZGdldCApIHtcbiAgalF1ZXJ5QnJpZGdldCggJ2ZsaWNraXR5JywgRmxpY2tpdHksIGpRdWVyeSApO1xufVxuXG4vLyBzZXQgaW50ZXJuYWwgalF1ZXJ5LCBmb3IgV2VicGFjayArIGpRdWVyeSB2MywgIzQ3OFxuRmxpY2tpdHkuc2V0SlF1ZXJ5ID0gZnVuY3Rpb24oIGpxICkge1xuICBqUXVlcnkgPSBqcTtcbn07XG5cbkZsaWNraXR5LkNlbGwgPSBDZWxsO1xuRmxpY2tpdHkuU2xpZGUgPSBTbGlkZTtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcblxufSx7XCIuL2FuaW1hdGVcIjo0LFwiLi9jZWxsXCI6NSxcIi4vc2xpZGVcIjoxNCxcImV2LWVtaXR0ZXJcIjoxLFwiZml6enktdWktdXRpbHNcIjoyLFwiZ2V0LXNpemVcIjoxNX1dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gZHJhZ1xuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHJlcXVpcmUoJy4vY29yZScpLFxuICAgICAgICByZXF1aXJlKCd1bmlkcmFnZ2VyJyksXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuVW5pZHJhZ2dlcixcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLFxuICAgIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIFVuaWRyYWdnZXIsIHV0aWxzICkge1xuXG4vLyAtLS0tLSBkZWZhdWx0cyAtLS0tLSAvL1xuXG5PYmplY3QuYXNzaWduKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBkcmFnZ2FibGU6ICc+MScsXG4gIGRyYWdUaHJlc2hvbGQ6IDMsXG59ICk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWcgcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmxldCBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcbk9iamVjdC5hc3NpZ24oIHByb3RvLCBVbmlkcmFnZ2VyLnByb3RvdHlwZSApOyAvLyBpbmhlcml0IFVuaWRyYWdnZXJcbnByb3RvLnRvdWNoQWN0aW9uVmFsdWUgPSAnJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbkZsaWNraXR5LmNyZWF0ZS5kcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMub25BY3RpdmF0ZURyYWcgKTtcbiAgdGhpcy5vbiggJ3VpQ2hhbmdlJywgdGhpcy5fdWlDaGFuZ2VEcmFnICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5vbkRlYWN0aXZhdGVEcmFnICk7XG4gIHRoaXMub24oICdjZWxsQ2hhbmdlJywgdGhpcy51cGRhdGVEcmFnZ2FibGUgKTtcbiAgdGhpcy5vbiggJ3BvaW50ZXJEb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG93biApO1xuICB0aGlzLm9uKCAncG9pbnRlclVwJywgdGhpcy5oYW5kbGVQb2ludGVyVXAgKTtcbiAgdGhpcy5vbiggJ3BvaW50ZXJEb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG9uZSApO1xuICB0aGlzLm9uKCAnZHJhZ1N0YXJ0JywgdGhpcy5oYW5kbGVEcmFnU3RhcnQgKTtcbiAgdGhpcy5vbiggJ2RyYWdNb3ZlJywgdGhpcy5oYW5kbGVEcmFnTW92ZSApO1xuICB0aGlzLm9uKCAnZHJhZ0VuZCcsIHRoaXMuaGFuZGxlRHJhZ0VuZCApO1xuICB0aGlzLm9uKCAnc3RhdGljQ2xpY2snLCB0aGlzLmhhbmRsZVN0YXRpY0NsaWNrICk7XG4gIC8vIFRPRE8gdXBkYXRlRHJhZ2dhYmxlIG9uIHJlc2l6ZT8gaWYgZ3JvdXBDZWxscyAmIHNsaWRlcyBjaGFuZ2Vcbn07XG5cbnByb3RvLm9uQWN0aXZhdGVEcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaGFuZGxlcyA9IFsgdGhpcy52aWV3cG9ydCBdO1xuICB0aGlzLmJpbmRIYW5kbGVzKCk7XG4gIHRoaXMudXBkYXRlRHJhZ2dhYmxlKCk7XG59O1xuXG5wcm90by5vbkRlYWN0aXZhdGVEcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudW5iaW5kSGFuZGxlcygpO1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZHJhZ2dhYmxlJyk7XG59O1xuXG5wcm90by51cGRhdGVEcmFnZ2FibGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gZGlzYWJsZSBkcmFnZ2luZyBpZiBsZXNzIHRoYW4gMiBzbGlkZXMuICMyNzhcbiAgaWYgKCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlID09PSAnPjEnICkge1xuICAgIHRoaXMuaXNEcmFnZ2FibGUgPSB0aGlzLnNsaWRlcy5sZW5ndGggPiAxO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNEcmFnZ2FibGUgPSB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlO1xuICB9XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCAnaXMtZHJhZ2dhYmxlJywgdGhpcy5pc0RyYWdnYWJsZSApO1xufTtcblxucHJvdG8uX3VpQ2hhbmdlRHJhZyA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5pc0ZyZWVTY3JvbGxpbmc7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwb2ludGVyIGV2ZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by5oYW5kbGVQb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSApIHtcbiAgICAvLyBwcm9jZWVkIGZvciBzdGF0aWNDbGlja1xuICAgIHRoaXMuYmluZEFjdGl2ZVBvaW50ZXJFdmVudHMoIGV2ZW50ICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGlzVG91Y2hTdGFydCA9IGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0JztcbiAgbGV0IGlzVG91Y2hQb2ludGVyID0gZXZlbnQucG9pbnRlclR5cGUgPT09ICd0b3VjaCc7XG4gIGxldCBpc0ZvY3VzTm9kZSA9IGV2ZW50LnRhcmdldC5tYXRjaGVzKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpO1xuICBpZiAoICFpc1RvdWNoU3RhcnQgJiYgIWlzVG91Y2hQb2ludGVyICYmICFpc0ZvY3VzTm9kZSApIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGlmICggIWlzRm9jdXNOb2RlICkgdGhpcy5mb2N1cygpO1xuICAvLyBibHVyXG4gIGlmICggZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGhpcy5lbGVtZW50ICkgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIC8vIHN0b3AgaWYgaXQgd2FzIG1vdmluZ1xuICB0aGlzLmRyYWdYID0gdGhpcy54O1xuICB0aGlzLnZpZXdwb3J0LmNsYXNzTGlzdC5hZGQoJ2lzLXBvaW50ZXItZG93bicpO1xuICAvLyB0cmFjayBzY3JvbGxpbmdcbiAgdGhpcy5wb2ludGVyRG93blNjcm9sbCA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhpcyApO1xuICB0aGlzLmJpbmRBY3RpdmVQb2ludGVyRXZlbnRzKCBldmVudCApO1xufTtcblxuLy8gLS0tLS0gbW92ZSAtLS0tLSAvL1xuXG5wcm90by5oYXNEcmFnU3RhcnRlZCA9IGZ1bmN0aW9uKCBtb3ZlVmVjdG9yICkge1xuICByZXR1cm4gTWF0aC5hYnMoIG1vdmVWZWN0b3IueCApID4gdGhpcy5vcHRpb25zLmRyYWdUaHJlc2hvbGQ7XG59O1xuXG4vLyAtLS0tLSB1cCAtLS0tLSAvL1xuXG5wcm90by5oYW5kbGVQb2ludGVyVXAgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuaXNUb3VjaFNjcm9sbGluZztcbiAgdGhpcy52aWV3cG9ydC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1wb2ludGVyLWRvd24nKTtcbn07XG5cbnByb3RvLmhhbmRsZVBvaW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhpcyApO1xuICBkZWxldGUgdGhpcy5wb2ludGVyRG93blNjcm9sbDtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWdnaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnByb3RvLmhhbmRsZURyYWdTdGFydCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlICkgcmV0dXJuO1xuXG4gIHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gPSB0aGlzLng7XG4gIHRoaXMuc3RhcnRBbmltYXRpb24oKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzY3JvbGwnLCB0aGlzICk7XG59O1xuXG5wcm90by5oYW5kbGVEcmFnTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSApIHJldHVybjtcblxuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gIHRoaXMucHJldmlvdXNEcmFnWCA9IHRoaXMuZHJhZ1g7XG4gIC8vIHJldmVyc2UgaWYgcmlnaHQtdG8tbGVmdFxuICBsZXQgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gLTEgOiAxO1xuICAvLyB3cmFwIGFyb3VuZCBtb3ZlLiAjNTg5XG4gIGlmICggdGhpcy5pc1dyYXBwaW5nICkgbW92ZVZlY3Rvci54ICU9IHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gIGxldCBkcmFnWCA9IHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKyBtb3ZlVmVjdG9yLnggKiBkaXJlY3Rpb247XG5cbiAgaWYgKCAhdGhpcy5pc1dyYXBwaW5nICkge1xuICAgIC8vIHNsb3cgZHJhZ1xuICAgIGxldCBvcmlnaW5Cb3VuZCA9IE1hdGgubWF4KCAtdGhpcy5zbGlkZXNbMF0udGFyZ2V0LCB0aGlzLmRyYWdTdGFydFBvc2l0aW9uICk7XG4gICAgZHJhZ1ggPSBkcmFnWCA+IG9yaWdpbkJvdW5kID8gKCBkcmFnWCArIG9yaWdpbkJvdW5kICkgKiAwLjUgOiBkcmFnWDtcbiAgICBsZXQgZW5kQm91bmQgPSBNYXRoLm1pbiggLXRoaXMuZ2V0TGFzdFNsaWRlKCkudGFyZ2V0LCB0aGlzLmRyYWdTdGFydFBvc2l0aW9uICk7XG4gICAgZHJhZ1ggPSBkcmFnWCA8IGVuZEJvdW5kID8gKCBkcmFnWCArIGVuZEJvdW5kICkgKiAwLjUgOiBkcmFnWDtcbiAgfVxuXG4gIHRoaXMuZHJhZ1ggPSBkcmFnWDtcbiAgdGhpcy5kcmFnTW92ZVRpbWUgPSBuZXcgRGF0ZSgpO1xufTtcblxucHJvdG8uaGFuZGxlRHJhZ0VuZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlICkgcmV0dXJuO1xuXG4gIGxldCB7IGZyZWVTY3JvbGwgfSA9IHRoaXMub3B0aW9ucztcbiAgaWYgKCBmcmVlU2Nyb2xsICkgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPSB0cnVlO1xuICAvLyBzZXQgc2VsZWN0ZWRJbmRleCBiYXNlZCBvbiB3aGVyZSBmbGljayB3aWxsIGVuZCB1cFxuICBsZXQgaW5kZXggPSB0aGlzLmRyYWdFbmRSZXN0aW5nU2VsZWN0KCk7XG5cbiAgaWYgKCBmcmVlU2Nyb2xsICYmICF0aGlzLmlzV3JhcHBpbmcgKSB7XG4gICAgLy8gaWYgZnJlZS1zY3JvbGwgJiBub3Qgd3JhcCBhcm91bmRcbiAgICAvLyBkbyBub3QgZnJlZS1zY3JvbGwgaWYgZ29pbmcgb3V0c2lkZSBvZiBib3VuZGluZyBzbGlkZXNcbiAgICAvLyBzbyBib3VuZGluZyBzbGlkZXMgY2FuIGF0dHJhY3Qgc2xpZGVyLCBhbmQga2VlcCBpdCBpbiBib3VuZHNcbiAgICBsZXQgcmVzdGluZ1ggPSB0aGlzLmdldFJlc3RpbmdQb3NpdGlvbigpO1xuICAgIHRoaXMuaXNGcmVlU2Nyb2xsaW5nID0gLXJlc3RpbmdYID4gdGhpcy5zbGlkZXNbMF0udGFyZ2V0ICYmXG4gICAgICAtcmVzdGluZ1ggPCB0aGlzLmdldExhc3RTbGlkZSgpLnRhcmdldDtcbiAgfSBlbHNlIGlmICggIWZyZWVTY3JvbGwgJiYgaW5kZXggPT09IHRoaXMuc2VsZWN0ZWRJbmRleCApIHtcbiAgICAvLyBib29zdCBzZWxlY3Rpb24gaWYgc2VsZWN0ZWQgaW5kZXggaGFzIG5vdCBjaGFuZ2VkXG4gICAgaW5kZXggKz0gdGhpcy5kcmFnRW5kQm9vc3RTZWxlY3QoKTtcbiAgfVxuICBkZWxldGUgdGhpcy5wcmV2aW91c0RyYWdYO1xuICAvLyBhcHBseSBzZWxlY3Rpb25cbiAgLy8gSEFDSywgc2V0IGZsYWcgc28gZHJhZ2dpbmcgc3RheXMgaW4gY29ycmVjdCBkaXJlY3Rpb25cbiAgdGhpcy5pc0RyYWdTZWxlY3QgPSB0aGlzLmlzV3JhcHBpbmc7XG4gIHRoaXMuc2VsZWN0KCBpbmRleCApO1xuICBkZWxldGUgdGhpcy5pc0RyYWdTZWxlY3Q7XG59O1xuXG5wcm90by5kcmFnRW5kUmVzdGluZ1NlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcmVzdGluZ1ggPSB0aGlzLmdldFJlc3RpbmdQb3NpdGlvbigpO1xuICAvLyBob3cgZmFyIGF3YXkgZnJvbSBzZWxlY3RlZCBzbGlkZVxuICBsZXQgZGlzdGFuY2UgPSBNYXRoLmFicyggdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtcmVzdGluZ1gsIHRoaXMuc2VsZWN0ZWRJbmRleCApICk7XG4gIC8vIGdldCBjbG9zZXQgcmVzdGluZyBnb2luZyB1cCBhbmQgZ29pbmcgZG93blxuICBsZXQgcG9zaXRpdmVSZXN0aW5nID0gdGhpcy5fZ2V0Q2xvc2VzdFJlc3RpbmcoIHJlc3RpbmdYLCBkaXN0YW5jZSwgMSApO1xuICBsZXQgbmVnYXRpdmVSZXN0aW5nID0gdGhpcy5fZ2V0Q2xvc2VzdFJlc3RpbmcoIHJlc3RpbmdYLCBkaXN0YW5jZSwgLTEgKTtcbiAgLy8gdXNlIGNsb3NlciByZXN0aW5nIGZvciB3cmFwLWFyb3VuZFxuICByZXR1cm4gcG9zaXRpdmVSZXN0aW5nLmRpc3RhbmNlIDwgbmVnYXRpdmVSZXN0aW5nLmRpc3RhbmNlID9cbiAgICBwb3NpdGl2ZVJlc3RpbmcuaW5kZXggOiBuZWdhdGl2ZVJlc3RpbmcuaW5kZXg7XG59O1xuXG4vKipcbiAqIGdpdmVuIHJlc3RpbmcgWCBhbmQgZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxuICogZ2V0IHRoZSBkaXN0YW5jZSBhbmQgaW5kZXggb2YgdGhlIGNsb3Nlc3QgY2VsbFxuICogQHBhcmFtIHtOdW1iZXJ9IHJlc3RpbmdYIC0gZXN0aW1hdGVkIHBvc3QtZmxpY2sgcmVzdGluZyBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IGRpc3RhbmNlIC0gZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmNyZW1lbnQgLSArMSBvciAtMSwgZ29pbmcgdXAgb3IgZG93blxuICogQHJldHVybnMge09iamVjdH0gLSB7IGRpc3RhbmNlOiB7TnVtYmVyfSwgaW5kZXg6IHtJbnRlZ2VyfSB9XG4gKi9cbnByb3RvLl9nZXRDbG9zZXN0UmVzdGluZyA9IGZ1bmN0aW9uKCByZXN0aW5nWCwgZGlzdGFuY2UsIGluY3JlbWVudCApIHtcbiAgbGV0IGluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4O1xuICBsZXQgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgbGV0IGNvbmRpdGlvbiA9IHRoaXMub3B0aW9ucy5jb250YWluICYmICF0aGlzLmlzV3JhcHBpbmcgP1xuICAgIC8vIGlmIGNvbnRhaW5pbmcsIGtlZXAgZ29pbmcgaWYgZGlzdGFuY2UgaXMgZXF1YWwgdG8gbWluRGlzdGFuY2VcbiAgICAoIGRpc3QsIG1pbkRpc3QgKSA9PiBkaXN0IDw9IG1pbkRpc3QgOlxuICAgICggZGlzdCwgbWluRGlzdCApID0+IGRpc3QgPCBtaW5EaXN0O1xuXG4gIHdoaWxlICggY29uZGl0aW9uKCBkaXN0YW5jZSwgbWluRGlzdGFuY2UgKSApIHtcbiAgICAvLyBtZWFzdXJlIGRpc3RhbmNlIHRvIG5leHQgY2VsbFxuICAgIGluZGV4ICs9IGluY3JlbWVudDtcbiAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgIGRpc3RhbmNlID0gdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtcmVzdGluZ1gsIGluZGV4ICk7XG4gICAgaWYgKCBkaXN0YW5jZSA9PT0gbnVsbCApIGJyZWFrO1xuXG4gICAgZGlzdGFuY2UgPSBNYXRoLmFicyggZGlzdGFuY2UgKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGRpc3RhbmNlOiBtaW5EaXN0YW5jZSxcbiAgICAvLyBzZWxlY3RlZCB3YXMgcHJldmlvdXMgaW5kZXhcbiAgICBpbmRleDogaW5kZXggLSBpbmNyZW1lbnQsXG4gIH07XG59O1xuXG4vKipcbiAqIG1lYXN1cmUgZGlzdGFuY2UgYmV0d2VlbiB4IGFuZCBhIHNsaWRlIHRhcmdldFxuICogQHBhcmFtIHtOdW1iZXJ9IHggLSBob3Jpem9udGFsIHBvc2l0aW9uXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gc2xpZGUgaW5kZXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gc2xpZGUgZGlzdGFuY2VcbiAqL1xucHJvdG8uZ2V0U2xpZGVEaXN0YW5jZSA9IGZ1bmN0aW9uKCB4LCBpbmRleCApIHtcbiAgbGV0IGxlbiA9IHRoaXMuc2xpZGVzLmxlbmd0aDtcbiAgLy8gd3JhcCBhcm91bmQgaWYgYXQgbGVhc3QgMiBzbGlkZXNcbiAgbGV0IGlzV3JhcEFyb3VuZCA9IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIGxlbiA+IDE7XG4gIGxldCBzbGlkZUluZGV4ID0gaXNXcmFwQXJvdW5kID8gdXRpbHMubW9kdWxvKCBpbmRleCwgbGVuICkgOiBpbmRleDtcbiAgbGV0IHNsaWRlID0gdGhpcy5zbGlkZXNbIHNsaWRlSW5kZXggXTtcbiAgaWYgKCAhc2xpZGUgKSByZXR1cm4gbnVsbDtcblxuICAvLyBhZGQgZGlzdGFuY2UgZm9yIHdyYXAtYXJvdW5kIHNsaWRlc1xuICBsZXQgd3JhcCA9IGlzV3JhcEFyb3VuZCA/IHRoaXMuc2xpZGVhYmxlV2lkdGggKiBNYXRoLmZsb29yKCBpbmRleC9sZW4gKSA6IDA7XG4gIHJldHVybiB4IC0gKCBzbGlkZS50YXJnZXQgKyB3cmFwICk7XG59O1xuXG5wcm90by5kcmFnRW5kQm9vc3RTZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgLy8gZG8gbm90IGJvb3N0IGlmIG5vIHByZXZpb3VzRHJhZ1ggb3IgZHJhZ01vdmVUaW1lXG4gIGlmICggdGhpcy5wcmV2aW91c0RyYWdYID09PSB1bmRlZmluZWQgfHwgIXRoaXMuZHJhZ01vdmVUaW1lIHx8XG4gICAgLy8gb3IgaWYgZHJhZyB3YXMgaGVsZCBmb3IgMTAwIG1zXG4gICAgbmV3IERhdGUoKSAtIHRoaXMuZHJhZ01vdmVUaW1lID4gMTAwICkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgbGV0IGRpc3RhbmNlID0gdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtdGhpcy5kcmFnWCwgdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIGxldCBkZWx0YSA9IHRoaXMucHJldmlvdXNEcmFnWCAtIHRoaXMuZHJhZ1g7XG4gIGlmICggZGlzdGFuY2UgPiAwICYmIGRlbHRhID4gMCApIHtcbiAgICAvLyBib29zdCB0byBuZXh0IGlmIG1vdmluZyB0b3dhcmRzIHRoZSByaWdodCwgYW5kIHBvc2l0aXZlIHZlbG9jaXR5XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSBpZiAoIGRpc3RhbmNlIDwgMCAmJiBkZWx0YSA8IDAgKSB7XG4gICAgLy8gYm9vc3QgdG8gcHJldmlvdXMgaWYgbW92aW5nIHRvd2FyZHMgdGhlIGxlZnQsIGFuZCBuZWdhdGl2ZSB2ZWxvY2l0eVxuICAgIHJldHVybiAtMTtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbi8vIC0tLS0tIHNjcm9sbCAtLS0tLSAvL1xuXG5wcm90by5vbnNjcm9sbCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgc2Nyb2xsID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgbGV0IHNjcm9sbE1vdmVYID0gdGhpcy5wb2ludGVyRG93blNjcm9sbC54IC0gc2Nyb2xsLng7XG4gIGxldCBzY3JvbGxNb3ZlWSA9IHRoaXMucG9pbnRlckRvd25TY3JvbGwueSAtIHNjcm9sbC55O1xuICAvLyBjYW5jZWwgY2xpY2svdGFwIGlmIHNjcm9sbCBpcyB0b28gbXVjaFxuICBpZiAoIE1hdGguYWJzKCBzY3JvbGxNb3ZlWCApID4gMyB8fCBNYXRoLmFicyggc2Nyb2xsTW92ZVkgKSA+IDMgKSB7XG4gICAgdGhpcy5wb2ludGVyRG9uZSgpO1xuICB9XG59O1xuXG4vLyAtLS0tLSB1dGlscyAtLS0tLSAvL1xuXG5mdW5jdGlvbiBnZXRTY3JvbGxQb3NpdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0LFxuICB9O1xufVxuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcblxufSx7XCIuL2NvcmVcIjo2LFwiZml6enktdWktdXRpbHNcIjoyLFwidW5pZHJhZ2dlclwiOjE4fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBpbWFnZXNsb2FkZWRcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgcmVxdWlyZSgnLi9jb3JlJyksXG4gICAgICAgIHJlcXVpcmUoJ2ltYWdlc2xvYWRlZCcpLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICAgIHdpbmRvdy5pbWFnZXNMb2FkZWQsXG4gICAgKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcyxcbiAgICBmdW5jdGlvbiBmYWN0b3J5KCBGbGlja2l0eSwgaW1hZ2VzTG9hZGVkICkge1xuXG5GbGlja2l0eS5jcmVhdGUuaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuaW1hZ2VzTG9hZGVkICk7XG59O1xuXG5GbGlja2l0eS5wcm90b3R5cGUuaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5pbWFnZXNMb2FkZWQgKSByZXR1cm47XG5cbiAgbGV0IG9uSW1hZ2VzTG9hZGVkUHJvZ3Jlc3MgPSAoIGluc3RhbmNlLCBpbWFnZSApID0+IHtcbiAgICBsZXQgY2VsbCA9IHRoaXMuZ2V0UGFyZW50Q2VsbCggaW1hZ2UuaW1nICk7XG4gICAgdGhpcy5jZWxsU2l6ZUNoYW5nZSggY2VsbCAmJiBjZWxsLmVsZW1lbnQgKTtcbiAgICBpZiAoICF0aGlzLm9wdGlvbnMuZnJlZVNjcm9sbCApIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG4gIH07XG4gIGltYWdlc0xvYWRlZCggdGhpcy5zbGlkZXIgKS5vbiggJ3Byb2dyZXNzJywgb25JbWFnZXNMb2FkZWRQcm9ncmVzcyApO1xufTtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcblxufSx7XCIuL2NvcmVcIjo2LFwiaW1hZ2VzbG9hZGVkXCI6MTZ9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIVxuICogRmxpY2tpdHkgdjMuMC4wXG4gKiBUb3VjaCwgcmVzcG9uc2l2ZSwgZmxpY2thYmxlIGNhcm91c2Vsc1xuICpcbiAqIExpY2Vuc2VkIEdQTHYzIGZvciBvcGVuIHNvdXJjZSB1c2VcbiAqIG9yIEZsaWNraXR5IENvbW1lcmNpYWwgTGljZW5zZSBmb3IgY29tbWVyY2lhbCB1c2VcbiAqXG4gKiBodHRwczovL2ZsaWNraXR5Lm1ldGFmaXp6eS5jb1xuICogQ29weXJpZ2h0IDIwMTUtMjAyMiBNZXRhZml6enlcbiAqL1xuXG5pZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gIGNvbnN0IEZsaWNraXR5ID0gcmVxdWlyZSgnLi9jb3JlJyk7XG4gIHJlcXVpcmUoJy4vZHJhZycpO1xuICByZXF1aXJlKCcuL3ByZXYtbmV4dC1idXR0b24nKTtcbiAgcmVxdWlyZSgnLi9wYWdlLWRvdHMnKTtcbiAgcmVxdWlyZSgnLi9wbGF5ZXInKTtcbiAgcmVxdWlyZSgnLi9hZGQtcmVtb3ZlLWNlbGwnKTtcbiAgcmVxdWlyZSgnLi9sYXp5bG9hZCcpO1xuICByZXF1aXJlKCcuL2ltYWdlc2xvYWRlZCcpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gRmxpY2tpdHk7XG59XG5cbn0se1wiLi9hZGQtcmVtb3ZlLWNlbGxcIjozLFwiLi9jb3JlXCI6NixcIi4vZHJhZ1wiOjcsXCIuL2ltYWdlc2xvYWRlZFwiOjgsXCIuL2xhenlsb2FkXCI6MTAsXCIuL3BhZ2UtZG90c1wiOjExLFwiLi9wbGF5ZXJcIjoxMixcIi4vcHJldi1uZXh0LWJ1dHRvblwiOjEzfV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gbGF6eWxvYWRcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgcmVxdWlyZSgnLi9jb3JlJyksXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiBmYWN0b3J5KCBGbGlja2l0eSwgdXRpbHMgKSB7XG5cbmNvbnN0IGxhenlBdHRyID0gJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQnO1xuY29uc3QgbGF6eVNyY0F0dHIgPSBgJHtsYXp5QXR0cn0tc3JjYDtcbmNvbnN0IGxhenlTcmNzZXRBdHRyID0gYCR7bGF6eUF0dHJ9LXNyY3NldGA7XG5jb25zdCBpbWdTZWxlY3RvciA9IGBpbWdbJHtsYXp5QXR0cn1dLCBpbWdbJHtsYXp5U3JjQXR0cn1dLCBgICtcbiAgYGltZ1ske2xhenlTcmNzZXRBdHRyfV0sIHNvdXJjZVske2xhenlTcmNzZXRBdHRyfV1gO1xuXG5GbGlja2l0eS5jcmVhdGUubGF6eUxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vbiggJ3NlbGVjdCcsIHRoaXMubGF6eUxvYWQgKTtcblxuICB0aGlzLmhhbmRsZUxhenlMb2FkQ29tcGxldGUgPSB0aGlzLm9uTGF6eUxvYWRDb21wbGV0ZS5iaW5kKCB0aGlzICk7XG59O1xuXG5sZXQgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG5cbnByb3RvLmxhenlMb2FkID0gZnVuY3Rpb24oKSB7XG4gIGxldCB7IGxhenlMb2FkIH0gPSB0aGlzLm9wdGlvbnM7XG4gIGlmICggIWxhenlMb2FkICkgcmV0dXJuO1xuXG4gIC8vIGdldCBhZGphY2VudCBjZWxscywgdXNlIGxhenlMb2FkIG9wdGlvbiBmb3IgYWRqYWNlbnQgY291bnRcbiAgbGV0IGFkakNvdW50ID0gdHlwZW9mIGxhenlMb2FkID09ICdudW1iZXInID8gbGF6eUxvYWQgOiAwO1xuICAvLyBsYXp5IGxvYWQgaW1hZ2VzXG4gIHRoaXMuZ2V0QWRqYWNlbnRDZWxsRWxlbWVudHMoIGFkakNvdW50IClcbiAgICAubWFwKCBnZXRDZWxsTGF6eUltYWdlcyApXG4gICAgLmZsYXQoKVxuICAgIC5mb3JFYWNoKCAoIGltZyApID0+IG5ldyBMYXp5TG9hZGVyKCBpbWcsIHRoaXMuaGFuZGxlTGF6eUxvYWRDb21wbGV0ZSApICk7XG59O1xuXG5mdW5jdGlvbiBnZXRDZWxsTGF6eUltYWdlcyggY2VsbEVsZW0gKSB7XG4gIC8vIGNoZWNrIGlmIGNlbGwgZWxlbWVudCBpcyBsYXp5IGltYWdlXG4gIGlmICggY2VsbEVsZW0ubWF0Y2hlcygnaW1nJykgKSB7XG4gICAgbGV0IGNlbGxBdHRyID0gY2VsbEVsZW0uZ2V0QXR0cmlidXRlKCBsYXp5QXR0ciApO1xuICAgIGxldCBjZWxsU3JjQXR0ciA9IGNlbGxFbGVtLmdldEF0dHJpYnV0ZSggbGF6eVNyY0F0dHIgKTtcbiAgICBsZXQgY2VsbFNyY3NldEF0dHIgPSBjZWxsRWxlbS5nZXRBdHRyaWJ1dGUoIGxhenlTcmNzZXRBdHRyICk7XG4gICAgaWYgKCBjZWxsQXR0ciB8fCBjZWxsU3JjQXR0ciB8fCBjZWxsU3Jjc2V0QXR0ciApIHtcbiAgICAgIHJldHVybiBjZWxsRWxlbTtcbiAgICB9XG4gIH1cbiAgLy8gc2VsZWN0IGxhenkgaW1hZ2VzIGluIGNlbGxcbiAgcmV0dXJuIFsgLi4uY2VsbEVsZW0ucXVlcnlTZWxlY3RvckFsbCggaW1nU2VsZWN0b3IgKSBdO1xufVxuXG5wcm90by5vbkxhenlMb2FkQ29tcGxldGUgPSBmdW5jdGlvbiggaW1nLCBldmVudCApIHtcbiAgbGV0IGNlbGwgPSB0aGlzLmdldFBhcmVudENlbGwoIGltZyApO1xuICBsZXQgY2VsbEVsZW0gPSBjZWxsICYmIGNlbGwuZWxlbWVudDtcbiAgdGhpcy5jZWxsU2l6ZUNoYW5nZSggY2VsbEVsZW0gKTtcblxuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdsYXp5TG9hZCcsIGV2ZW50LCBjZWxsRWxlbSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTGF6eUxvYWRlciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGNsYXNzIHRvIGhhbmRsZSBsb2FkaW5nIGltYWdlc1xuICogQHBhcmFtIHtJbWFnZX0gaW1nIC0gSW1hZ2UgZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gb25Db21wbGV0ZSAtIGNhbGxiYWNrIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIExhenlMb2FkZXIoIGltZywgb25Db21wbGV0ZSApIHtcbiAgdGhpcy5pbWcgPSBpbWc7XG4gIHRoaXMub25Db21wbGV0ZSA9IG9uQ29tcGxldGU7XG4gIHRoaXMubG9hZCgpO1xufVxuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IHV0aWxzLmhhbmRsZUV2ZW50O1xuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIC8vIGdldCBzcmMgJiBzcmNzZXRcbiAgbGV0IHNyYyA9IHRoaXMuaW1nLmdldEF0dHJpYnV0ZSggbGF6eUF0dHIgKSB8fFxuICAgIHRoaXMuaW1nLmdldEF0dHJpYnV0ZSggbGF6eVNyY0F0dHIgKTtcbiAgbGV0IHNyY3NldCA9IHRoaXMuaW1nLmdldEF0dHJpYnV0ZSggbGF6eVNyY3NldEF0dHIgKTtcbiAgLy8gc2V0IHNyYyAmIHNlcnNldFxuICB0aGlzLmltZy5zcmMgPSBzcmM7XG4gIGlmICggc3Jjc2V0ICkgdGhpcy5pbWcuc2V0QXR0cmlidXRlKCAnc3Jjc2V0Jywgc3Jjc2V0ICk7XG4gIC8vIHJlbW92ZSBhdHRyXG4gIHRoaXMuaW1nLnJlbW92ZUF0dHJpYnV0ZSggbGF6eUF0dHIgKTtcbiAgdGhpcy5pbWcucmVtb3ZlQXR0cmlidXRlKCBsYXp5U3JjQXR0ciApO1xuICB0aGlzLmltZy5yZW1vdmVBdHRyaWJ1dGUoIGxhenlTcmNzZXRBdHRyICk7XG59O1xuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5vbmxvYWQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMuY29tcGxldGUoIGV2ZW50LCAnZmxpY2tpdHktbGF6eWxvYWRlZCcgKTtcbn07XG5cbkxhenlMb2FkZXIucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMuY29tcGxldGUoIGV2ZW50LCAnZmxpY2tpdHktbGF6eWVycm9yJyApO1xufTtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiggZXZlbnQsIGNsYXNzTmFtZSApIHtcbiAgLy8gdW5iaW5kIGV2ZW50c1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICBsZXQgbWVkaWFFbGVtID0gdGhpcy5pbWcucGFyZW50Tm9kZS5tYXRjaGVzKCdwaWN0dXJlJykgPyB0aGlzLmltZy5wYXJlbnROb2RlIDogdGhpcy5pbWc7XG4gIG1lZGlhRWxlbS5jbGFzc0xpc3QuYWRkKCBjbGFzc05hbWUgKTtcblxuICB0aGlzLm9uQ29tcGxldGUoIHRoaXMuaW1nLCBldmVudCApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbkZsaWNraXR5LkxhenlMb2FkZXIgPSBMYXp5TG9hZGVyO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuXG59LHtcIi4vY29yZVwiOjYsXCJmaXp6eS11aS11dGlsc1wiOjJ9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBwYWdlIGRvdHNcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgcmVxdWlyZSgnLi9jb3JlJyksXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiBmYWN0b3J5KCBGbGlja2l0eSwgdXRpbHMgKSB7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBhZ2VEb3RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIFBhZ2VEb3RzKCkge1xuICAvLyBjcmVhdGUgaG9sZGVyIGVsZW1lbnRcbiAgdGhpcy5ob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGhpcy5ob2xkZXIuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXBhZ2UtZG90cyc7XG4gIC8vIGNyZWF0ZSBkb3RzLCBhcnJheSBvZiBlbGVtZW50c1xuICB0aGlzLmRvdHMgPSBbXTtcbn1cblxuUGFnZURvdHMucHJvdG90eXBlLnNldERvdHMgPSBmdW5jdGlvbiggc2xpZGVzTGVuZ3RoICkge1xuICAvLyBnZXQgZGlmZmVyZW5jZSBiZXR3ZWVuIG51bWJlciBvZiBzbGlkZXMgYW5kIG51bWJlciBvZiBkb3RzXG4gIGxldCBkZWx0YSA9IHNsaWRlc0xlbmd0aCAtIHRoaXMuZG90cy5sZW5ndGg7XG4gIGlmICggZGVsdGEgPiAwICkge1xuICAgIHRoaXMuYWRkRG90cyggZGVsdGEgKTtcbiAgfSBlbHNlIGlmICggZGVsdGEgPCAwICkge1xuICAgIHRoaXMucmVtb3ZlRG90cyggLWRlbHRhICk7XG4gIH1cbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5hZGREb3RzID0gZnVuY3Rpb24oIGNvdW50ICkge1xuICBsZXQgbmV3RG90cyA9IG5ldyBBcnJheSggY291bnQgKS5maWxsKClcbiAgICAubWFwKCAoIGl0ZW0sIGkgKSA9PiB7XG4gICAgICBsZXQgZG90ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBkb3Quc2V0QXR0cmlidXRlKCAndHlwZScsICdidXR0b24nICk7XG4gICAgICBsZXQgbnVtID0gaSArIDEgKyB0aGlzLmRvdHMubGVuZ3RoO1xuICAgICAgZG90LmNsYXNzTmFtZSA9ICdmbGlja2l0eS1wYWdlLWRvdCc7XG4gICAgICBkb3QudGV4dENvbnRlbnQgPSBgVmlldyBzbGlkZSAke251bX1gO1xuICAgICAgcmV0dXJuIGRvdDtcbiAgICB9ICk7XG5cbiAgdGhpcy5ob2xkZXIuYXBwZW5kKCAuLi5uZXdEb3RzICk7XG4gIHRoaXMuZG90cyA9IHRoaXMuZG90cy5jb25jYXQoIG5ld0RvdHMgKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5yZW1vdmVEb3RzID0gZnVuY3Rpb24oIGNvdW50ICkge1xuICAvLyByZW1vdmUgZnJvbSB0aGlzLmRvdHMgY29sbGVjdGlvblxuICBsZXQgcmVtb3ZlRG90cyA9IHRoaXMuZG90cy5zcGxpY2UoIHRoaXMuZG90cy5sZW5ndGggLSBjb3VudCwgY291bnQgKTtcbiAgLy8gcmVtb3ZlIGZyb20gRE9NXG4gIHJlbW92ZURvdHMuZm9yRWFjaCggKCBkb3QgKSA9PiBkb3QucmVtb3ZlKCkgKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS51cGRhdGVTZWxlY3RlZCA9IGZ1bmN0aW9uKCBpbmRleCApIHtcbiAgLy8gcmVtb3ZlIHNlbGVjdGVkIGNsYXNzIG9uIHByZXZpb3VzXG4gIGlmICggdGhpcy5zZWxlY3RlZERvdCApIHtcbiAgICB0aGlzLnNlbGVjdGVkRG90LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNlbGVjdGVkJyk7XG4gICAgdGhpcy5zZWxlY3RlZERvdC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtY3VycmVudCcpO1xuICB9XG4gIC8vIGRvbid0IHByb2NlZWQgaWYgbm8gZG90c1xuICBpZiAoICF0aGlzLmRvdHMubGVuZ3RoICkgcmV0dXJuO1xuXG4gIHRoaXMuc2VsZWN0ZWREb3QgPSB0aGlzLmRvdHNbIGluZGV4IF07XG4gIHRoaXMuc2VsZWN0ZWREb3QuY2xhc3NMaXN0LmFkZCgnaXMtc2VsZWN0ZWQnKTtcbiAgdGhpcy5zZWxlY3RlZERvdC5zZXRBdHRyaWJ1dGUoICdhcmlhLWN1cnJlbnQnLCAnc3RlcCcgKTtcbn07XG5cbkZsaWNraXR5LlBhZ2VEb3RzID0gUGFnZURvdHM7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZsaWNraXR5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbk9iamVjdC5hc3NpZ24oIEZsaWNraXR5LmRlZmF1bHRzLCB7XG4gIHBhZ2VEb3RzOiB0cnVlLFxufSApO1xuXG5GbGlja2l0eS5jcmVhdGUucGFnZURvdHMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLnBhZ2VEb3RzICkgcmV0dXJuO1xuXG4gIHRoaXMucGFnZURvdHMgPSBuZXcgUGFnZURvdHMoKTtcbiAgdGhpcy5oYW5kbGVQYWdlRG90c0NsaWNrID0gdGhpcy5vblBhZ2VEb3RzQ2xpY2suYmluZCggdGhpcyApO1xuICAvLyBldmVudHNcbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZVBhZ2VEb3RzICk7XG4gIHRoaXMub24oICdzZWxlY3QnLCB0aGlzLnVwZGF0ZVNlbGVjdGVkUGFnZURvdHMgKTtcbiAgdGhpcy5vbiggJ2NlbGxDaGFuZ2UnLCB0aGlzLnVwZGF0ZVBhZ2VEb3RzICk7XG4gIHRoaXMub24oICdyZXNpemUnLCB0aGlzLnVwZGF0ZVBhZ2VEb3RzICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUGFnZURvdHMgKTtcbn07XG5cbmxldCBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8uYWN0aXZhdGVQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBhZ2VEb3RzLnNldERvdHMoIHRoaXMuc2xpZGVzLmxlbmd0aCApO1xuICB0aGlzLmZvY3VzYWJsZUVsZW1zLnB1c2goIC4uLnRoaXMucGFnZURvdHMuZG90cyApO1xuICB0aGlzLnBhZ2VEb3RzLmhvbGRlci5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzLmhhbmRsZVBhZ2VEb3RzQ2xpY2sgKTtcbiAgdGhpcy5lbGVtZW50LmFwcGVuZCggdGhpcy5wYWdlRG90cy5ob2xkZXIgKTtcbn07XG5cbnByb3RvLm9uUGFnZURvdHNDbGljayA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgbGV0IGluZGV4ID0gdGhpcy5wYWdlRG90cy5kb3RzLmluZGV4T2YoIGV2ZW50LnRhcmdldCApO1xuICBpZiAoIGluZGV4ID09PSAtMSApIHJldHVybjsgLy8gb25seSBkb3QgY2xpY2tzXG5cbiAgdGhpcy51aUNoYW5nZSgpO1xuICB0aGlzLnNlbGVjdCggaW5kZXggKTtcbn07XG5cbnByb3RvLnVwZGF0ZVNlbGVjdGVkUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wYWdlRG90cy51cGRhdGVTZWxlY3RlZCggdGhpcy5zZWxlY3RlZEluZGV4ICk7XG59O1xuXG5wcm90by51cGRhdGVQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBhZ2VEb3RzLmRvdHMuZm9yRWFjaCggKCBkb3QgKSA9PiB7XG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5mb2N1c2FibGVFbGVtcywgZG90ICk7XG4gIH0gKTtcbiAgdGhpcy5wYWdlRG90cy5zZXREb3RzKCB0aGlzLnNsaWRlcy5sZW5ndGggKTtcbiAgdGhpcy5mb2N1c2FibGVFbGVtcy5wdXNoKCAuLi50aGlzLnBhZ2VEb3RzLmRvdHMgKTtcbn07XG5cbnByb3RvLmRlYWN0aXZhdGVQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBhZ2VEb3RzLmhvbGRlci5yZW1vdmUoKTtcbiAgdGhpcy5wYWdlRG90cy5ob2xkZXIucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVQYWdlRG90c0NsaWNrICk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuRmxpY2tpdHkuUGFnZURvdHMgPSBQYWdlRG90cztcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcblxufSx7XCIuL2NvcmVcIjo2LFwiZml6enktdWktdXRpbHNcIjoyfV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gcGxheWVyICYgYXV0b1BsYXlcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggcmVxdWlyZSgnLi9jb3JlJykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoIHdpbmRvdy5GbGlja2l0eSApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiBmYWN0b3J5KCBGbGlja2l0eSApIHtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUGxheWVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIFBsYXllciggYXV0b1BsYXksIG9uVGljayApIHtcbiAgdGhpcy5hdXRvUGxheSA9IGF1dG9QbGF5O1xuICB0aGlzLm9uVGljayA9IG9uVGljaztcbiAgdGhpcy5zdGF0ZSA9ICdzdG9wcGVkJztcbiAgLy8gdmlzaWJpbGl0eSBjaGFuZ2UgZXZlbnQgaGFuZGxlclxuICB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSA9IHRoaXMudmlzaWJpbGl0eUNoYW5nZS5iaW5kKCB0aGlzICk7XG4gIHRoaXMub25WaXNpYmlsaXR5UGxheSA9IHRoaXMudmlzaWJpbGl0eVBsYXkuYmluZCggdGhpcyApO1xufVxuXG4vLyBzdGFydCBwbGF5XG5QbGF5ZXIucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnN0YXRlID09PSAncGxheWluZycgKSByZXR1cm47XG5cbiAgLy8gZG8gbm90IHBsYXkgaWYgcGFnZSBpcyBoaWRkZW4sIHN0YXJ0IHBsYXlpbmcgd2hlbiBwYWdlIGlzIHZpc2libGVcbiAgbGV0IGlzUGFnZUhpZGRlbiA9IGRvY3VtZW50LmhpZGRlbjtcbiAgaWYgKCBpc1BhZ2VIaWRkZW4gKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eVBsYXkgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnN0YXRlID0gJ3BsYXlpbmcnO1xuICAvLyBsaXN0ZW4gdG8gdmlzaWJpbGl0eSBjaGFuZ2VcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSApO1xuICAvLyBzdGFydCB0aWNraW5nXG4gIHRoaXMudGljaygpO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vIGRvIG5vdCB0aWNrIGlmIG5vdCBwbGF5aW5nXG4gIGlmICggdGhpcy5zdGF0ZSAhPT0gJ3BsYXlpbmcnICkgcmV0dXJuO1xuXG4gIC8vIGRlZmF1bHQgdG8gMyBzZWNvbmRzXG4gIGxldCB0aW1lID0gdHlwZW9mIHRoaXMuYXV0b1BsYXkgPT0gJ251bWJlcicgPyB0aGlzLmF1dG9QbGF5IDogMzAwMDtcbiAgLy8gSEFDSzogcmVzZXQgdGlja3MgaWYgc3RvcHBlZCBhbmQgc3RhcnRlZCB3aXRoaW4gaW50ZXJ2YWxcbiAgdGhpcy5jbGVhcigpO1xuICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KCAoKSA9PiB7XG4gICAgdGhpcy5vblRpY2soKTtcbiAgICB0aGlzLnRpY2soKTtcbiAgfSwgdGltZSApO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc3RhdGUgPSAnc3RvcHBlZCc7XG4gIHRoaXMuY2xlYXIoKTtcbiAgLy8gcmVtb3ZlIHZpc2liaWxpdHkgY2hhbmdlIGV2ZW50XG4gIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICd2aXNpYmlsaXR5Y2hhbmdlJywgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UgKTtcbn07XG5cblBsYXllci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgY2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVvdXQgKTtcbn07XG5cblBsYXllci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnN0YXRlID09PSAncGxheWluZycgKSB7XG4gICAgdGhpcy5zdGF0ZSA9ICdwYXVzZWQnO1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgfVxufTtcblxuUGxheWVyLnByb3RvdHlwZS51bnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlLXN0YXJ0IHBsYXkgaWYgcGF1c2VkXG4gIGlmICggdGhpcy5zdGF0ZSA9PT0gJ3BhdXNlZCcgKSB0aGlzLnBsYXkoKTtcbn07XG5cbi8vIHBhdXNlIGlmIHBhZ2UgdmlzaWJpbGl0eSBpcyBoaWRkZW4sIHVucGF1c2UgaWYgdmlzaWJsZVxuUGxheWVyLnByb3RvdHlwZS52aXNpYmlsaXR5Q2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gIGxldCBpc1BhZ2VIaWRkZW4gPSBkb2N1bWVudC5oaWRkZW47XG4gIHRoaXNbIGlzUGFnZUhpZGRlbiA/ICdwYXVzZScgOiAndW5wYXVzZScgXSgpO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS52aXNpYmlsaXR5UGxheSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXkoKTtcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eVBsYXkgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZsaWNraXR5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbk9iamVjdC5hc3NpZ24oIEZsaWNraXR5LmRlZmF1bHRzLCB7XG4gIHBhdXNlQXV0b1BsYXlPbkhvdmVyOiB0cnVlLFxufSApO1xuXG5GbGlja2l0eS5jcmVhdGUucGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyID0gbmV3IFBsYXllciggdGhpcy5vcHRpb25zLmF1dG9QbGF5LCAoKSA9PiB7XG4gICAgdGhpcy5uZXh0KCB0cnVlICk7XG4gIH0gKTtcblxuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmFjdGl2YXRlUGxheWVyICk7XG4gIHRoaXMub24oICd1aUNoYW5nZScsIHRoaXMuc3RvcFBsYXllciApO1xuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCB0aGlzLnN0b3BQbGF5ZXIgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQbGF5ZXIgKTtcbn07XG5cbmxldCBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8uYWN0aXZhdGVQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmF1dG9QbGF5ICkgcmV0dXJuO1xuXG4gIHRoaXMucGxheWVyLnBsYXkoKTtcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZWVudGVyJywgdGhpcyApO1xufTtcblxuLy8gUGxheWVyIEFQSSwgZG9uJ3QgaGF0ZSB0aGUgLi4uIHRoYW5rcyBJIGtub3cgd2hlcmUgdGhlIGRvb3IgaXNcblxucHJvdG8ucGxheVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci5wbGF5KCk7XG59O1xuXG5wcm90by5zdG9wUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnN0b3AoKTtcbn07XG5cbnByb3RvLnBhdXNlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnBhdXNlKCk7XG59O1xuXG5wcm90by51bnBhdXNlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnVucGF1c2UoKTtcbn07XG5cbnByb3RvLmRlYWN0aXZhdGVQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIuc3RvcCgpO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlZW50ZXInLCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLSBtb3VzZWVudGVyL2xlYXZlIC0tLS0tIC8vXG5cbi8vIHBhdXNlIGF1dG8tcGxheSBvbiBob3ZlclxucHJvdG8ub25tb3VzZWVudGVyID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5wYXVzZUF1dG9QbGF5T25Ib3ZlciApIHJldHVybjtcblxuICB0aGlzLnBsYXllci5wYXVzZSgpO1xuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbGVhdmUnLCB0aGlzICk7XG59O1xuXG4vLyByZXN1bWUgYXV0by1wbGF5IG9uIGhvdmVyIG9mZlxucHJvdG8ub25tb3VzZWxlYXZlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnVucGF1c2UoKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZWxlYXZlJywgdGhpcyApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbkZsaWNraXR5LlBsYXllciA9IFBsYXllcjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcblxufSx7XCIuL2NvcmVcIjo2fV0sMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gcHJldi9uZXh0IGJ1dHRvbnNcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggcmVxdWlyZSgnLi9jb3JlJykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoIHdpbmRvdy5GbGlja2l0eSApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiBmYWN0b3J5KCBGbGlja2l0eSApIHtcblxuY29uc3Qgc3ZnVVJJID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUHJldk5leHRCdXR0b24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gUHJldk5leHRCdXR0b24oIGluY3JlbWVudCwgZGlyZWN0aW9uLCBhcnJvd1NoYXBlICkge1xuICB0aGlzLmluY3JlbWVudCA9IGluY3JlbWVudDtcbiAgdGhpcy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gIHRoaXMuaXNQcmV2aW91cyA9IGluY3JlbWVudCA9PT0gJ3ByZXZpb3VzJztcbiAgdGhpcy5pc0xlZnQgPSBkaXJlY3Rpb24gPT09ICdsZWZ0JztcbiAgdGhpcy5fY3JlYXRlKCBhcnJvd1NoYXBlICk7XG59XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5fY3JlYXRlID0gZnVuY3Rpb24oIGFycm93U2hhcGUgKSB7XG4gIC8vIHByb3BlcnRpZXNcbiAgbGV0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgZWxlbWVudC5jbGFzc05hbWUgPSBgZmxpY2tpdHktYnV0dG9uIGZsaWNraXR5LXByZXYtbmV4dC1idXR0b24gJHt0aGlzLmluY3JlbWVudH1gO1xuICBsZXQgbGFiZWwgPSB0aGlzLmlzUHJldmlvdXMgPyAnUHJldmlvdXMnIDogJ05leHQnO1xuICAvLyBwcmV2ZW50IGJ1dHRvbiBmcm9tIHN1Ym1pdHRpbmcgZm9ybSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTA4MzYwNzYvMTgyMTgzXG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKCAndHlwZScsICdidXR0b24nICk7XG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKCAnYXJpYS1sYWJlbCcsIGxhYmVsICk7XG4gIC8vIGluaXQgYXMgZGlzYWJsZWRcbiAgdGhpcy5kaXNhYmxlKCk7XG4gIC8vIGNyZWF0ZSBhcnJvd1xuICBsZXQgc3ZnID0gdGhpcy5jcmVhdGVTVkcoIGxhYmVsLCBhcnJvd1NoYXBlICk7XG4gIGVsZW1lbnQuYXBwZW5kKCBzdmcgKTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5jcmVhdGVTVkcgPSBmdW5jdGlvbiggbGFiZWwsIGFycm93U2hhcGUgKSB7XG4gIGxldCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z1VSSSwgJ3N2ZycgKTtcbiAgc3ZnLnNldEF0dHJpYnV0ZSggJ2NsYXNzJywgJ2ZsaWNraXR5LWJ1dHRvbi1pY29uJyApO1xuICBzdmcuc2V0QXR0cmlidXRlKCAndmlld0JveCcsICcwIDAgMTAwIDEwMCcgKTtcbiAgLy8gYWRkIHRpdGxlICMxMTg5XG4gIGxldCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggc3ZnVVJJLCAndGl0bGUnICk7XG4gIHRpdGxlLmFwcGVuZCggbGFiZWwgKTtcbiAgLy8gYWRkIHBhdGhcbiAgbGV0IHBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z1VSSSwgJ3BhdGgnICk7XG4gIGxldCBwYXRoTW92ZW1lbnRzID0gZ2V0QXJyb3dNb3ZlbWVudHMoIGFycm93U2hhcGUgKTtcbiAgcGF0aC5zZXRBdHRyaWJ1dGUoICdkJywgcGF0aE1vdmVtZW50cyApO1xuICBwYXRoLnNldEF0dHJpYnV0ZSggJ2NsYXNzJywgJ2Fycm93JyApO1xuICAvLyByb3RhdGUgYXJyb3dcbiAgaWYgKCAhdGhpcy5pc0xlZnQgKSB7XG4gICAgcGF0aC5zZXRBdHRyaWJ1dGUoICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDEwMCwgMTAwKSByb3RhdGUoMTgwKScgKTtcbiAgfVxuICBzdmcuYXBwZW5kKCB0aXRsZSwgcGF0aCApO1xuICByZXR1cm4gc3ZnO1xufTtcblxuLy8gZ2V0IFNWRyBwYXRoIG1vdm1lbWVudFxuZnVuY3Rpb24gZ2V0QXJyb3dNb3ZlbWVudHMoIHNoYXBlICkge1xuICAvLyB1c2Ugc2hhcGUgYXMgbW92ZW1lbnQgaWYgc3RyaW5nXG4gIGlmICggdHlwZW9mIHNoYXBlID09ICdzdHJpbmcnICkgcmV0dXJuIHNoYXBlO1xuXG4gIGxldCB7IHgwLCB4MSwgeDIsIHgzLCB5MSwgeTIgfSA9IHNoYXBlO1xuXG4gIC8vIGNyZWF0ZSBtb3ZlbWVudCBzdHJpbmdcbiAgcmV0dXJuIGBNICR7eDB9LCA1MFxuICAgIEwgJHt4MX0sICR7eTEgKyA1MH1cbiAgICBMICR7eDJ9LCAke3kyICsgNTB9XG4gICAgTCAke3gzfSwgNTBcbiAgICBMICR7eDJ9LCAkezUwIC0geTJ9XG4gICAgTCAke3gxfSwgJHs1MCAtIHkxfVxuICAgIFpgO1xufVxuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSggJ2Rpc2FibGVkJywgdHJ1ZSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbk9iamVjdC5hc3NpZ24oIEZsaWNraXR5LmRlZmF1bHRzLCB7XG4gIHByZXZOZXh0QnV0dG9uczogdHJ1ZSxcbiAgYXJyb3dTaGFwZToge1xuICAgIHgwOiAxMCxcbiAgICB4MTogNjAsIHkxOiA1MCxcbiAgICB4MjogNzAsIHkyOiA0MCxcbiAgICB4MzogMzAsXG4gIH0sXG59ICk7XG5cbkZsaWNraXR5LmNyZWF0ZS5wcmV2TmV4dEJ1dHRvbnMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLnByZXZOZXh0QnV0dG9ucyApIHJldHVybjtcblxuICBsZXQgeyByaWdodFRvTGVmdCwgYXJyb3dTaGFwZSB9ID0gdGhpcy5vcHRpb25zO1xuICBsZXQgcHJldkRpcmVjdGlvbiA9IHJpZ2h0VG9MZWZ0ID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgbGV0IG5leHREaXJlY3Rpb24gPSByaWdodFRvTGVmdCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIHRoaXMucHJldkJ1dHRvbiA9IG5ldyBQcmV2TmV4dEJ1dHRvbiggJ3ByZXZpb3VzJywgcHJldkRpcmVjdGlvbiwgYXJyb3dTaGFwZSApO1xuICB0aGlzLm5leHRCdXR0b24gPSBuZXcgUHJldk5leHRCdXR0b24oICduZXh0JywgbmV4dERpcmVjdGlvbiwgYXJyb3dTaGFwZSApO1xuICB0aGlzLmZvY3VzYWJsZUVsZW1zLnB1c2goIHRoaXMucHJldkJ1dHRvbi5lbGVtZW50ICk7XG4gIHRoaXMuZm9jdXNhYmxlRWxlbXMucHVzaCggdGhpcy5uZXh0QnV0dG9uLmVsZW1lbnQgKTtcblxuICB0aGlzLmhhbmRsZVByZXZCdXR0b25DbGljayA9ICgpID0+IHtcbiAgICB0aGlzLnVpQ2hhbmdlKCk7XG4gICAgdGhpcy5wcmV2aW91cygpO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlTmV4dEJ1dHRvbkNsaWNrID0gKCkgPT4ge1xuICAgIHRoaXMudWlDaGFuZ2UoKTtcbiAgICB0aGlzLm5leHQoKTtcbiAgfTtcblxuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmFjdGl2YXRlUHJldk5leHRCdXR0b25zICk7XG4gIHRoaXMub24oICdzZWxlY3QnLCB0aGlzLnVwZGF0ZVByZXZOZXh0QnV0dG9ucyApO1xufTtcblxubGV0IHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG5wcm90by51cGRhdGVQcmV2TmV4dEJ1dHRvbnMgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGxhc3RJbmRleCA9IHRoaXMuc2xpZGVzLmxlbmd0aCA/IHRoaXMuc2xpZGVzLmxlbmd0aCAtIDEgOiAwO1xuICB0aGlzLnVwZGF0ZVByZXZOZXh0QnV0dG9uKCB0aGlzLnByZXZCdXR0b24sIDAgKTtcbiAgdGhpcy51cGRhdGVQcmV2TmV4dEJ1dHRvbiggdGhpcy5uZXh0QnV0dG9uLCBsYXN0SW5kZXggKTtcbn07XG5cbnByb3RvLnVwZGF0ZVByZXZOZXh0QnV0dG9uID0gZnVuY3Rpb24oIGJ1dHRvbiwgZGlzYWJsZWRJbmRleCApIHtcbiAgLy8gZW5hYmxlIGlzIHdyYXBBcm91bmQgYW5kIGF0IGxlYXN0IDIgc2xpZGVzXG4gIGlmICggdGhpcy5pc1dyYXBwaW5nICYmIHRoaXMuc2xpZGVzLmxlbmd0aCA+IDEgKSB7XG4gICAgYnV0dG9uLmVuYWJsZSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpc0VuYWJsZWQgPSB0aGlzLnNlbGVjdGVkSW5kZXggIT09IGRpc2FibGVkSW5kZXg7XG4gIGJ1dHRvblsgaXNFbmFibGVkID8gJ2VuYWJsZScgOiAnZGlzYWJsZScgXSgpO1xuICAvLyBpZiBkaXNhYmxpbmcgYnV0dG9uIHRoYXQgaXMgZm9jdXNlZCxcbiAgLy8gc2hpZnQgZm9jdXMgdG8gZWxlbWVudCB0byBtYWludGFpbiBrZXlib2FyZCBhY2Nlc3NpYmlsaXR5XG4gIGxldCBpc0Rpc2FibGVkRm9jdXNlZCA9ICFpc0VuYWJsZWQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gYnV0dG9uLmVsZW1lbnQ7XG4gIGlmICggaXNEaXNhYmxlZEZvY3VzZWQgKSB0aGlzLmZvY3VzKCk7XG59O1xuXG5wcm90by5hY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByZXZCdXR0b24uZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzLmhhbmRsZVByZXZCdXR0b25DbGljayApO1xuICB0aGlzLm5leHRCdXR0b24uZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzLmhhbmRsZU5leHRCdXR0b25DbGljayApO1xuICB0aGlzLmVsZW1lbnQuYXBwZW5kKCB0aGlzLnByZXZCdXR0b24uZWxlbWVudCwgdGhpcy5uZXh0QnV0dG9uLmVsZW1lbnQgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcbn07XG5cbnByb3RvLmRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcmV2QnV0dG9uLmVsZW1lbnQucmVtb3ZlKCk7XG4gIHRoaXMubmV4dEJ1dHRvbi5lbGVtZW50LnJlbW92ZSgpO1xuICB0aGlzLnByZXZCdXR0b24uZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzLmhhbmRsZVByZXZCdXR0b25DbGljayApO1xuICB0aGlzLm5leHRCdXR0b24uZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzLmhhbmRsZU5leHRCdXR0b25DbGljayApO1xuICB0aGlzLm9mZiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5GbGlja2l0eS5QcmV2TmV4dEJ1dHRvbiA9IFByZXZOZXh0QnV0dG9uO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuXG59LHtcIi4vY29yZVwiOjZ9XSwxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBzbGlkZVxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHkgfHwge307XG4gICAgd2luZG93LkZsaWNraXR5LlNsaWRlID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiBmYWN0b3J5KCkge1xuXG5mdW5jdGlvbiBTbGlkZSggYmVnaW5NYXJnaW4sIGVuZE1hcmdpbiwgY2VsbEFsaWduICkge1xuICB0aGlzLmJlZ2luTWFyZ2luID0gYmVnaW5NYXJnaW47XG4gIHRoaXMuZW5kTWFyZ2luID0gZW5kTWFyZ2luO1xuICB0aGlzLmNlbGxBbGlnbiA9IGNlbGxBbGlnbjtcbiAgdGhpcy5jZWxscyA9IFtdO1xuICB0aGlzLm91dGVyV2lkdGggPSAwO1xuICB0aGlzLmhlaWdodCA9IDA7XG59XG5cbmxldCBwcm90byA9IFNsaWRlLnByb3RvdHlwZTtcblxucHJvdG8uYWRkQ2VsbCA9IGZ1bmN0aW9uKCBjZWxsICkge1xuICB0aGlzLmNlbGxzLnB1c2goIGNlbGwgKTtcbiAgdGhpcy5vdXRlcldpZHRoICs9IGNlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICB0aGlzLmhlaWdodCA9IE1hdGgubWF4KCBjZWxsLnNpemUub3V0ZXJIZWlnaHQsIHRoaXMuaGVpZ2h0ICk7XG4gIC8vIGZpcnN0IGNlbGwgc3R1ZmZcbiAgaWYgKCB0aGlzLmNlbGxzLmxlbmd0aCA9PT0gMSApIHtcbiAgICB0aGlzLnggPSBjZWxsLng7IC8vIHggY29tZXMgZnJvbSBmaXJzdCBjZWxsXG4gICAgdGhpcy5maXJzdE1hcmdpbiA9IGNlbGwuc2l6ZVsgdGhpcy5iZWdpbk1hcmdpbiBdO1xuICB9XG59O1xuXG5wcm90by51cGRhdGVUYXJnZXQgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGxhc3RDZWxsID0gdGhpcy5nZXRMYXN0Q2VsbCgpO1xuICBsZXQgbGFzdE1hcmdpbiA9IGxhc3RDZWxsID8gbGFzdENlbGwuc2l6ZVsgdGhpcy5lbmRNYXJnaW4gXSA6IDA7XG4gIGxldCBzbGlkZVdpZHRoID0gdGhpcy5vdXRlcldpZHRoIC0gKCB0aGlzLmZpcnN0TWFyZ2luICsgbGFzdE1hcmdpbiApO1xuICB0aGlzLnRhcmdldCA9IHRoaXMueCArIHRoaXMuZmlyc3RNYXJnaW4gKyBzbGlkZVdpZHRoICogdGhpcy5jZWxsQWxpZ247XG59O1xuXG5wcm90by5nZXRMYXN0Q2VsbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jZWxsc1sgdGhpcy5jZWxscy5sZW5ndGggLSAxIF07XG59O1xuXG5wcm90by5zZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jZWxscy5mb3JFYWNoKCAoIGNlbGwgKSA9PiBjZWxsLnNlbGVjdCgpICk7XG59O1xuXG5wcm90by51bnNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNlbGxzLmZvckVhY2goICggY2VsbCApID0+IGNlbGwudW5zZWxlY3QoKSApO1xufTtcblxucHJvdG8uZ2V0Q2VsbEVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNlbGxzLm1hcCggKCBjZWxsICkgPT4gY2VsbC5lbGVtZW50ICk7XG59O1xuXG5yZXR1cm4gU2xpZGU7XG5cbn0gKSApO1xuXG59LHt9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiFcbiAqIEluZmluaXRlIFNjcm9sbCB2Mi4wLjRcbiAqIG1lYXN1cmUgc2l6ZSBvZiBlbGVtZW50c1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmdldFNpemUgPSBmYWN0b3J5KCk7XG4gIH1cblxufSApKCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoKSB7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZ2V0IGEgbnVtYmVyIGZyb20gYSBzdHJpbmcsIG5vdCBhIHBlcmNlbnRhZ2VcbmZ1bmN0aW9uIGdldFN0eWxlU2l6ZSggdmFsdWUgKSB7XG4gIGxldCBudW0gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuICAvLyBub3QgYSBwZXJjZW50IGxpa2UgJzEwMCUnLCBhbmQgYSBudW1iZXJcbiAgbGV0IGlzVmFsaWQgPSB2YWx1ZS5pbmRleE9mKCclJykgPT0gLTEgJiYgIWlzTmFOKCBudW0gKTtcbiAgcmV0dXJuIGlzVmFsaWQgJiYgbnVtO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxubGV0IG1lYXN1cmVtZW50cyA9IFtcbiAgJ3BhZGRpbmdMZWZ0JyxcbiAgJ3BhZGRpbmdSaWdodCcsXG4gICdwYWRkaW5nVG9wJyxcbiAgJ3BhZGRpbmdCb3R0b20nLFxuICAnbWFyZ2luTGVmdCcsXG4gICdtYXJnaW5SaWdodCcsXG4gICdtYXJnaW5Ub3AnLFxuICAnbWFyZ2luQm90dG9tJyxcbiAgJ2JvcmRlckxlZnRXaWR0aCcsXG4gICdib3JkZXJSaWdodFdpZHRoJyxcbiAgJ2JvcmRlclRvcFdpZHRoJyxcbiAgJ2JvcmRlckJvdHRvbVdpZHRoJyxcbl07XG5cbmxldCBtZWFzdXJlbWVudHNMZW5ndGggPSBtZWFzdXJlbWVudHMubGVuZ3RoO1xuXG5mdW5jdGlvbiBnZXRaZXJvU2l6ZSgpIHtcbiAgbGV0IHNpemUgPSB7XG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIGlubmVyV2lkdGg6IDAsXG4gICAgaW5uZXJIZWlnaHQ6IDAsXG4gICAgb3V0ZXJXaWR0aDogMCxcbiAgICBvdXRlckhlaWdodDogMCxcbiAgfTtcbiAgbWVhc3VyZW1lbnRzLmZvckVhY2goICggbWVhc3VyZW1lbnQgKSA9PiB7XG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9IDA7XG4gIH0gKTtcbiAgcmV0dXJuIHNpemU7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldFNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gZ2V0U2l6ZSggZWxlbSApIHtcbiAgLy8gdXNlIHF1ZXJ5U2VsZXRvciBpZiBlbGVtIGlzIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcblxuICAvLyBkbyBub3QgcHJvY2VlZCBvbiBub24tb2JqZWN0c1xuICBsZXQgaXNFbGVtZW50ID0gZWxlbSAmJiB0eXBlb2YgZWxlbSA9PSAnb2JqZWN0JyAmJiBlbGVtLm5vZGVUeXBlO1xuICBpZiAoICFpc0VsZW1lbnQgKSByZXR1cm47XG5cbiAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXG4gIC8vIGlmIGhpZGRlbiwgZXZlcnl0aGluZyBpcyAwXG4gIGlmICggc3R5bGUuZGlzcGxheSA9PSAnbm9uZScgKSByZXR1cm4gZ2V0WmVyb1NpemUoKTtcblxuICBsZXQgc2l6ZSA9IHt9O1xuICBzaXplLndpZHRoID0gZWxlbS5vZmZzZXRXaWR0aDtcbiAgc2l6ZS5oZWlnaHQgPSBlbGVtLm9mZnNldEhlaWdodDtcblxuICBsZXQgaXNCb3JkZXJCb3ggPSBzaXplLmlzQm9yZGVyQm94ID0gc3R5bGUuYm94U2l6aW5nID09ICdib3JkZXItYm94JztcblxuICAvLyBnZXQgYWxsIG1lYXN1cmVtZW50c1xuICBtZWFzdXJlbWVudHMuZm9yRWFjaCggKCBtZWFzdXJlbWVudCApID0+IHtcbiAgICBsZXQgdmFsdWUgPSBzdHlsZVsgbWVhc3VyZW1lbnQgXTtcbiAgICBsZXQgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcbiAgICAvLyBhbnkgJ2F1dG8nLCAnbWVkaXVtJyB2YWx1ZSB3aWxsIGJlIDBcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gIWlzTmFOKCBudW0gKSA/IG51bSA6IDA7XG4gIH0gKTtcblxuICBsZXQgcGFkZGluZ1dpZHRoID0gc2l6ZS5wYWRkaW5nTGVmdCArIHNpemUucGFkZGluZ1JpZ2h0O1xuICBsZXQgcGFkZGluZ0hlaWdodCA9IHNpemUucGFkZGluZ1RvcCArIHNpemUucGFkZGluZ0JvdHRvbTtcbiAgbGV0IG1hcmdpbldpZHRoID0gc2l6ZS5tYXJnaW5MZWZ0ICsgc2l6ZS5tYXJnaW5SaWdodDtcbiAgbGV0IG1hcmdpbkhlaWdodCA9IHNpemUubWFyZ2luVG9wICsgc2l6ZS5tYXJnaW5Cb3R0b207XG4gIGxldCBib3JkZXJXaWR0aCA9IHNpemUuYm9yZGVyTGVmdFdpZHRoICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoO1xuICBsZXQgYm9yZGVySGVpZ2h0ID0gc2l6ZS5ib3JkZXJUb3BXaWR0aCArIHNpemUuYm9yZGVyQm90dG9tV2lkdGg7XG5cbiAgLy8gb3ZlcndyaXRlIHdpZHRoIGFuZCBoZWlnaHQgaWYgd2UgY2FuIGdldCBpdCBmcm9tIHN0eWxlXG4gIGxldCBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xuICBpZiAoIHN0eWxlV2lkdGggIT09IGZhbHNlICkge1xuICAgIHNpemUud2lkdGggPSBzdHlsZVdpZHRoICtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcbiAgICAgICggaXNCb3JkZXJCb3ggPyAwIDogcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcbiAgfVxuXG4gIGxldCBzdHlsZUhlaWdodCA9IGdldFN0eWxlU2l6ZSggc3R5bGUuaGVpZ2h0ICk7XG4gIGlmICggc3R5bGVIZWlnaHQgIT09IGZhbHNlICkge1xuICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xuICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxuICAgICAgKCBpc0JvcmRlckJveCA/IDAgOiBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XG4gIH1cblxuICBzaXplLmlubmVyV2lkdGggPSBzaXplLndpZHRoIC0gKCBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xuICBzaXplLmlubmVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSAoIHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcblxuICBzaXplLm91dGVyV2lkdGggPSBzaXplLndpZHRoICsgbWFyZ2luV2lkdGg7XG4gIHNpemUub3V0ZXJIZWlnaHQgPSBzaXplLmhlaWdodCArIG1hcmdpbkhlaWdodDtcblxuICByZXR1cm4gc2l6ZTtcbn1cblxucmV0dXJuIGdldFNpemU7XG5cbn0gKTtcblxufSx7fV0sMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyohXG4gKiBpbWFnZXNMb2FkZWQgdjUuMC4wXG4gKiBKYXZhU2NyaXB0IGlzIGFsbCBsaWtlIFwiWW91IGltYWdlcyBhcmUgZG9uZSB5ZXQgb3Igd2hhdD9cIlxuICogTUlUIExpY2Vuc2VcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIHdpbmRvdywgcmVxdWlyZSgnZXYtZW1pdHRlcicpICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuaW1hZ2VzTG9hZGVkID0gZmFjdG9yeSggd2luZG93LCB3aW5kb3cuRXZFbWl0dGVyICk7XG4gIH1cblxufSApKCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsXG4gICAgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIgKSB7XG5cbmxldCAkID0gd2luZG93LmpRdWVyeTtcbmxldCBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gdHVybiBlbGVtZW50IG9yIG5vZGVMaXN0IGludG8gYW4gYXJyYXlcbmZ1bmN0aW9uIG1ha2VBcnJheSggb2JqICkge1xuICAvLyB1c2Ugb2JqZWN0IGlmIGFscmVhZHkgYW4gYXJyYXlcbiAgaWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHJldHVybiBvYmo7XG5cbiAgbGV0IGlzQXJyYXlMaWtlID0gdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmxlbmd0aCA9PSAnbnVtYmVyJztcbiAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxuICBpZiAoIGlzQXJyYXlMaWtlICkgcmV0dXJuIFsgLi4ub2JqIF07XG5cbiAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XG4gIHJldHVybiBbIG9iaiBdO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBpbWFnZXNMb2FkZWQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBAcGFyYW0ge1tBcnJheSwgRWxlbWVudCwgTm9kZUxpc3QsIFN0cmluZ119IGVsZW1cbiAqIEBwYXJhbSB7W09iamVjdCwgRnVuY3Rpb25dfSBvcHRpb25zIC0gaWYgZnVuY3Rpb24sIHVzZSBhcyBjYWxsYmFja1xuICogQHBhcmFtIHtGdW5jdGlvbn0gb25BbHdheXMgLSBjYWxsYmFjayBmdW5jdGlvblxuICogQHJldHVybnMge0ltYWdlc0xvYWRlZH1cbiAqL1xuZnVuY3Rpb24gSW1hZ2VzTG9hZGVkKCBlbGVtLCBvcHRpb25zLCBvbkFsd2F5cyApIHtcbiAgLy8gY29lcmNlIEltYWdlc0xvYWRlZCgpIHdpdGhvdXQgbmV3LCB0byBiZSBuZXcgSW1hZ2VzTG9hZGVkKClcbiAgaWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgSW1hZ2VzTG9hZGVkICkgKSB7XG4gICAgcmV0dXJuIG5ldyBJbWFnZXNMb2FkZWQoIGVsZW0sIG9wdGlvbnMsIG9uQWx3YXlzICk7XG4gIH1cbiAgLy8gdXNlIGVsZW0gYXMgc2VsZWN0b3Igc3RyaW5nXG4gIGxldCBxdWVyeUVsZW0gPSBlbGVtO1xuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xuICAgIHF1ZXJ5RWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGVsZW0gKTtcbiAgfVxuICAvLyBiYWlsIGlmIGJhZCBlbGVtZW50XG4gIGlmICggIXF1ZXJ5RWxlbSApIHtcbiAgICBjb25zb2xlLmVycm9yKGBCYWQgZWxlbWVudCBmb3IgaW1hZ2VzTG9hZGVkICR7cXVlcnlFbGVtIHx8IGVsZW19YCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5lbGVtZW50cyA9IG1ha2VBcnJheSggcXVlcnlFbGVtICk7XG4gIHRoaXMub3B0aW9ucyA9IHt9O1xuICAvLyBzaGlmdCBhcmd1bWVudHMgaWYgbm8gb3B0aW9ucyBzZXRcbiAgaWYgKCB0eXBlb2Ygb3B0aW9ucyA9PSAnZnVuY3Rpb24nICkge1xuICAgIG9uQWx3YXlzID0gb3B0aW9ucztcbiAgfSBlbHNlIHtcbiAgICBPYmplY3QuYXNzaWduKCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMgKTtcbiAgfVxuXG4gIGlmICggb25BbHdheXMgKSB0aGlzLm9uKCAnYWx3YXlzJywgb25BbHdheXMgKTtcblxuICB0aGlzLmdldEltYWdlcygpO1xuICAvLyBhZGQgalF1ZXJ5IERlZmVycmVkIG9iamVjdFxuICBpZiAoICQgKSB0aGlzLmpxRGVmZXJyZWQgPSBuZXcgJC5EZWZlcnJlZCgpO1xuXG4gIC8vIEhBQ0sgY2hlY2sgYXN5bmMgdG8gYWxsb3cgdGltZSB0byBiaW5kIGxpc3RlbmVyc1xuICBzZXRUaW1lb3V0KCB0aGlzLmNoZWNrLmJpbmQoIHRoaXMgKSApO1xufVxuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmdldEltYWdlcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltYWdlcyA9IFtdO1xuXG4gIC8vIGZpbHRlciAmIGZpbmQgaXRlbXMgaWYgd2UgaGF2ZSBhbiBpdGVtIHNlbGVjdG9yXG4gIHRoaXMuZWxlbWVudHMuZm9yRWFjaCggdGhpcy5hZGRFbGVtZW50SW1hZ2VzLCB0aGlzICk7XG59O1xuXG5jb25zdCBlbGVtZW50Tm9kZVR5cGVzID0gWyAxLCA5LCAxMSBdO1xuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gZWxlbVxuICovXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEVsZW1lbnRJbWFnZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgLy8gZmlsdGVyIHNpYmxpbmdzXG4gIGlmICggZWxlbS5ub2RlTmFtZSA9PT0gJ0lNRycgKSB7XG4gICAgdGhpcy5hZGRJbWFnZSggZWxlbSApO1xuICB9XG4gIC8vIGdldCBiYWNrZ3JvdW5kIGltYWdlIG9uIGVsZW1lbnRcbiAgaWYgKCB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZCA9PT0gdHJ1ZSApIHtcbiAgICB0aGlzLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzKCBlbGVtICk7XG4gIH1cblxuICAvLyBmaW5kIGNoaWxkcmVuXG4gIC8vIG5vIG5vbi1lbGVtZW50IG5vZGVzLCAjMTQzXG4gIGxldCB7IG5vZGVUeXBlIH0gPSBlbGVtO1xuICBpZiAoICFub2RlVHlwZSB8fCAhZWxlbWVudE5vZGVUeXBlcy5pbmNsdWRlcyggbm9kZVR5cGUgKSApIHJldHVybjtcblxuICBsZXQgY2hpbGRJbWdzID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKTtcbiAgLy8gY29uY2F0IGNoaWxkRWxlbXMgdG8gZmlsdGVyRm91bmQgYXJyYXlcbiAgZm9yICggbGV0IGltZyBvZiBjaGlsZEltZ3MgKSB7XG4gICAgdGhpcy5hZGRJbWFnZSggaW1nICk7XG4gIH1cblxuICAvLyBnZXQgY2hpbGQgYmFja2dyb3VuZCBpbWFnZXNcbiAgaWYgKCB0eXBlb2YgdGhpcy5vcHRpb25zLmJhY2tncm91bmQgPT0gJ3N0cmluZycgKSB7XG4gICAgbGV0IGNoaWxkcmVuID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZCApO1xuICAgIGZvciAoIGxldCBjaGlsZCBvZiBjaGlsZHJlbiApIHtcbiAgICAgIHRoaXMuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMoIGNoaWxkICk7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCByZVVSTCA9IC91cmxcXCgoWydcIl0pPyguKj8pXFwxXFwpL2dpO1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGxldCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcbiAgLy8gRmlyZWZveCByZXR1cm5zIG51bGwgaWYgaW4gYSBoaWRkZW4gaWZyYW1lIGh0dHBzOi8vYnVnemlsLmxhLzU0ODM5N1xuICBpZiAoICFzdHlsZSApIHJldHVybjtcblxuICAvLyBnZXQgdXJsIGluc2lkZSB1cmwoXCIuLi5cIilcbiAgbGV0IG1hdGNoZXMgPSByZVVSTC5leGVjKCBzdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgKTtcbiAgd2hpbGUgKCBtYXRjaGVzICE9PSBudWxsICkge1xuICAgIGxldCB1cmwgPSBtYXRjaGVzICYmIG1hdGNoZXNbMl07XG4gICAgaWYgKCB1cmwgKSB7XG4gICAgICB0aGlzLmFkZEJhY2tncm91bmQoIHVybCwgZWxlbSApO1xuICAgIH1cbiAgICBtYXRjaGVzID0gcmVVUkwuZXhlYyggc3R5bGUuYmFja2dyb3VuZEltYWdlICk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtJbWFnZX0gaW1nXG4gKi9cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkSW1hZ2UgPSBmdW5jdGlvbiggaW1nICkge1xuICBsZXQgbG9hZGluZ0ltYWdlID0gbmV3IExvYWRpbmdJbWFnZSggaW1nICk7XG4gIHRoaXMuaW1hZ2VzLnB1c2goIGxvYWRpbmdJbWFnZSApO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRCYWNrZ3JvdW5kID0gZnVuY3Rpb24oIHVybCwgZWxlbSApIHtcbiAgbGV0IGJhY2tncm91bmQgPSBuZXcgQmFja2dyb3VuZCggdXJsLCBlbGVtICk7XG4gIHRoaXMuaW1hZ2VzLnB1c2goIGJhY2tncm91bmQgKTtcbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcm9ncmVzc2VkQ291bnQgPSAwO1xuICB0aGlzLmhhc0FueUJyb2tlbiA9IGZhbHNlO1xuICAvLyBjb21wbGV0ZSBpZiBubyBpbWFnZXNcbiAgaWYgKCAhdGhpcy5pbWFnZXMubGVuZ3RoICkge1xuICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1zdHlsZSAqL1xuICBsZXQgb25Qcm9ncmVzcyA9ICggaW1hZ2UsIGVsZW0sIG1lc3NhZ2UgKSA9PiB7XG4gICAgLy8gSEFDSyAtIENocm9tZSB0cmlnZ2VycyBldmVudCBiZWZvcmUgb2JqZWN0IHByb3BlcnRpZXMgaGF2ZSBjaGFuZ2VkLiAjODNcbiAgICBzZXRUaW1lb3V0KCAoKSA9PiB7XG4gICAgICB0aGlzLnByb2dyZXNzKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApO1xuICAgIH0gKTtcbiAgfTtcblxuICB0aGlzLmltYWdlcy5mb3JFYWNoKCBmdW5jdGlvbiggbG9hZGluZ0ltYWdlICkge1xuICAgIGxvYWRpbmdJbWFnZS5vbmNlKCAncHJvZ3Jlc3MnLCBvblByb2dyZXNzICk7XG4gICAgbG9hZGluZ0ltYWdlLmNoZWNrKCk7XG4gIH0gKTtcbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUucHJvZ3Jlc3MgPSBmdW5jdGlvbiggaW1hZ2UsIGVsZW0sIG1lc3NhZ2UgKSB7XG4gIHRoaXMucHJvZ3Jlc3NlZENvdW50Kys7XG4gIHRoaXMuaGFzQW55QnJva2VuID0gdGhpcy5oYXNBbnlCcm9rZW4gfHwgIWltYWdlLmlzTG9hZGVkO1xuICAvLyBwcm9ncmVzcyBldmVudFxuICB0aGlzLmVtaXRFdmVudCggJ3Byb2dyZXNzJywgWyB0aGlzLCBpbWFnZSwgZWxlbSBdICk7XG4gIGlmICggdGhpcy5qcURlZmVycmVkICYmIHRoaXMuanFEZWZlcnJlZC5ub3RpZnkgKSB7XG4gICAgdGhpcy5qcURlZmVycmVkLm5vdGlmeSggdGhpcywgaW1hZ2UgKTtcbiAgfVxuICAvLyBjaGVjayBpZiBjb21wbGV0ZWRcbiAgaWYgKCB0aGlzLnByb2dyZXNzZWRDb3VudCA9PT0gdGhpcy5pbWFnZXMubGVuZ3RoICkge1xuICAgIHRoaXMuY29tcGxldGUoKTtcbiAgfVxuXG4gIGlmICggdGhpcy5vcHRpb25zLmRlYnVnICYmIGNvbnNvbGUgKSB7XG4gICAgY29uc29sZS5sb2coIGBwcm9ncmVzczogJHttZXNzYWdlfWAsIGltYWdlLCBlbGVtICk7XG4gIH1cbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGV2ZW50TmFtZSA9IHRoaXMuaGFzQW55QnJva2VuID8gJ2ZhaWwnIDogJ2RvbmUnO1xuICB0aGlzLmlzQ29tcGxldGUgPSB0cnVlO1xuICB0aGlzLmVtaXRFdmVudCggZXZlbnROYW1lLCBbIHRoaXMgXSApO1xuICB0aGlzLmVtaXRFdmVudCggJ2Fsd2F5cycsIFsgdGhpcyBdICk7XG4gIGlmICggdGhpcy5qcURlZmVycmVkICkge1xuICAgIGxldCBqcU1ldGhvZCA9IHRoaXMuaGFzQW55QnJva2VuID8gJ3JlamVjdCcgOiAncmVzb2x2ZSc7XG4gICAgdGhpcy5qcURlZmVycmVkWyBqcU1ldGhvZCBdKCB0aGlzICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBMb2FkaW5nSW1hZ2UoIGltZyApIHtcbiAgdGhpcy5pbWcgPSBpbWc7XG59XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgLy8gSWYgY29tcGxldGUgaXMgdHJ1ZSBhbmQgYnJvd3NlciBzdXBwb3J0cyBuYXR1cmFsIHNpemVzLFxuICAvLyB0cnkgdG8gY2hlY2sgZm9yIGltYWdlIHN0YXR1cyBtYW51YWxseS5cbiAgbGV0IGlzQ29tcGxldGUgPSB0aGlzLmdldElzSW1hZ2VDb21wbGV0ZSgpO1xuICBpZiAoIGlzQ29tcGxldGUgKSB7XG4gICAgLy8gcmVwb3J0IGJhc2VkIG9uIG5hdHVyYWxXaWR0aFxuICAgIHRoaXMuY29uZmlybSggdGhpcy5pbWcubmF0dXJhbFdpZHRoICE9PSAwLCAnbmF0dXJhbFdpZHRoJyApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIElmIG5vbmUgb2YgdGhlIGNoZWNrcyBhYm92ZSBtYXRjaGVkLCBzaW11bGF0ZSBsb2FkaW5nIG9uIGRldGFjaGVkIGVsZW1lbnQuXG4gIHRoaXMucHJveHlJbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAvLyBhZGQgY3Jvc3NPcmlnaW4gYXR0cmlidXRlLiAjMjA0XG4gIGlmICggdGhpcy5pbWcuY3Jvc3NPcmlnaW4gKSB7XG4gICAgdGhpcy5wcm94eUltYWdlLmNyb3NzT3JpZ2luID0gdGhpcy5pbWcuY3Jvc3NPcmlnaW47XG4gIH1cbiAgdGhpcy5wcm94eUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICAvLyBiaW5kIHRvIGltYWdlIGFzIHdlbGwgZm9yIEZpcmVmb3guICMxOTFcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgdGhpcy5wcm94eUltYWdlLnNyYyA9IHRoaXMuaW1nLmN1cnJlbnRTcmMgfHwgdGhpcy5pbWcuc3JjO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5nZXRJc0ltYWdlQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gY2hlY2sgZm9yIG5vbi16ZXJvLCBub24tdW5kZWZpbmVkIG5hdHVyYWxXaWR0aFxuICAvLyBmaXhlcyBTYWZhcmkrSW5maW5pdGVTY3JvbGwrTWFzb25yeSBidWcgaW5maW5pdGUtc2Nyb2xsIzY3MVxuICByZXR1cm4gdGhpcy5pbWcuY29tcGxldGUgJiYgdGhpcy5pbWcubmF0dXJhbFdpZHRoO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5jb25maXJtID0gZnVuY3Rpb24oIGlzTG9hZGVkLCBtZXNzYWdlICkge1xuICB0aGlzLmlzTG9hZGVkID0gaXNMb2FkZWQ7XG4gIGxldCB7IHBhcmVudE5vZGUgfSA9IHRoaXMuaW1nO1xuICAvLyBlbWl0IHByb2dyZXNzIHdpdGggcGFyZW50IDxwaWN0dXJlPiBvciBzZWxmIDxpbWc+XG4gIGxldCBlbGVtID0gcGFyZW50Tm9kZS5ub2RlTmFtZSA9PT0gJ1BJQ1RVUkUnID8gcGFyZW50Tm9kZSA6IHRoaXMuaW1nO1xuICB0aGlzLmVtaXRFdmVudCggJ3Byb2dyZXNzJywgWyB0aGlzLCBlbGVtLCBtZXNzYWdlIF0gKTtcbn07XG5cbi8vIC0tLS0tIGV2ZW50cyAtLS0tLSAvL1xuXG4vLyB0cmlnZ2VyIHNwZWNpZmllZCBoYW5kbGVyIGZvciBldmVudCB0eXBlXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBsZXQgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY29uZmlybSggdHJ1ZSwgJ29ubG9hZCcgKTtcbiAgdGhpcy51bmJpbmRFdmVudHMoKTtcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNvbmZpcm0oIGZhbHNlLCAnb25lcnJvcicgKTtcbiAgdGhpcy51bmJpbmRFdmVudHMoKTtcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUudW5iaW5kRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucHJveHlJbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5wcm94eUltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEJhY2tncm91bmQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gQmFja2dyb3VuZCggdXJsLCBlbGVtZW50ICkge1xuICB0aGlzLnVybCA9IHVybDtcbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcbn1cblxuLy8gaW5oZXJpdCBMb2FkaW5nSW1hZ2UgcHJvdG90eXBlXG5CYWNrZ3JvdW5kLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExvYWRpbmdJbWFnZS5wcm90b3R5cGUgKTtcblxuQmFja2dyb3VuZC5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgdGhpcy5pbWcuc3JjID0gdGhpcy51cmw7XG4gIC8vIGNoZWNrIGlmIGltYWdlIGlzIGFscmVhZHkgY29tcGxldGVcbiAgbGV0IGlzQ29tcGxldGUgPSB0aGlzLmdldElzSW1hZ2VDb21wbGV0ZSgpO1xuICBpZiAoIGlzQ29tcGxldGUgKSB7XG4gICAgdGhpcy5jb25maXJtKCB0aGlzLmltZy5uYXR1cmFsV2lkdGggIT09IDAsICduYXR1cmFsV2lkdGgnICk7XG4gICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgfVxufTtcblxuQmFja2dyb3VuZC5wcm90b3R5cGUudW5iaW5kRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG59O1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS5jb25maXJtID0gZnVuY3Rpb24oIGlzTG9hZGVkLCBtZXNzYWdlICkge1xuICB0aGlzLmlzTG9hZGVkID0gaXNMb2FkZWQ7XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIHRoaXMuZWxlbWVudCwgbWVzc2FnZSBdICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBqUXVlcnkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuSW1hZ2VzTG9hZGVkLm1ha2VKUXVlcnlQbHVnaW4gPSBmdW5jdGlvbiggalF1ZXJ5ICkge1xuICBqUXVlcnkgPSBqUXVlcnkgfHwgd2luZG93LmpRdWVyeTtcbiAgaWYgKCAhalF1ZXJ5ICkgcmV0dXJuO1xuXG4gIC8vIHNldCBsb2NhbCB2YXJpYWJsZVxuICAkID0galF1ZXJ5O1xuICAvLyAkKCkuaW1hZ2VzTG9hZGVkKClcbiAgJC5mbi5pbWFnZXNMb2FkZWQgPSBmdW5jdGlvbiggb3B0aW9ucywgb25BbHdheXMgKSB7XG4gICAgbGV0IGluc3RhbmNlID0gbmV3IEltYWdlc0xvYWRlZCggdGhpcywgb3B0aW9ucywgb25BbHdheXMgKTtcbiAgICByZXR1cm4gaW5zdGFuY2UuanFEZWZlcnJlZC5wcm9taXNlKCAkKCB0aGlzICkgKTtcbiAgfTtcbn07XG4vLyB0cnkgbWFraW5nIHBsdWdpblxuSW1hZ2VzTG9hZGVkLm1ha2VKUXVlcnlQbHVnaW4oKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnJldHVybiBJbWFnZXNMb2FkZWQ7XG5cbn0gKTtcblxufSx7XCJldi1lbWl0dGVyXCI6MX1dLDE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbih3aW5kb3csIGZhY3RvcnkpIHtcblx0dmFyIGxhenlTaXplcyA9IGZhY3Rvcnkod2luZG93LCB3aW5kb3cuZG9jdW1lbnQsIERhdGUpO1xuXHR3aW5kb3cubGF6eVNpemVzID0gbGF6eVNpemVzO1xuXHRpZih0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKXtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGxhenlTaXplcztcblx0fVxufSh0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID9cbiAgICAgIHdpbmRvdyA6IHt9LCBcbi8qKlxuICogaW1wb3J0KFwiLi90eXBlcy9nbG9iYWxcIilcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KFwiLi90eXBlcy9sYXp5c2l6ZXMtY29uZmlnXCIpLkxhenlTaXplc0NvbmZpZ1BhcnRpYWwgfSBMYXp5U2l6ZXNDb25maWdQYXJ0aWFsXG4gKi9cbmZ1bmN0aW9uIGwod2luZG93LCBkb2N1bWVudCwgRGF0ZSkgeyAvLyBQYXNzIGluIHRoZSB3aW5kb3cgRGF0ZSBmdW5jdGlvbiBhbHNvIGZvciBTU1IgYmVjYXVzZSB0aGUgRGF0ZSBjbGFzcyBjYW4gYmUgbG9zdFxuXHQndXNlIHN0cmljdCc7XG5cdC8qanNoaW50IGVxbnVsbDp0cnVlICovXG5cblx0dmFyIGxhenlzaXplcyxcblx0XHQvKipcblx0XHQgKiBAdHlwZSB7IExhenlTaXplc0NvbmZpZ1BhcnRpYWwgfVxuXHRcdCAqL1xuXHRcdGxhenlTaXplc0NmZztcblxuXHQoZnVuY3Rpb24oKXtcblx0XHR2YXIgcHJvcDtcblxuXHRcdHZhciBsYXp5U2l6ZXNEZWZhdWx0cyA9IHtcblx0XHRcdGxhenlDbGFzczogJ2xhenlsb2FkJyxcblx0XHRcdGxvYWRlZENsYXNzOiAnbGF6eWxvYWRlZCcsXG5cdFx0XHRsb2FkaW5nQ2xhc3M6ICdsYXp5bG9hZGluZycsXG5cdFx0XHRwcmVsb2FkQ2xhc3M6ICdsYXp5cHJlbG9hZCcsXG5cdFx0XHRlcnJvckNsYXNzOiAnbGF6eWVycm9yJyxcblx0XHRcdC8vc3RyaWN0Q2xhc3M6ICdsYXp5c3RyaWN0Jyxcblx0XHRcdGF1dG9zaXplc0NsYXNzOiAnbGF6eWF1dG9zaXplcycsXG5cdFx0XHRmYXN0TG9hZGVkQ2xhc3M6ICdscy1pcy1jYWNoZWQnLFxuXHRcdFx0aWZyYW1lTG9hZE1vZGU6IDAsXG5cdFx0XHRzcmNBdHRyOiAnZGF0YS1zcmMnLFxuXHRcdFx0c3Jjc2V0QXR0cjogJ2RhdGEtc3Jjc2V0Jyxcblx0XHRcdHNpemVzQXR0cjogJ2RhdGEtc2l6ZXMnLFxuXHRcdFx0Ly9wcmVsb2FkQWZ0ZXJMb2FkOiBmYWxzZSxcblx0XHRcdG1pblNpemU6IDQwLFxuXHRcdFx0Y3VzdG9tTWVkaWE6IHt9LFxuXHRcdFx0aW5pdDogdHJ1ZSxcblx0XHRcdGV4cEZhY3RvcjogMS41LFxuXHRcdFx0aEZhYzogMC44LFxuXHRcdFx0bG9hZE1vZGU6IDIsXG5cdFx0XHRsb2FkSGlkZGVuOiB0cnVlLFxuXHRcdFx0cmljVGltZW91dDogMCxcblx0XHRcdHRocm90dGxlRGVsYXk6IDEyNSxcblx0XHR9O1xuXG5cdFx0bGF6eVNpemVzQ2ZnID0gd2luZG93LmxhenlTaXplc0NvbmZpZyB8fCB3aW5kb3cubGF6eXNpemVzQ29uZmlnIHx8IHt9O1xuXG5cdFx0Zm9yKHByb3AgaW4gbGF6eVNpemVzRGVmYXVsdHMpe1xuXHRcdFx0aWYoIShwcm9wIGluIGxhenlTaXplc0NmZykpe1xuXHRcdFx0XHRsYXp5U2l6ZXNDZmdbcHJvcF0gPSBsYXp5U2l6ZXNEZWZhdWx0c1twcm9wXTtcblx0XHRcdH1cblx0XHR9XG5cdH0pKCk7XG5cblx0aWYgKCFkb2N1bWVudCB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRpbml0OiBmdW5jdGlvbiAoKSB7fSxcblx0XHRcdC8qKlxuXHRcdFx0ICogQHR5cGUgeyBMYXp5U2l6ZXNDb25maWdQYXJ0aWFsIH1cblx0XHRcdCAqL1xuXHRcdFx0Y2ZnOiBsYXp5U2l6ZXNDZmcsXG5cdFx0XHQvKipcblx0XHRcdCAqIEB0eXBlIHsgdHJ1ZSB9XG5cdFx0XHQgKi9cblx0XHRcdG5vU3VwcG9ydDogdHJ1ZSxcblx0XHR9O1xuXHR9XG5cblx0dmFyIGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblx0dmFyIHN1cHBvcnRQaWN0dXJlID0gd2luZG93LkhUTUxQaWN0dXJlRWxlbWVudDtcblxuXHR2YXIgX2FkZEV2ZW50TGlzdGVuZXIgPSAnYWRkRXZlbnRMaXN0ZW5lcic7XG5cblx0dmFyIF9nZXRBdHRyaWJ1dGUgPSAnZ2V0QXR0cmlidXRlJztcblxuXHQvKipcblx0ICogVXBkYXRlIHRvIGJpbmQgdG8gd2luZG93IGJlY2F1c2UgJ3RoaXMnIGJlY29tZXMgbnVsbCBkdXJpbmcgU1NSXG5cdCAqIGJ1aWxkcy5cblx0ICovXG5cdHZhciBhZGRFdmVudExpc3RlbmVyID0gd2luZG93W19hZGRFdmVudExpc3RlbmVyXS5iaW5kKHdpbmRvdyk7XG5cblx0dmFyIHNldFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dDtcblxuXHR2YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBzZXRUaW1lb3V0O1xuXG5cdHZhciByZXF1ZXN0SWRsZUNhbGxiYWNrID0gd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2s7XG5cblx0dmFyIHJlZ1BpY3R1cmUgPSAvXnBpY3R1cmUkL2k7XG5cblx0dmFyIGxvYWRFdmVudHMgPSBbJ2xvYWQnLCAnZXJyb3InLCAnbGF6eWluY2x1ZGVkJywgJ19sYXp5bG9hZGVkJ107XG5cblx0dmFyIHJlZ0NsYXNzQ2FjaGUgPSB7fTtcblxuXHR2YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoO1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0gZWxlIHtFbGVtZW50fVxuXHQgKiBAcGFyYW0gY2xzIHtzdHJpbmd9XG5cdCAqL1xuXHR2YXIgaGFzQ2xhc3MgPSBmdW5jdGlvbihlbGUsIGNscykge1xuXHRcdGlmKCFyZWdDbGFzc0NhY2hlW2Nsc10pe1xuXHRcdFx0cmVnQ2xhc3NDYWNoZVtjbHNdID0gbmV3IFJlZ0V4cCgnKFxcXFxzfF4pJytjbHMrJyhcXFxcc3wkKScpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVnQ2xhc3NDYWNoZVtjbHNdLnRlc3QoZWxlW19nZXRBdHRyaWJ1dGVdKCdjbGFzcycpIHx8ICcnKSAmJiByZWdDbGFzc0NhY2hlW2Nsc107XG5cdH07XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBlbGUge0VsZW1lbnR9XG5cdCAqIEBwYXJhbSBjbHMge3N0cmluZ31cblx0ICovXG5cdHZhciBhZGRDbGFzcyA9IGZ1bmN0aW9uKGVsZSwgY2xzKSB7XG5cdFx0aWYgKCFoYXNDbGFzcyhlbGUsIGNscykpe1xuXHRcdFx0ZWxlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoZWxlW19nZXRBdHRyaWJ1dGVdKCdjbGFzcycpIHx8ICcnKS50cmltKCkgKyAnICcgKyBjbHMpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQHBhcmFtIGVsZSB7RWxlbWVudH1cblx0ICogQHBhcmFtIGNscyB7c3RyaW5nfVxuXHQgKi9cblx0dmFyIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24oZWxlLCBjbHMpIHtcblx0XHR2YXIgcmVnO1xuXHRcdGlmICgocmVnID0gaGFzQ2xhc3MoZWxlLGNscykpKSB7XG5cdFx0XHRlbGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVbX2dldEF0dHJpYnV0ZV0oJ2NsYXNzJykgfHwgJycpLnJlcGxhY2UocmVnLCAnICcpKTtcblx0XHR9XG5cdH07XG5cblx0dmFyIGFkZFJlbW92ZUxvYWRFdmVudHMgPSBmdW5jdGlvbihkb20sIGZuLCBhZGQpe1xuXHRcdHZhciBhY3Rpb24gPSBhZGQgPyBfYWRkRXZlbnRMaXN0ZW5lciA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcblx0XHRpZihhZGQpe1xuXHRcdFx0YWRkUmVtb3ZlTG9hZEV2ZW50cyhkb20sIGZuKTtcblx0XHR9XG5cdFx0bG9hZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGV2dCl7XG5cdFx0XHRkb21bYWN0aW9uXShldnQsIGZuKTtcblx0XHR9KTtcblx0fTtcblxuXHQvKipcblx0ICogQHBhcmFtIGVsZW0geyBFbGVtZW50IH1cblx0ICogQHBhcmFtIG5hbWUgeyBzdHJpbmcgfVxuXHQgKiBAcGFyYW0gZGV0YWlsIHsgYW55IH1cblx0ICogQHBhcmFtIG5vQnViYmxlcyB7IGJvb2xlYW4gfVxuXHQgKiBAcGFyYW0gbm9DYW5jZWxhYmxlIHsgYm9vbGVhbiB9XG5cdCAqIEByZXR1cm5zIHsgQ3VzdG9tRXZlbnQgfVxuXHQgKi9cblx0dmFyIHRyaWdnZXJFdmVudCA9IGZ1bmN0aW9uKGVsZW0sIG5hbWUsIGRldGFpbCwgbm9CdWJibGVzLCBub0NhbmNlbGFibGUpe1xuXHRcdHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuXG5cdFx0aWYoIWRldGFpbCl7XG5cdFx0XHRkZXRhaWwgPSB7fTtcblx0XHR9XG5cblx0XHRkZXRhaWwuaW5zdGFuY2UgPSBsYXp5c2l6ZXM7XG5cblx0XHRldmVudC5pbml0RXZlbnQobmFtZSwgIW5vQnViYmxlcywgIW5vQ2FuY2VsYWJsZSk7XG5cblx0XHRldmVudC5kZXRhaWwgPSBkZXRhaWw7XG5cblx0XHRlbGVtLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHRcdHJldHVybiBldmVudDtcblx0fTtcblxuXHR2YXIgdXBkYXRlUG9seWZpbGwgPSBmdW5jdGlvbiAoZWwsIGZ1bGwpe1xuXHRcdHZhciBwb2x5ZmlsbDtcblx0XHRpZiggIXN1cHBvcnRQaWN0dXJlICYmICggcG9seWZpbGwgPSAod2luZG93LnBpY3R1cmVmaWxsIHx8IGxhenlTaXplc0NmZy5wZikgKSApe1xuXHRcdFx0aWYoZnVsbCAmJiBmdWxsLnNyYyAmJiAhZWxbX2dldEF0dHJpYnV0ZV0oJ3NyY3NldCcpKXtcblx0XHRcdFx0ZWwuc2V0QXR0cmlidXRlKCdzcmNzZXQnLCBmdWxsLnNyYyk7XG5cdFx0XHR9XG5cdFx0XHRwb2x5ZmlsbCh7cmVldmFsdWF0ZTogdHJ1ZSwgZWxlbWVudHM6IFtlbF19KTtcblx0XHR9IGVsc2UgaWYoZnVsbCAmJiBmdWxsLnNyYyl7XG5cdFx0XHRlbC5zcmMgPSBmdWxsLnNyYztcblx0XHR9XG5cdH07XG5cblx0dmFyIGdldENTUyA9IGZ1bmN0aW9uIChlbGVtLCBzdHlsZSl7XG5cdFx0cmV0dXJuIChnZXRDb21wdXRlZFN0eWxlKGVsZW0sIG51bGwpIHx8IHt9KVtzdHlsZV07XG5cdH07XG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSBlbGVtIHsgRWxlbWVudCB9XG5cdCAqIEBwYXJhbSBwYXJlbnQgeyBFbGVtZW50IH1cblx0ICogQHBhcmFtIFt3aWR0aF0ge251bWJlcn1cblx0ICogQHJldHVybnMge251bWJlcn1cblx0ICovXG5cdHZhciBnZXRXaWR0aCA9IGZ1bmN0aW9uKGVsZW0sIHBhcmVudCwgd2lkdGgpe1xuXHRcdHdpZHRoID0gd2lkdGggfHwgZWxlbS5vZmZzZXRXaWR0aDtcblxuXHRcdHdoaWxlKHdpZHRoIDwgbGF6eVNpemVzQ2ZnLm1pblNpemUgJiYgcGFyZW50ICYmICFlbGVtLl9sYXp5c2l6ZXNXaWR0aCl7XG5cdFx0XHR3aWR0aCA9ICBwYXJlbnQub2Zmc2V0V2lkdGg7XG5cdFx0XHRwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gd2lkdGg7XG5cdH07XG5cblx0dmFyIHJBRiA9IChmdW5jdGlvbigpe1xuXHRcdHZhciBydW5uaW5nLCB3YWl0aW5nO1xuXHRcdHZhciBmaXJzdEZucyA9IFtdO1xuXHRcdHZhciBzZWNvbmRGbnMgPSBbXTtcblx0XHR2YXIgZm5zID0gZmlyc3RGbnM7XG5cblx0XHR2YXIgcnVuID0gZnVuY3Rpb24oKXtcblx0XHRcdHZhciBydW5GbnMgPSBmbnM7XG5cblx0XHRcdGZucyA9IGZpcnN0Rm5zLmxlbmd0aCA/IHNlY29uZEZucyA6IGZpcnN0Rm5zO1xuXG5cdFx0XHRydW5uaW5nID0gdHJ1ZTtcblx0XHRcdHdhaXRpbmcgPSBmYWxzZTtcblxuXHRcdFx0d2hpbGUocnVuRm5zLmxlbmd0aCl7XG5cdFx0XHRcdHJ1bkZucy5zaGlmdCgpKCk7XG5cdFx0XHR9XG5cblx0XHRcdHJ1bm5pbmcgPSBmYWxzZTtcblx0XHR9O1xuXG5cdFx0dmFyIHJhZkJhdGNoID0gZnVuY3Rpb24oZm4sIHF1ZXVlKXtcblx0XHRcdGlmKHJ1bm5pbmcgJiYgIXF1ZXVlKXtcblx0XHRcdFx0Zm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZucy5wdXNoKGZuKTtcblxuXHRcdFx0XHRpZighd2FpdGluZyl7XG5cdFx0XHRcdFx0d2FpdGluZyA9IHRydWU7XG5cdFx0XHRcdFx0KGRvY3VtZW50LmhpZGRlbiA/IHNldFRpbWVvdXQgOiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUpKHJ1bik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmFmQmF0Y2guX2xzRmx1c2ggPSBydW47XG5cblx0XHRyZXR1cm4gcmFmQmF0Y2g7XG5cdH0pKCk7XG5cblx0dmFyIHJBRkl0ID0gZnVuY3Rpb24oZm4sIHNpbXBsZSl7XG5cdFx0cmV0dXJuIHNpbXBsZSA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0ckFGKGZuKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzO1xuXHRcdFx0XHR2YXIgYXJncyA9IGFyZ3VtZW50cztcblx0XHRcdFx0ckFGKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0Zm4uYXBwbHkodGhhdCwgYXJncyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdDtcblx0fTtcblxuXHR2YXIgdGhyb3R0bGUgPSBmdW5jdGlvbihmbil7XG5cdFx0dmFyIHJ1bm5pbmc7XG5cdFx0dmFyIGxhc3RUaW1lID0gMDtcblx0XHR2YXIgZ0RlbGF5ID0gbGF6eVNpemVzQ2ZnLnRocm90dGxlRGVsYXk7XG5cdFx0dmFyIHJJQ1RpbWVvdXQgPSBsYXp5U2l6ZXNDZmcucmljVGltZW91dDtcblx0XHR2YXIgcnVuID0gZnVuY3Rpb24oKXtcblx0XHRcdHJ1bm5pbmcgPSBmYWxzZTtcblx0XHRcdGxhc3RUaW1lID0gRGF0ZS5ub3coKTtcblx0XHRcdGZuKCk7XG5cdFx0fTtcblx0XHR2YXIgaWRsZUNhbGxiYWNrID0gcmVxdWVzdElkbGVDYWxsYmFjayAmJiBySUNUaW1lb3V0ID4gNDkgP1xuXHRcdFx0ZnVuY3Rpb24oKXtcblx0XHRcdFx0cmVxdWVzdElkbGVDYWxsYmFjayhydW4sIHt0aW1lb3V0OiBySUNUaW1lb3V0fSk7XG5cblx0XHRcdFx0aWYocklDVGltZW91dCAhPT0gbGF6eVNpemVzQ2ZnLnJpY1RpbWVvdXQpe1xuXHRcdFx0XHRcdHJJQ1RpbWVvdXQgPSBsYXp5U2l6ZXNDZmcucmljVGltZW91dDtcblx0XHRcdFx0fVxuXHRcdFx0fSA6XG5cdFx0XHRyQUZJdChmdW5jdGlvbigpe1xuXHRcdFx0XHRzZXRUaW1lb3V0KHJ1bik7XG5cdFx0XHR9LCB0cnVlKVxuXHRcdDtcblxuXHRcdHJldHVybiBmdW5jdGlvbihpc1ByaW9yaXR5KXtcblx0XHRcdHZhciBkZWxheTtcblxuXHRcdFx0aWYoKGlzUHJpb3JpdHkgPSBpc1ByaW9yaXR5ID09PSB0cnVlKSl7XG5cdFx0XHRcdHJJQ1RpbWVvdXQgPSAzMztcblx0XHRcdH1cblxuXHRcdFx0aWYocnVubmluZyl7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0cnVubmluZyA9ICB0cnVlO1xuXG5cdFx0XHRkZWxheSA9IGdEZWxheSAtIChEYXRlLm5vdygpIC0gbGFzdFRpbWUpO1xuXG5cdFx0XHRpZihkZWxheSA8IDApe1xuXHRcdFx0XHRkZWxheSA9IDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmKGlzUHJpb3JpdHkgfHwgZGVsYXkgPCA5KXtcblx0XHRcdFx0aWRsZUNhbGxiYWNrKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZXRUaW1lb3V0KGlkbGVDYWxsYmFjaywgZGVsYXkpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cblx0Ly9iYXNlZCBvbiBodHRwOi8vbW9kZXJuamF2YXNjcmlwdC5ibG9nc3BvdC5kZS8yMDEzLzA4L2J1aWxkaW5nLWJldHRlci1kZWJvdW5jZS5odG1sXG5cdHZhciBkZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMpIHtcblx0XHR2YXIgdGltZW91dCwgdGltZXN0YW1wO1xuXHRcdHZhciB3YWl0ID0gOTk7XG5cdFx0dmFyIHJ1biA9IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aW1lb3V0ID0gbnVsbDtcblx0XHRcdGZ1bmMoKTtcblx0XHR9O1xuXHRcdHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGxhc3QgPSBEYXRlLm5vdygpIC0gdGltZXN0YW1wO1xuXG5cdFx0XHRpZiAobGFzdCA8IHdhaXQpIHtcblx0XHRcdFx0c2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0KHJlcXVlc3RJZGxlQ2FsbGJhY2sgfHwgcnVuKShydW4pO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHR0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuXG5cdFx0XHRpZiAoIXRpbWVvdXQpIHtcblx0XHRcdFx0dGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cblx0dmFyIGxvYWRlciA9IChmdW5jdGlvbigpe1xuXHRcdHZhciBwcmVsb2FkRWxlbXMsIGlzQ29tcGxldGVkLCByZXNldFByZWxvYWRpbmdUaW1lciwgbG9hZE1vZGUsIHN0YXJ0ZWQ7XG5cblx0XHR2YXIgZUx2VywgZWx2SCwgZUx0b3AsIGVMbGVmdCwgZUxyaWdodCwgZUxib3R0b20sIGlzQm9keUhpZGRlbjtcblxuXHRcdHZhciByZWdJbWcgPSAvXmltZyQvaTtcblx0XHR2YXIgcmVnSWZyYW1lID0gL15pZnJhbWUkL2k7XG5cblx0XHR2YXIgc3VwcG9ydFNjcm9sbCA9ICgnb25zY3JvbGwnIGluIHdpbmRvdykgJiYgISgvKGdsZXxpbmcpYm90Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKTtcblxuXHRcdHZhciBzaHJpbmtFeHBhbmQgPSAwO1xuXHRcdHZhciBjdXJyZW50RXhwYW5kID0gMDtcblxuXHRcdHZhciBpc0xvYWRpbmcgPSAwO1xuXHRcdHZhciBsb3dSdW5zID0gLTE7XG5cblx0XHR2YXIgcmVzZXRQcmVsb2FkaW5nID0gZnVuY3Rpb24oZSl7XG5cdFx0XHRpc0xvYWRpbmctLTtcblx0XHRcdGlmKCFlIHx8IGlzTG9hZGluZyA8IDAgfHwgIWUudGFyZ2V0KXtcblx0XHRcdFx0aXNMb2FkaW5nID0gMDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGlzVmlzaWJsZSA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRpZiAoaXNCb2R5SGlkZGVuID09IG51bGwpIHtcblx0XHRcdFx0aXNCb2R5SGlkZGVuID0gZ2V0Q1NTKGRvY3VtZW50LmJvZHksICd2aXNpYmlsaXR5JykgPT0gJ2hpZGRlbic7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBpc0JvZHlIaWRkZW4gfHwgIShnZXRDU1MoZWxlbS5wYXJlbnROb2RlLCAndmlzaWJpbGl0eScpID09ICdoaWRkZW4nICYmIGdldENTUyhlbGVtLCAndmlzaWJpbGl0eScpID09ICdoaWRkZW4nKTtcblx0XHR9O1xuXG5cdFx0dmFyIGlzTmVzdGVkVmlzaWJsZSA9IGZ1bmN0aW9uKGVsZW0sIGVsZW1FeHBhbmQpe1xuXHRcdFx0dmFyIG91dGVyUmVjdDtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtO1xuXHRcdFx0dmFyIHZpc2libGUgPSBpc1Zpc2libGUoZWxlbSk7XG5cblx0XHRcdGVMdG9wIC09IGVsZW1FeHBhbmQ7XG5cdFx0XHRlTGJvdHRvbSArPSBlbGVtRXhwYW5kO1xuXHRcdFx0ZUxsZWZ0IC09IGVsZW1FeHBhbmQ7XG5cdFx0XHRlTHJpZ2h0ICs9IGVsZW1FeHBhbmQ7XG5cblx0XHRcdHdoaWxlKHZpc2libGUgJiYgKHBhcmVudCA9IHBhcmVudC5vZmZzZXRQYXJlbnQpICYmIHBhcmVudCAhPSBkb2N1bWVudC5ib2R5ICYmIHBhcmVudCAhPSBkb2NFbGVtKXtcblx0XHRcdFx0dmlzaWJsZSA9ICgoZ2V0Q1NTKHBhcmVudCwgJ29wYWNpdHknKSB8fCAxKSA+IDApO1xuXG5cdFx0XHRcdGlmKHZpc2libGUgJiYgZ2V0Q1NTKHBhcmVudCwgJ292ZXJmbG93JykgIT0gJ3Zpc2libGUnKXtcblx0XHRcdFx0XHRvdXRlclJlY3QgPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHRcdFx0dmlzaWJsZSA9IGVMcmlnaHQgPiBvdXRlclJlY3QubGVmdCAmJlxuXHRcdFx0XHRcdFx0ZUxsZWZ0IDwgb3V0ZXJSZWN0LnJpZ2h0ICYmXG5cdFx0XHRcdFx0XHRlTGJvdHRvbSA+IG91dGVyUmVjdC50b3AgLSAxICYmXG5cdFx0XHRcdFx0XHRlTHRvcCA8IG91dGVyUmVjdC5ib3R0b20gKyAxXG5cdFx0XHRcdFx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2aXNpYmxlO1xuXHRcdH07XG5cblx0XHR2YXIgY2hlY2tFbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGVMbGVuLCBpLCByZWN0LCBhdXRvTG9hZEVsZW0sIGxvYWRlZFNvbWV0aGluZywgZWxlbUV4cGFuZCwgZWxlbU5lZ2F0aXZlRXhwYW5kLCBlbGVtRXhwYW5kVmFsLFxuXHRcdFx0XHRiZWZvcmVFeHBhbmRWYWwsIGRlZmF1bHRFeHBhbmQsIHByZWxvYWRFeHBhbmQsIGhGYWM7XG5cdFx0XHR2YXIgbGF6eWxvYWRFbGVtcyA9IGxhenlzaXplcy5lbGVtZW50cztcblxuXHRcdFx0aWYoKGxvYWRNb2RlID0gbGF6eVNpemVzQ2ZnLmxvYWRNb2RlKSAmJiBpc0xvYWRpbmcgPCA4ICYmIChlTGxlbiA9IGxhenlsb2FkRWxlbXMubGVuZ3RoKSl7XG5cblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdFx0bG93UnVucysrO1xuXG5cdFx0XHRcdGZvcig7IGkgPCBlTGxlbjsgaSsrKXtcblxuXHRcdFx0XHRcdGlmKCFsYXp5bG9hZEVsZW1zW2ldIHx8IGxhenlsb2FkRWxlbXNbaV0uX2xhenlSYWNlKXtjb250aW51ZTt9XG5cblx0XHRcdFx0XHRpZighc3VwcG9ydFNjcm9sbCB8fCAobGF6eXNpemVzLnByZW1hdHVyZVVudmVpbCAmJiBsYXp5c2l6ZXMucHJlbWF0dXJlVW52ZWlsKGxhenlsb2FkRWxlbXNbaV0pKSl7dW52ZWlsRWxlbWVudChsYXp5bG9hZEVsZW1zW2ldKTtjb250aW51ZTt9XG5cblx0XHRcdFx0XHRpZighKGVsZW1FeHBhbmRWYWwgPSBsYXp5bG9hZEVsZW1zW2ldW19nZXRBdHRyaWJ1dGVdKCdkYXRhLWV4cGFuZCcpKSB8fCAhKGVsZW1FeHBhbmQgPSBlbGVtRXhwYW5kVmFsICogMSkpe1xuXHRcdFx0XHRcdFx0ZWxlbUV4cGFuZCA9IGN1cnJlbnRFeHBhbmQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCFkZWZhdWx0RXhwYW5kKSB7XG5cdFx0XHRcdFx0XHRkZWZhdWx0RXhwYW5kID0gKCFsYXp5U2l6ZXNDZmcuZXhwYW5kIHx8IGxhenlTaXplc0NmZy5leHBhbmQgPCAxKSA/XG5cdFx0XHRcdFx0XHRcdGRvY0VsZW0uY2xpZW50SGVpZ2h0ID4gNTAwICYmIGRvY0VsZW0uY2xpZW50V2lkdGggPiA1MDAgPyA1MDAgOiAzNzAgOlxuXHRcdFx0XHRcdFx0XHRsYXp5U2l6ZXNDZmcuZXhwYW5kO1xuXG5cdFx0XHRcdFx0XHRsYXp5c2l6ZXMuX2RlZkV4ID0gZGVmYXVsdEV4cGFuZDtcblxuXHRcdFx0XHRcdFx0cHJlbG9hZEV4cGFuZCA9IGRlZmF1bHRFeHBhbmQgKiBsYXp5U2l6ZXNDZmcuZXhwRmFjdG9yO1xuXHRcdFx0XHRcdFx0aEZhYyA9IGxhenlTaXplc0NmZy5oRmFjO1xuXHRcdFx0XHRcdFx0aXNCb2R5SGlkZGVuID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0aWYoY3VycmVudEV4cGFuZCA8IHByZWxvYWRFeHBhbmQgJiYgaXNMb2FkaW5nIDwgMSAmJiBsb3dSdW5zID4gMiAmJiBsb2FkTW9kZSA+IDIgJiYgIWRvY3VtZW50LmhpZGRlbil7XG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRFeHBhbmQgPSBwcmVsb2FkRXhwYW5kO1xuXHRcdFx0XHRcdFx0XHRsb3dSdW5zID0gMDtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZihsb2FkTW9kZSA+IDEgJiYgbG93UnVucyA+IDEgJiYgaXNMb2FkaW5nIDwgNil7XG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRFeHBhbmQgPSBkZWZhdWx0RXhwYW5kO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y3VycmVudEV4cGFuZCA9IHNocmlua0V4cGFuZDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZihiZWZvcmVFeHBhbmRWYWwgIT09IGVsZW1FeHBhbmQpe1xuXHRcdFx0XHRcdFx0ZUx2VyA9IGlubmVyV2lkdGggKyAoZWxlbUV4cGFuZCAqIGhGYWMpO1xuXHRcdFx0XHRcdFx0ZWx2SCA9IGlubmVySGVpZ2h0ICsgZWxlbUV4cGFuZDtcblx0XHRcdFx0XHRcdGVsZW1OZWdhdGl2ZUV4cGFuZCA9IGVsZW1FeHBhbmQgKiAtMTtcblx0XHRcdFx0XHRcdGJlZm9yZUV4cGFuZFZhbCA9IGVsZW1FeHBhbmQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmVjdCA9IGxhenlsb2FkRWxlbXNbaV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRcdFx0XHRpZiAoKGVMYm90dG9tID0gcmVjdC5ib3R0b20pID49IGVsZW1OZWdhdGl2ZUV4cGFuZCAmJlxuXHRcdFx0XHRcdFx0KGVMdG9wID0gcmVjdC50b3ApIDw9IGVsdkggJiZcblx0XHRcdFx0XHRcdChlTHJpZ2h0ID0gcmVjdC5yaWdodCkgPj0gZWxlbU5lZ2F0aXZlRXhwYW5kICogaEZhYyAmJlxuXHRcdFx0XHRcdFx0KGVMbGVmdCA9IHJlY3QubGVmdCkgPD0gZUx2VyAmJlxuXHRcdFx0XHRcdFx0KGVMYm90dG9tIHx8IGVMcmlnaHQgfHwgZUxsZWZ0IHx8IGVMdG9wKSAmJlxuXHRcdFx0XHRcdFx0KGxhenlTaXplc0NmZy5sb2FkSGlkZGVuIHx8IGlzVmlzaWJsZShsYXp5bG9hZEVsZW1zW2ldKSkgJiZcblx0XHRcdFx0XHRcdCgoaXNDb21wbGV0ZWQgJiYgaXNMb2FkaW5nIDwgMyAmJiAhZWxlbUV4cGFuZFZhbCAmJiAobG9hZE1vZGUgPCAzIHx8IGxvd1J1bnMgPCA0KSkgfHwgaXNOZXN0ZWRWaXNpYmxlKGxhenlsb2FkRWxlbXNbaV0sIGVsZW1FeHBhbmQpKSl7XG5cdFx0XHRcdFx0XHR1bnZlaWxFbGVtZW50KGxhenlsb2FkRWxlbXNbaV0pO1xuXHRcdFx0XHRcdFx0bG9hZGVkU29tZXRoaW5nID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGlmKGlzTG9hZGluZyA+IDkpe2JyZWFrO31cblx0XHRcdFx0XHR9IGVsc2UgaWYoIWxvYWRlZFNvbWV0aGluZyAmJiBpc0NvbXBsZXRlZCAmJiAhYXV0b0xvYWRFbGVtICYmXG5cdFx0XHRcdFx0XHRpc0xvYWRpbmcgPCA0ICYmIGxvd1J1bnMgPCA0ICYmIGxvYWRNb2RlID4gMiAmJlxuXHRcdFx0XHRcdFx0KHByZWxvYWRFbGVtc1swXSB8fCBsYXp5U2l6ZXNDZmcucHJlbG9hZEFmdGVyTG9hZCkgJiZcblx0XHRcdFx0XHRcdChwcmVsb2FkRWxlbXNbMF0gfHwgKCFlbGVtRXhwYW5kVmFsICYmICgoZUxib3R0b20gfHwgZUxyaWdodCB8fCBlTGxlZnQgfHwgZUx0b3ApIHx8IGxhenlsb2FkRWxlbXNbaV1bX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ2ZnLnNpemVzQXR0cikgIT0gJ2F1dG8nKSkpKXtcblx0XHRcdFx0XHRcdGF1dG9Mb2FkRWxlbSA9IHByZWxvYWRFbGVtc1swXSB8fCBsYXp5bG9hZEVsZW1zW2ldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKGF1dG9Mb2FkRWxlbSAmJiAhbG9hZGVkU29tZXRoaW5nKXtcblx0XHRcdFx0XHR1bnZlaWxFbGVtZW50KGF1dG9Mb2FkRWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIHRocm90dGxlZENoZWNrRWxlbWVudHMgPSB0aHJvdHRsZShjaGVja0VsZW1lbnRzKTtcblxuXHRcdHZhciBzd2l0Y2hMb2FkaW5nQ2xhc3MgPSBmdW5jdGlvbihlKXtcblx0XHRcdHZhciBlbGVtID0gZS50YXJnZXQ7XG5cblx0XHRcdGlmIChlbGVtLl9sYXp5Q2FjaGUpIHtcblx0XHRcdFx0ZGVsZXRlIGVsZW0uX2xhenlDYWNoZTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNldFByZWxvYWRpbmcoZSk7XG5cdFx0XHRhZGRDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubG9hZGVkQ2xhc3MpO1xuXHRcdFx0cmVtb3ZlQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmxvYWRpbmdDbGFzcyk7XG5cdFx0XHRhZGRSZW1vdmVMb2FkRXZlbnRzKGVsZW0sIHJhZlN3aXRjaExvYWRpbmdDbGFzcyk7XG5cdFx0XHR0cmlnZ2VyRXZlbnQoZWxlbSwgJ2xhenlsb2FkZWQnKTtcblx0XHR9O1xuXHRcdHZhciByYWZlZFN3aXRjaExvYWRpbmdDbGFzcyA9IHJBRkl0KHN3aXRjaExvYWRpbmdDbGFzcyk7XG5cdFx0dmFyIHJhZlN3aXRjaExvYWRpbmdDbGFzcyA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0cmFmZWRTd2l0Y2hMb2FkaW5nQ2xhc3Moe3RhcmdldDogZS50YXJnZXR9KTtcblx0XHR9O1xuXG5cdFx0dmFyIGNoYW5nZUlmcmFtZVNyYyA9IGZ1bmN0aW9uKGVsZW0sIHNyYyl7XG5cdFx0XHR2YXIgbG9hZE1vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1sb2FkLW1vZGUnKSB8fCBsYXp5U2l6ZXNDZmcuaWZyYW1lTG9hZE1vZGU7XG5cblx0XHRcdC8vIGxvYWRNb2RlIGNhbiBiZSBhbHNvIGEgc3RyaW5nIVxuXHRcdFx0aWYgKGxvYWRNb2RlID09IDApIHtcblx0XHRcdFx0ZWxlbS5jb250ZW50V2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3JjKTtcblx0XHRcdH0gZWxzZSBpZiAobG9hZE1vZGUgPT0gMSkge1xuXHRcdFx0XHRlbGVtLnNyYyA9IHNyYztcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGhhbmRsZVNvdXJjZXMgPSBmdW5jdGlvbihzb3VyY2Upe1xuXHRcdFx0dmFyIGN1c3RvbU1lZGlhO1xuXG5cdFx0XHR2YXIgc291cmNlU3Jjc2V0ID0gc291cmNlW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NmZy5zcmNzZXRBdHRyKTtcblxuXHRcdFx0aWYoIChjdXN0b21NZWRpYSA9IGxhenlTaXplc0NmZy5jdXN0b21NZWRpYVtzb3VyY2VbX2dldEF0dHJpYnV0ZV0oJ2RhdGEtbWVkaWEnKSB8fCBzb3VyY2VbX2dldEF0dHJpYnV0ZV0oJ21lZGlhJyldKSApe1xuXHRcdFx0XHRzb3VyY2Uuc2V0QXR0cmlidXRlKCdtZWRpYScsIGN1c3RvbU1lZGlhKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoc291cmNlU3Jjc2V0KXtcblx0XHRcdFx0c291cmNlLnNldEF0dHJpYnV0ZSgnc3Jjc2V0Jywgc291cmNlU3Jjc2V0KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGxhenlVbnZlaWwgPSByQUZJdChmdW5jdGlvbiAoZWxlbSwgZGV0YWlsLCBpc0F1dG8sIHNpemVzLCBpc0ltZyl7XG5cdFx0XHR2YXIgc3JjLCBzcmNzZXQsIHBhcmVudCwgaXNQaWN0dXJlLCBldmVudCwgZmlyZXNMb2FkO1xuXG5cdFx0XHRpZighKGV2ZW50ID0gdHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5YmVmb3JldW52ZWlsJywgZGV0YWlsKSkuZGVmYXVsdFByZXZlbnRlZCl7XG5cblx0XHRcdFx0aWYoc2l6ZXMpe1xuXHRcdFx0XHRcdGlmKGlzQXV0byl7XG5cdFx0XHRcdFx0XHRhZGRDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcuYXV0b3NpemVzQ2xhc3MpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSgnc2l6ZXMnLCBzaXplcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3Jjc2V0ID0gZWxlbVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc3Jjc2V0QXR0cik7XG5cdFx0XHRcdHNyYyA9IGVsZW1bX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ2ZnLnNyY0F0dHIpO1xuXG5cdFx0XHRcdGlmKGlzSW1nKSB7XG5cdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHRcdGlzUGljdHVyZSA9IHBhcmVudCAmJiByZWdQaWN0dXJlLnRlc3QocGFyZW50Lm5vZGVOYW1lIHx8ICcnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZpcmVzTG9hZCA9IGRldGFpbC5maXJlc0xvYWQgfHwgKCgnc3JjJyBpbiBlbGVtKSAmJiAoc3Jjc2V0IHx8IHNyYyB8fCBpc1BpY3R1cmUpKTtcblxuXHRcdFx0XHRldmVudCA9IHt0YXJnZXQ6IGVsZW19O1xuXG5cdFx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sb2FkaW5nQ2xhc3MpO1xuXG5cdFx0XHRcdGlmKGZpcmVzTG9hZCl7XG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHJlc2V0UHJlbG9hZGluZ1RpbWVyKTtcblx0XHRcdFx0XHRyZXNldFByZWxvYWRpbmdUaW1lciA9IHNldFRpbWVvdXQocmVzZXRQcmVsb2FkaW5nLCAyNTAwKTtcblx0XHRcdFx0XHRhZGRSZW1vdmVMb2FkRXZlbnRzKGVsZW0sIHJhZlN3aXRjaExvYWRpbmdDbGFzcywgdHJ1ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihpc1BpY3R1cmUpe1xuXHRcdFx0XHRcdGZvckVhY2guY2FsbChwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NvdXJjZScpLCBoYW5kbGVTb3VyY2VzKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKHNyY3NldCl7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoJ3NyY3NldCcsIHNyY3NldCk7XG5cdFx0XHRcdH0gZWxzZSBpZihzcmMgJiYgIWlzUGljdHVyZSl7XG5cdFx0XHRcdFx0aWYocmVnSWZyYW1lLnRlc3QoZWxlbS5ub2RlTmFtZSkpe1xuXHRcdFx0XHRcdFx0Y2hhbmdlSWZyYW1lU3JjKGVsZW0sIHNyYyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsZW0uc3JjID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKGlzSW1nICYmIChzcmNzZXQgfHwgaXNQaWN0dXJlKSl7XG5cdFx0XHRcdFx0dXBkYXRlUG9seWZpbGwoZWxlbSwge3NyYzogc3JjfSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYoZWxlbS5fbGF6eVJhY2Upe1xuXHRcdFx0XHRkZWxldGUgZWxlbS5fbGF6eVJhY2U7XG5cdFx0XHR9XG5cdFx0XHRyZW1vdmVDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubGF6eUNsYXNzKTtcblxuXHRcdFx0ckFGKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdC8vIFBhcnQgb2YgdGhpcyBjYW4gYmUgcmVtb3ZlZCBhcyBzb29uIGFzIHRoaXMgZml4IGlzIG9sZGVyOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD03NzMxICgyMDE1KVxuXHRcdFx0XHR2YXIgaXNMb2FkZWQgPSBlbGVtLmNvbXBsZXRlICYmIGVsZW0ubmF0dXJhbFdpZHRoID4gMTtcblxuXHRcdFx0XHRpZiggIWZpcmVzTG9hZCB8fCBpc0xvYWRlZCl7XG5cdFx0XHRcdFx0aWYgKGlzTG9hZGVkKSB7XG5cdFx0XHRcdFx0XHRhZGRDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcuZmFzdExvYWRlZENsYXNzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3dpdGNoTG9hZGluZ0NsYXNzKGV2ZW50KTtcblx0XHRcdFx0XHRlbGVtLl9sYXp5Q2FjaGUgPSB0cnVlO1xuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdGlmICgnX2xhenlDYWNoZScgaW4gZWxlbSkge1xuXHRcdFx0XHRcdFx0XHRkZWxldGUgZWxlbS5fbGF6eUNhY2hlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sIDkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChlbGVtLmxvYWRpbmcgPT0gJ2xhenknKSB7XG5cdFx0XHRcdFx0aXNMb2FkaW5nLS07XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRydWUpO1xuXHRcdH0pO1xuXG5cdFx0LyoqXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gZWxlbSB7IEVsZW1lbnQgfVxuXHRcdCAqL1xuXHRcdHZhciB1bnZlaWxFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW0pe1xuXHRcdFx0aWYgKGVsZW0uX2xhenlSYWNlKSB7cmV0dXJuO31cblx0XHRcdHZhciBkZXRhaWw7XG5cblx0XHRcdHZhciBpc0ltZyA9IHJlZ0ltZy50ZXN0KGVsZW0ubm9kZU5hbWUpO1xuXG5cdFx0XHQvL2FsbG93IHVzaW5nIHNpemVzPVwiYXV0b1wiLCBidXQgZG9uJ3QgdXNlLiBpdCdzIGludmFsaWQuIFVzZSBkYXRhLXNpemVzPVwiYXV0b1wiIG9yIGEgdmFsaWQgdmFsdWUgZm9yIHNpemVzIGluc3RlYWQgKGkuZS46IHNpemVzPVwiODB2d1wiKVxuXHRcdFx0dmFyIHNpemVzID0gaXNJbWcgJiYgKGVsZW1bX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ2ZnLnNpemVzQXR0cikgfHwgZWxlbVtfZ2V0QXR0cmlidXRlXSgnc2l6ZXMnKSk7XG5cdFx0XHR2YXIgaXNBdXRvID0gc2l6ZXMgPT0gJ2F1dG8nO1xuXG5cdFx0XHRpZiggKGlzQXV0byB8fCAhaXNDb21wbGV0ZWQpICYmIGlzSW1nICYmIChlbGVtW19nZXRBdHRyaWJ1dGVdKCdzcmMnKSB8fCBlbGVtLnNyY3NldCkgJiYgIWVsZW0uY29tcGxldGUgJiYgIWhhc0NsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5lcnJvckNsYXNzKSAmJiBoYXNDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubGF6eUNsYXNzKSl7cmV0dXJuO31cblxuXHRcdFx0ZGV0YWlsID0gdHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5dW52ZWlscmVhZCcpLmRldGFpbDtcblxuXHRcdFx0aWYoaXNBdXRvKXtcblx0XHRcdFx0IGF1dG9TaXplci51cGRhdGVFbGVtKGVsZW0sIHRydWUsIGVsZW0ub2Zmc2V0V2lkdGgpO1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLl9sYXp5UmFjZSA9IHRydWU7XG5cdFx0XHRpc0xvYWRpbmcrKztcblxuXHRcdFx0bGF6eVVudmVpbChlbGVtLCBkZXRhaWwsIGlzQXV0bywgc2l6ZXMsIGlzSW1nKTtcblx0XHR9O1xuXG5cdFx0dmFyIGFmdGVyU2Nyb2xsID0gZGVib3VuY2UoZnVuY3Rpb24oKXtcblx0XHRcdGxhenlTaXplc0NmZy5sb2FkTW9kZSA9IDM7XG5cdFx0XHR0aHJvdHRsZWRDaGVja0VsZW1lbnRzKCk7XG5cdFx0fSk7XG5cblx0XHR2YXIgYWx0TG9hZG1vZGVTY3JvbGxMaXN0bmVyID0gZnVuY3Rpb24oKXtcblx0XHRcdGlmKGxhenlTaXplc0NmZy5sb2FkTW9kZSA9PSAzKXtcblx0XHRcdFx0bGF6eVNpemVzQ2ZnLmxvYWRNb2RlID0gMjtcblx0XHRcdH1cblx0XHRcdGFmdGVyU2Nyb2xsKCk7XG5cdFx0fTtcblxuXHRcdHZhciBvbmxvYWQgPSBmdW5jdGlvbigpe1xuXHRcdFx0aWYoaXNDb21wbGV0ZWQpe3JldHVybjt9XG5cdFx0XHRpZihEYXRlLm5vdygpIC0gc3RhcnRlZCA8IDk5OSl7XG5cdFx0XHRcdHNldFRpbWVvdXQob25sb2FkLCA5OTkpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblxuXHRcdFx0aXNDb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHRsYXp5U2l6ZXNDZmcubG9hZE1vZGUgPSAzO1xuXG5cdFx0XHR0aHJvdHRsZWRDaGVja0VsZW1lbnRzKCk7XG5cblx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGFsdExvYWRtb2RlU2Nyb2xsTGlzdG5lciwgdHJ1ZSk7XG5cdFx0fTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRfOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRzdGFydGVkID0gRGF0ZS5ub3coKTtcblxuXHRcdFx0XHRsYXp5c2l6ZXMuZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGxhenlTaXplc0NmZy5sYXp5Q2xhc3MpO1xuXHRcdFx0XHRwcmVsb2FkRWxlbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGxhenlTaXplc0NmZy5sYXp5Q2xhc3MgKyAnICcgKyBsYXp5U2l6ZXNDZmcucHJlbG9hZENsYXNzKTtcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdwYWdlc2hvdycsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdFx0aWYgKGUucGVyc2lzdGVkKSB7XG5cdFx0XHRcdFx0XHR2YXIgbG9hZGluZ0VsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBsYXp5U2l6ZXNDZmcubG9hZGluZ0NsYXNzKTtcblxuXHRcdFx0XHRcdFx0aWYgKGxvYWRpbmdFbGVtZW50cy5sZW5ndGggJiYgbG9hZGluZ0VsZW1lbnRzLmZvckVhY2gpIHtcblx0XHRcdFx0XHRcdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0XHRsb2FkaW5nRWxlbWVudHMuZm9yRWFjaCggZnVuY3Rpb24gKGltZykge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGltZy5jb21wbGV0ZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR1bnZlaWxFbGVtZW50KGltZyk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpe1xuXHRcdFx0XHRcdG5ldyBNdXRhdGlvbk9ic2VydmVyKCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzICkub2JzZXJ2ZSggZG9jRWxlbSwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSwgYXR0cmlidXRlczogdHJ1ZX0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2NFbGVtW19hZGRFdmVudExpc3RlbmVyXSgnRE9NTm9kZUluc2VydGVkJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cdFx0XHRcdFx0ZG9jRWxlbVtfYWRkRXZlbnRMaXN0ZW5lcl0oJ0RPTUF0dHJNb2RpZmllZCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXHRcdFx0XHRcdHNldEludGVydmFsKHRocm90dGxlZENoZWNrRWxlbWVudHMsIDk5OSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cblx0XHRcdFx0Ly8sICdmdWxsc2NyZWVuY2hhbmdlJ1xuXHRcdFx0XHRbJ2ZvY3VzJywgJ21vdXNlb3ZlcicsICdjbGljaycsICdsb2FkJywgJ3RyYW5zaXRpb25lbmQnLCAnYW5pbWF0aW9uZW5kJ10uZm9yRWFjaChmdW5jdGlvbihuYW1lKXtcblx0XHRcdFx0XHRkb2N1bWVudFtfYWRkRXZlbnRMaXN0ZW5lcl0obmFtZSwgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKCgvZCR8XmMvLnRlc3QoZG9jdW1lbnQucmVhZHlTdGF0ZSkpKXtcblx0XHRcdFx0XHRvbmxvYWQoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdsb2FkJywgb25sb2FkKTtcblx0XHRcdFx0XHRkb2N1bWVudFtfYWRkRXZlbnRMaXN0ZW5lcl0oJ0RPTUNvbnRlbnRMb2FkZWQnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzKTtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KG9ubG9hZCwgMjAwMDApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYobGF6eXNpemVzLmVsZW1lbnRzLmxlbmd0aCl7XG5cdFx0XHRcdFx0Y2hlY2tFbGVtZW50cygpO1xuXHRcdFx0XHRcdHJBRi5fbHNGbHVzaCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm90dGxlZENoZWNrRWxlbWVudHMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGNoZWNrRWxlbXM6IHRocm90dGxlZENoZWNrRWxlbWVudHMsXG5cdFx0XHR1bnZlaWw6IHVudmVpbEVsZW1lbnQsXG5cdFx0XHRfYUxTTDogYWx0TG9hZG1vZGVTY3JvbGxMaXN0bmVyLFxuXHRcdH07XG5cdH0pKCk7XG5cblxuXHR2YXIgYXV0b1NpemVyID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIGF1dG9zaXplc0VsZW1zO1xuXG5cdFx0dmFyIHNpemVFbGVtZW50ID0gckFGSXQoZnVuY3Rpb24oZWxlbSwgcGFyZW50LCBldmVudCwgd2lkdGgpe1xuXHRcdFx0dmFyIHNvdXJjZXMsIGksIGxlbjtcblx0XHRcdGVsZW0uX2xhenlzaXplc1dpZHRoID0gd2lkdGg7XG5cdFx0XHR3aWR0aCArPSAncHgnO1xuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSgnc2l6ZXMnLCB3aWR0aCk7XG5cblx0XHRcdGlmKHJlZ1BpY3R1cmUudGVzdChwYXJlbnQubm9kZU5hbWUgfHwgJycpKXtcblx0XHRcdFx0c291cmNlcyA9IHBhcmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc291cmNlJyk7XG5cdFx0XHRcdGZvcihpID0gMCwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG5cdFx0XHRcdFx0c291cmNlc1tpXS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgd2lkdGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFldmVudC5kZXRhaWwuZGF0YUF0dHIpe1xuXHRcdFx0XHR1cGRhdGVQb2x5ZmlsbChlbGVtLCBldmVudC5kZXRhaWwpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdC8qKlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIGVsZW0ge0VsZW1lbnR9XG5cdFx0ICogQHBhcmFtIGRhdGFBdHRyXG5cdFx0ICogQHBhcmFtIFt3aWR0aF0geyBudW1iZXIgfVxuXHRcdCAqL1xuXHRcdHZhciBnZXRTaXplRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhQXR0ciwgd2lkdGgpe1xuXHRcdFx0dmFyIGV2ZW50O1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYocGFyZW50KXtcblx0XHRcdFx0d2lkdGggPSBnZXRXaWR0aChlbGVtLCBwYXJlbnQsIHdpZHRoKTtcblx0XHRcdFx0ZXZlbnQgPSB0cmlnZ2VyRXZlbnQoZWxlbSwgJ2xhenliZWZvcmVzaXplcycsIHt3aWR0aDogd2lkdGgsIGRhdGFBdHRyOiAhIWRhdGFBdHRyfSk7XG5cblx0XHRcdFx0aWYoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpe1xuXHRcdFx0XHRcdHdpZHRoID0gZXZlbnQuZGV0YWlsLndpZHRoO1xuXG5cdFx0XHRcdFx0aWYod2lkdGggJiYgd2lkdGggIT09IGVsZW0uX2xhenlzaXplc1dpZHRoKXtcblx0XHRcdFx0XHRcdHNpemVFbGVtZW50KGVsZW0sIHBhcmVudCwgZXZlbnQsIHdpZHRoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIHVwZGF0ZUVsZW1lbnRzU2l6ZXMgPSBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIGk7XG5cdFx0XHR2YXIgbGVuID0gYXV0b3NpemVzRWxlbXMubGVuZ3RoO1xuXHRcdFx0aWYobGVuKXtcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdFx0Zm9yKDsgaSA8IGxlbjsgaSsrKXtcblx0XHRcdFx0XHRnZXRTaXplRWxlbWVudChhdXRvc2l6ZXNFbGVtc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGRlYm91bmNlZFVwZGF0ZUVsZW1lbnRzU2l6ZXMgPSBkZWJvdW5jZSh1cGRhdGVFbGVtZW50c1NpemVzKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRfOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRhdXRvc2l6ZXNFbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobGF6eVNpemVzQ2ZnLmF1dG9zaXplc0NsYXNzKTtcblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyk7XG5cdFx0XHR9LFxuXHRcdFx0Y2hlY2tFbGVtczogZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyxcblx0XHRcdHVwZGF0ZUVsZW06IGdldFNpemVFbGVtZW50XG5cdFx0fTtcblx0fSkoKTtcblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0aWYoIWluaXQuaSAmJiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKXtcblx0XHRcdGluaXQuaSA9IHRydWU7XG5cdFx0XHRhdXRvU2l6ZXIuXygpO1xuXHRcdFx0bG9hZGVyLl8oKTtcblx0XHR9XG5cdH07XG5cblx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdGlmKGxhenlTaXplc0NmZy5pbml0KXtcblx0XHRcdGluaXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGxhenlzaXplcyA9IHtcblx0XHQvKipcblx0XHQgKiBAdHlwZSB7IExhenlTaXplc0NvbmZpZ1BhcnRpYWwgfVxuXHRcdCAqL1xuXHRcdGNmZzogbGF6eVNpemVzQ2ZnLFxuXHRcdGF1dG9TaXplcjogYXV0b1NpemVyLFxuXHRcdGxvYWRlcjogbG9hZGVyLFxuXHRcdGluaXQ6IGluaXQsXG5cdFx0dVA6IHVwZGF0ZVBvbHlmaWxsLFxuXHRcdGFDOiBhZGRDbGFzcyxcblx0XHRyQzogcmVtb3ZlQ2xhc3MsXG5cdFx0aEM6IGhhc0NsYXNzLFxuXHRcdGZpcmU6IHRyaWdnZXJFdmVudCxcblx0XHRnVzogZ2V0V2lkdGgsXG5cdFx0ckFGOiByQUYsXG5cdH07XG5cblx0cmV0dXJuIGxhenlzaXplcztcbn1cbikpO1xuXG59LHt9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiFcbiAqIFVuaWRyYWdnZXIgdjMuMC4xXG4gKiBEcmFnZ2FibGUgYmFzZSBjbGFzc1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuVW5pZHJhZ2dlciA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciApIHtcblxuZnVuY3Rpb24gVW5pZHJhZ2dlcigpIHt9XG5cbi8vIGluaGVyaXQgRXZFbWl0dGVyXG5sZXQgcHJvdG8gPSBVbmlkcmFnZ2VyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuLy8gLS0tLS0gYmluZCBzdGFydCAtLS0tLSAvL1xuXG4vLyB0cmlnZ2VyIGhhbmRsZXIgbWV0aG9kcyBmb3IgZXZlbnRzXG5wcm90by5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgbGV0IG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG5sZXQgc3RhcnRFdmVudCwgYWN0aXZlRXZlbnRzO1xuaWYgKCAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgKSB7XG4gIC8vIEhBQ0sgcHJlZmVyIFRvdWNoIEV2ZW50cyBhcyB5b3UgY2FuIHByZXZlbnREZWZhdWx0IG9uIHRvdWNoc3RhcnQgdG9cbiAgLy8gZGlzYWJsZSBzY3JvbGwgaW4gaU9TICYgbW9iaWxlIENocm9tZSBtZXRhZml6enkvZmxpY2tpdHkjMTE3N1xuICBzdGFydEV2ZW50ID0gJ3RvdWNoc3RhcnQnO1xuICBhY3RpdmVFdmVudHMgPSBbICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnIF07XG59IGVsc2UgaWYgKCB3aW5kb3cuUG9pbnRlckV2ZW50ICkge1xuICAvLyBQb2ludGVyIEV2ZW50c1xuICBzdGFydEV2ZW50ID0gJ3BvaW50ZXJkb3duJztcbiAgYWN0aXZlRXZlbnRzID0gWyAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJywgJ3BvaW50ZXJjYW5jZWwnIF07XG59IGVsc2Uge1xuICAvLyBtb3VzZSBldmVudHNcbiAgc3RhcnRFdmVudCA9ICdtb3VzZWRvd24nO1xuICBhY3RpdmVFdmVudHMgPSBbICdtb3VzZW1vdmUnLCAnbW91c2V1cCcgXTtcbn1cblxuLy8gcHJvdG90eXBlIHNvIGl0IGNhbiBiZSBvdmVyd3JpdGVhYmxlIGJ5IEZsaWNraXR5XG5wcm90by50b3VjaEFjdGlvblZhbHVlID0gJ25vbmUnO1xuXG5wcm90by5iaW5kSGFuZGxlcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9iaW5kSGFuZGxlcyggJ2FkZEV2ZW50TGlzdGVuZXInLCB0aGlzLnRvdWNoQWN0aW9uVmFsdWUgKTtcbn07XG5cbnByb3RvLnVuYmluZEhhbmRsZXMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fYmluZEhhbmRsZXMoICdyZW1vdmVFdmVudExpc3RlbmVyJywgJycgKTtcbn07XG5cbi8qKlxuICogQWRkIG9yIHJlbW92ZSBzdGFydCBldmVudFxuICogQHBhcmFtIHtTdHJpbmd9IGJpbmRNZXRob2QgLSBhZGRFdmVudExpc3RlbmVyIG9yIHJlbW92ZUV2ZW50TGlzdGVuZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0b3VjaEFjdGlvbiAtIHZhbHVlIGZvciB0b3VjaC1hY3Rpb24gQ1NTIHByb3BlcnR5XG4gKi9cbnByb3RvLl9iaW5kSGFuZGxlcyA9IGZ1bmN0aW9uKCBiaW5kTWV0aG9kLCB0b3VjaEFjdGlvbiApIHtcbiAgdGhpcy5oYW5kbGVzLmZvckVhY2goICggaGFuZGxlICkgPT4ge1xuICAgIGhhbmRsZVsgYmluZE1ldGhvZCBdKCBzdGFydEV2ZW50LCB0aGlzICk7XG4gICAgaGFuZGxlWyBiaW5kTWV0aG9kIF0oICdjbGljaycsIHRoaXMgKTtcbiAgICAvLyB0b3VjaC1hY3Rpb246IG5vbmUgdG8gb3ZlcnJpZGUgYnJvd3NlciB0b3VjaCBnZXN0dXJlcy4gbWV0YWZpenp5L2ZsaWNraXR5IzU0MFxuICAgIGlmICggd2luZG93LlBvaW50ZXJFdmVudCApIGhhbmRsZS5zdHlsZS50b3VjaEFjdGlvbiA9IHRvdWNoQWN0aW9uO1xuICB9ICk7XG59O1xuXG5wcm90by5iaW5kQWN0aXZlUG9pbnRlckV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICBhY3RpdmVFdmVudHMuZm9yRWFjaCggKCBldmVudE5hbWUgKSA9PiB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIGV2ZW50TmFtZSwgdGhpcyApO1xuICB9ICk7XG59O1xuXG5wcm90by51bmJpbmRBY3RpdmVQb2ludGVyRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gIGFjdGl2ZUV2ZW50cy5mb3JFYWNoKCAoIGV2ZW50TmFtZSApID0+IHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggZXZlbnROYW1lLCB0aGlzICk7XG4gIH0gKTtcbn07XG5cbi8vIC0tLS0tIGV2ZW50IGhhbmRsZXIgaGVscGVycyAtLS0tLSAvL1xuXG4vLyB0cmlnZ2VyIG1ldGhvZCB3aXRoIG1hdGNoaW5nIHBvaW50ZXJcbnByb3RvLndpdGhQb2ludGVyID0gZnVuY3Rpb24oIG1ldGhvZE5hbWUsIGV2ZW50ICkge1xuICBpZiAoIGV2ZW50LnBvaW50ZXJJZCA9PT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcbiAgICB0aGlzWyBtZXRob2ROYW1lIF0oIGV2ZW50LCBldmVudCApO1xuICB9XG59O1xuXG4vLyB0cmlnZ2VyIG1ldGhvZCB3aXRoIG1hdGNoaW5nIHRvdWNoXG5wcm90by53aXRoVG91Y2ggPSBmdW5jdGlvbiggbWV0aG9kTmFtZSwgZXZlbnQgKSB7XG4gIGxldCB0b3VjaDtcbiAgZm9yICggbGV0IGNoYW5nZWRUb3VjaCBvZiBldmVudC5jaGFuZ2VkVG91Y2hlcyApIHtcbiAgICBpZiAoIGNoYW5nZWRUb3VjaC5pZGVudGlmaWVyID09PSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyICkge1xuICAgICAgdG91Y2ggPSBjaGFuZ2VkVG91Y2g7XG4gICAgfVxuICB9XG4gIGlmICggdG91Y2ggKSB0aGlzWyBtZXRob2ROYW1lIF0oIGV2ZW50LCB0b3VjaCApO1xufTtcblxuLy8gLS0tLS0gc3RhcnQgZXZlbnQgLS0tLS0gLy9cblxucHJvdG8ub25tb3VzZWRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMucG9pbnRlckRvd24oIGV2ZW50LCBldmVudCApO1xufTtcblxucHJvdG8ub250b3VjaHN0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLnBvaW50ZXJEb3duKCBldmVudCwgZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gKTtcbn07XG5cbnByb3RvLm9ucG9pbnRlcmRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMucG9pbnRlckRvd24oIGV2ZW50LCBldmVudCApO1xufTtcblxuLy8gbm9kZXMgdGhhdCBoYXZlIHRleHQgZmllbGRzXG5jb25zdCBjdXJzb3JOb2RlcyA9IFsgJ1RFWFRBUkVBJywgJ0lOUFVUJywgJ1NFTEVDVCcsICdPUFRJT04nIF07XG4vLyBpbnB1dCB0eXBlcyB0aGF0IGRvIG5vdCBoYXZlIHRleHQgZmllbGRzXG5jb25zdCBjbGlja1R5cGVzID0gWyAncmFkaW8nLCAnY2hlY2tib3gnLCAnYnV0dG9uJywgJ3N1Ym1pdCcsICdpbWFnZScsICdmaWxlJyBdO1xuXG4vKipcbiAqIGFueSB0aW1lIHlvdSBzZXQgYGV2ZW50LCBwb2ludGVyYCBpdCByZWZlcnMgdG86XG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtFdmVudCB8IFRvdWNofSBwb2ludGVyXG4gKi9cbnByb3RvLnBvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICAvLyBkaXNtaXNzIG11bHRpLXRvdWNoIHRhcHMsIHJpZ2h0IGNsaWNrcywgYW5kIGNsaWNrcyBvbiB0ZXh0IGZpZWxkc1xuICBsZXQgaXNDdXJzb3JOb2RlID0gY3Vyc29yTm9kZXMuaW5jbHVkZXMoIGV2ZW50LnRhcmdldC5ub2RlTmFtZSApO1xuICBsZXQgaXNDbGlja1R5cGUgPSBjbGlja1R5cGVzLmluY2x1ZGVzKCBldmVudC50YXJnZXQudHlwZSApO1xuICBsZXQgaXNPa2F5RWxlbWVudCA9ICFpc0N1cnNvck5vZGUgfHwgaXNDbGlja1R5cGU7XG4gIGxldCBpc09rYXkgPSAhdGhpcy5pc1BvaW50ZXJEb3duICYmICFldmVudC5idXR0b24gJiYgaXNPa2F5RWxlbWVudDtcbiAgaWYgKCAhaXNPa2F5ICkgcmV0dXJuO1xuXG4gIHRoaXMuaXNQb2ludGVyRG93biA9IHRydWU7XG4gIC8vIHNhdmUgcG9pbnRlciBpZGVudGlmaWVyIHRvIG1hdGNoIHVwIHRvdWNoIGV2ZW50c1xuICB0aGlzLnBvaW50ZXJJZGVudGlmaWVyID0gcG9pbnRlci5wb2ludGVySWQgIT09IHVuZGVmaW5lZCA/XG4gICAgLy8gcG9pbnRlcklkIGZvciBwb2ludGVyIGV2ZW50cywgdG91Y2guaW5kZW50aWZpZXIgZm9yIHRvdWNoIGV2ZW50c1xuICAgIHBvaW50ZXIucG9pbnRlcklkIDogcG9pbnRlci5pZGVudGlmaWVyO1xuICAvLyB0cmFjayBwb3NpdGlvbiBmb3IgbW92ZVxuICB0aGlzLnBvaW50ZXJEb3duUG9pbnRlciA9IHtcbiAgICBwYWdlWDogcG9pbnRlci5wYWdlWCxcbiAgICBwYWdlWTogcG9pbnRlci5wYWdlWSxcbiAgfTtcblxuICB0aGlzLmJpbmRBY3RpdmVQb2ludGVyRXZlbnRzKCk7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlckRvd24nLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIC0tLS0tIG1vdmUgLS0tLS0gLy9cblxucHJvdG8ub25tb3VzZW1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMucG9pbnRlck1vdmUoIGV2ZW50LCBldmVudCApO1xufTtcblxucHJvdG8ub25wb2ludGVybW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy53aXRoUG9pbnRlciggJ3BvaW50ZXJNb3ZlJywgZXZlbnQgKTtcbn07XG5cbnByb3RvLm9udG91Y2htb3ZlID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLndpdGhUb3VjaCggJ3BvaW50ZXJNb3ZlJywgZXZlbnQgKTtcbn07XG5cbnByb3RvLnBvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICBsZXQgbW92ZVZlY3RvciA9IHtcbiAgICB4OiBwb2ludGVyLnBhZ2VYIC0gdGhpcy5wb2ludGVyRG93blBvaW50ZXIucGFnZVgsXG4gICAgeTogcG9pbnRlci5wYWdlWSAtIHRoaXMucG9pbnRlckRvd25Qb2ludGVyLnBhZ2VZLFxuICB9O1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJNb3ZlJywgWyBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciBdICk7XG4gIC8vIHN0YXJ0IGRyYWcgaWYgcG9pbnRlciBoYXMgbW92ZWQgZmFyIGVub3VnaCB0byBzdGFydCBkcmFnXG4gIGxldCBpc0RyYWdTdGFydGluZyA9ICF0aGlzLmlzRHJhZ2dpbmcgJiYgdGhpcy5oYXNEcmFnU3RhcnRlZCggbW92ZVZlY3RvciApO1xuICBpZiAoIGlzRHJhZ1N0YXJ0aW5nICkgdGhpcy5kcmFnU3RhcnQoIGV2ZW50LCBwb2ludGVyICk7XG4gIGlmICggdGhpcy5pc0RyYWdnaW5nICkgdGhpcy5kcmFnTW92ZSggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKTtcbn07XG5cbi8vIGNvbmRpdGlvbiBpZiBwb2ludGVyIGhhcyBtb3ZlZCBmYXIgZW5vdWdoIHRvIHN0YXJ0IGRyYWdcbnByb3RvLmhhc0RyYWdTdGFydGVkID0gZnVuY3Rpb24oIG1vdmVWZWN0b3IgKSB7XG4gIHJldHVybiBNYXRoLmFicyggbW92ZVZlY3Rvci54ICkgPiAzIHx8IE1hdGguYWJzKCBtb3ZlVmVjdG9yLnkgKSA+IDM7XG59O1xuXG4vLyAtLS0tLSBkcmFnIC0tLS0tIC8vXG5cbnByb3RvLmRyYWdTdGFydCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgdGhpcy5pc1ByZXZlbnRpbmdDbGlja3MgPSB0cnVlOyAvLyBzZXQgZmxhZyB0byBwcmV2ZW50IGNsaWNrc1xuICB0aGlzLmVtaXRFdmVudCggJ2RyYWdTdGFydCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxucHJvdG8uZHJhZ01vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ01vdmUnLCBbIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcbn07XG5cbi8vIC0tLS0tIGVuZCAtLS0tLSAvL1xuXG5wcm90by5vbm1vdXNldXAgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMucG9pbnRlclVwKCBldmVudCwgZXZlbnQgKTtcbn07XG5cbnByb3RvLm9ucG9pbnRlcnVwID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLndpdGhQb2ludGVyKCAncG9pbnRlclVwJywgZXZlbnQgKTtcbn07XG5cbnByb3RvLm9udG91Y2hlbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMud2l0aFRvdWNoKCAncG9pbnRlclVwJywgZXZlbnQgKTtcbn07XG5cbnByb3RvLnBvaW50ZXJVcCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5wb2ludGVyRG9uZSgpO1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJVcCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xuXG4gIGlmICggdGhpcy5pc0RyYWdnaW5nICkge1xuICAgIHRoaXMuZHJhZ0VuZCggZXZlbnQsIHBvaW50ZXIgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBwb2ludGVyIGRpZG4ndCBtb3ZlIGVub3VnaCBmb3IgZHJhZyB0byBzdGFydFxuICAgIHRoaXMuc3RhdGljQ2xpY2soIGV2ZW50LCBwb2ludGVyICk7XG4gIH1cbn07XG5cbnByb3RvLmRyYWdFbmQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlOyAvLyByZXNldCBmbGFnXG4gIC8vIHJlLWVuYWJsZSBjbGlja2luZyBhc3luY1xuICBzZXRUaW1lb3V0KCAoKSA9PiBkZWxldGUgdGhpcy5pc1ByZXZlbnRpbmdDbGlja3MgKTtcblxuICB0aGlzLmVtaXRFdmVudCggJ2RyYWdFbmQnLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIHRyaWdnZXJlZCBvbiBwb2ludGVyIHVwICYgcG9pbnRlciBjYW5jZWxcbnByb3RvLnBvaW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaXNQb2ludGVyRG93biA9IGZhbHNlO1xuICBkZWxldGUgdGhpcy5wb2ludGVySWRlbnRpZmllcjtcbiAgdGhpcy51bmJpbmRBY3RpdmVQb2ludGVyRXZlbnRzKCk7XG4gIHRoaXMuZW1pdEV2ZW50KCdwb2ludGVyRG9uZScpO1xufTtcblxuLy8gLS0tLS0gY2FuY2VsIC0tLS0tIC8vXG5cbnByb3RvLm9ucG9pbnRlcmNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy53aXRoUG9pbnRlciggJ3BvaW50ZXJDYW5jZWwnLCBldmVudCApO1xufTtcblxucHJvdG8ub250b3VjaGNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy53aXRoVG91Y2goICdwb2ludGVyQ2FuY2VsJywgZXZlbnQgKTtcbn07XG5cbnByb3RvLnBvaW50ZXJDYW5jZWwgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMucG9pbnRlckRvbmUoKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyQ2FuY2VsJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyAtLS0tLSBjbGljayAtLS0tLSAvL1xuXG4vLyBoYW5kbGUgYWxsIGNsaWNrcyBhbmQgcHJldmVudCBjbGlja3Mgd2hlbiBkcmFnZ2luZ1xucHJvdG8ub25jbGljayA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyApIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG59O1xuXG4vLyB0cmlnZ2VyZWQgYWZ0ZXIgcG9pbnRlciBkb3duICYgdXAgd2l0aCBuby90aW55IG1vdmVtZW50XG5wcm90by5zdGF0aWNDbGljayA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgLy8gaWdub3JlIGVtdWxhdGVkIG1vdXNlIHVwIGNsaWNrc1xuICBsZXQgaXNNb3VzZXVwID0gZXZlbnQudHlwZSA9PT0gJ21vdXNldXAnO1xuICBpZiAoIGlzTW91c2V1cCAmJiB0aGlzLmlzSWdub3JpbmdNb3VzZVVwICkgcmV0dXJuO1xuXG4gIHRoaXMuZW1pdEV2ZW50KCAnc3RhdGljQ2xpY2snLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcblxuICAvLyBzZXQgZmxhZyBmb3IgZW11bGF0ZWQgY2xpY2tzIDMwMG1zIGFmdGVyIHRvdWNoZW5kXG4gIGlmICggaXNNb3VzZXVwICkge1xuICAgIHRoaXMuaXNJZ25vcmluZ01vdXNlVXAgPSB0cnVlO1xuICAgIC8vIHJlc2V0IGZsYWcgYWZ0ZXIgNDAwbXNcbiAgICBzZXRUaW1lb3V0KCAoKSA9PiB7XG4gICAgICBkZWxldGUgdGhpcy5pc0lnbm9yaW5nTW91c2VVcDtcbiAgICB9LCA0MDAgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBVbmlkcmFnZ2VyO1xuXG59ICkgKTtcblxufSx7XCJldi1lbWl0dGVyXCI6MX1dLDE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIHZlbmRvclxyXG53aW5kb3cuRmxpY2tpdHkgPSByZXF1aXJlKCdmbGlja2l0eScpO1xyXG5yZXF1aXJlKCdsYXp5c2l6ZXMnKTtcclxuXHJcbi8vIG1vZHVsZXNcclxud2luZG93LlB1YlN1YiA9IHJlcXVpcmUoJy4vc2NyaXB0cy9wdWJzdWInKTtcclxuXHJcbmZ1bmN0aW9uIGRlYm91bmNlKGZuLCB3YWl0KSB7XHJcblx0bGV0IHQ7XHJcblx0cmV0dXJuICguLi5hcmdzKSA9PiB7XHJcblx0XHRjbGVhclRpbWVvdXQodCk7XHJcblx0XHR0ID0gc2V0VGltZW91dCgoKSA9PiBmbi5hcHBseSh0aGlzLCBhcmdzKSwgd2FpdCk7XHJcblx0fTtcclxufVxyXG5cbn0se1wiLi9zY3JpcHRzL3B1YnN1YlwiOjIwLFwiZmxpY2tpdHlcIjo5LFwibGF6eXNpemVzXCI6MTd9XSwyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRFVkVOVFM6IHtcclxuXHRcdGNhcnRVcGRhdGVkOiAnY2FydC11cGRhdGVkJ1xyXG5cdH0sXHJcblx0c3Vic2NyaWJlcnM6IHt9LFxyXG5cdHN1YnNjcmliZTogZnVuY3Rpb24gKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcclxuXHRcdGlmICh0aGlzLnN1YnNjcmliZXJzW2V2ZW50TmFtZV0gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aGlzLnN1YnNjcmliZXJzW2V2ZW50TmFtZV0gPSBbXTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnN1YnNjcmliZXJzW2V2ZW50TmFtZV0gPSBbLi4udGhpcy5zdWJzY3JpYmVyc1tldmVudE5hbWVdLCBjYWxsYmFja107XHJcblxyXG5cdFx0cmV0dXJuICgpID0+IHtcclxuXHRcdFx0dGhpcy5zdWJzY3JpYmVyc1tldmVudE5hbWVdID0gdGhpcy5zdWJzY3JpYmVyc1tldmVudE5hbWVdLmZpbHRlcigoY2IpID0+IHtcclxuXHRcdFx0XHRyZXR1cm4gY2IgIT09IGNhbGxiYWNrO1xyXG5cdFx0XHR9KTtcclxuXHRcdH07XHJcblx0fSxcclxuXHRwdWJsaXNoOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBkYXRhKSB7XHJcblx0XHRpZiAodGhpcy5zdWJzY3JpYmVyc1tldmVudE5hbWVdKSB7XHJcblx0XHRcdHRoaXMuc3Vic2NyaWJlcnNbZXZlbnROYW1lXS5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xyXG5cdFx0XHRcdGNhbGxiYWNrKGRhdGEpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXG59LHt9XX0se30sWzE5XSlcblxuIiwiLyoqXG4gKiBGaXp6eSBVSSB1dGlscyB2My4wLjBcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCBnbG9iYWwgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGdsb2JhbC5maXp6eVVJVXRpbHMgPSBmYWN0b3J5KCBnbG9iYWwgKTtcbiAgfVxuXG59KCB0aGlzLCBmdW5jdGlvbiBmYWN0b3J5KCBnbG9iYWwgKSB7XG5cbmxldCB1dGlscyA9IHt9O1xuXG4vLyAtLS0tLSBleHRlbmQgLS0tLS0gLy9cblxuLy8gZXh0ZW5kcyBvYmplY3RzXG51dGlscy5leHRlbmQgPSBmdW5jdGlvbiggYSwgYiApIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oIGEsIGIgKTtcbn07XG5cbi8vIC0tLS0tIG1vZHVsbyAtLS0tLSAvL1xuXG51dGlscy5tb2R1bG8gPSBmdW5jdGlvbiggbnVtLCBkaXYgKSB7XG4gIHJldHVybiAoICggbnVtICUgZGl2ICkgKyBkaXYgKSAlIGRpdjtcbn07XG5cbi8vIC0tLS0tIG1ha2VBcnJheSAtLS0tLSAvL1xuXG4vLyB0dXJuIGVsZW1lbnQgb3Igbm9kZUxpc3QgaW50byBhbiBhcnJheVxudXRpbHMubWFrZUFycmF5ID0gZnVuY3Rpb24oIG9iaiApIHtcbiAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XG4gIGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSByZXR1cm4gb2JqO1xuXG4gIC8vIHJldHVybiBlbXB0eSBhcnJheSBpZiB1bmRlZmluZWQgb3IgbnVsbC4gIzZcbiAgaWYgKCBvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQgKSByZXR1cm4gW107XG5cbiAgbGV0IGlzQXJyYXlMaWtlID0gdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmxlbmd0aCA9PSAnbnVtYmVyJztcbiAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxuICBpZiAoIGlzQXJyYXlMaWtlICkgcmV0dXJuIFsgLi4ub2JqIF07XG5cbiAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XG4gIHJldHVybiBbIG9iaiBdO1xufTtcblxuLy8gLS0tLS0gcmVtb3ZlRnJvbSAtLS0tLSAvL1xuXG51dGlscy5yZW1vdmVGcm9tID0gZnVuY3Rpb24oIGFyeSwgb2JqICkge1xuICBsZXQgaW5kZXggPSBhcnkuaW5kZXhPZiggb2JqICk7XG4gIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgYXJ5LnNwbGljZSggaW5kZXgsIDEgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gZ2V0UGFyZW50IC0tLS0tIC8vXG5cbnV0aWxzLmdldFBhcmVudCA9IGZ1bmN0aW9uKCBlbGVtLCBzZWxlY3RvciApIHtcbiAgd2hpbGUgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbSAhPSBkb2N1bWVudC5ib2R5ICkge1xuICAgIGVsZW0gPSBlbGVtLnBhcmVudE5vZGU7XG4gICAgaWYgKCBlbGVtLm1hdGNoZXMoIHNlbGVjdG9yICkgKSByZXR1cm4gZWxlbTtcbiAgfVxufTtcblxuLy8gLS0tLS0gZ2V0UXVlcnlFbGVtZW50IC0tLS0tIC8vXG5cbi8vIHVzZSBlbGVtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xudXRpbHMuZ2V0UXVlcnlFbGVtZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcbiAgfVxuICByZXR1cm4gZWxlbTtcbn07XG5cbi8vIC0tLS0tIGhhbmRsZUV2ZW50IC0tLS0tIC8vXG5cbi8vIGVuYWJsZSAub250eXBlIHRvIHRyaWdnZXIgZnJvbSAuYWRkRXZlbnRMaXN0ZW5lciggZWxlbSwgJ3R5cGUnIClcbnV0aWxzLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBsZXQgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGZpbHRlckZpbmRFbGVtZW50cyAtLS0tLSAvL1xuXG51dGlscy5maWx0ZXJGaW5kRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMsIHNlbGVjdG9yICkge1xuICAvLyBtYWtlIGFycmF5IG9mIGVsZW1zXG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuXG4gIHJldHVybiBlbGVtc1xuICAgIC8vIGNoZWNrIHRoYXQgZWxlbSBpcyBhbiBhY3R1YWwgZWxlbWVudFxuICAgIC5maWx0ZXIoICggZWxlbSApID0+IGVsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCApXG4gICAgLnJlZHVjZSggKCBmZkVsZW1zLCBlbGVtICkgPT4ge1xuICAgICAgLy8gYWRkIGVsZW0gaWYgbm8gc2VsZWN0b3JcbiAgICAgIGlmICggIXNlbGVjdG9yICkge1xuICAgICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcbiAgICAgICAgcmV0dXJuIGZmRWxlbXM7XG4gICAgICB9XG4gICAgICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYSBzZWxlY3RvclxuICAgICAgLy8gZmlsdGVyXG4gICAgICBpZiAoIGVsZW0ubWF0Y2hlcyggc2VsZWN0b3IgKSApIHtcbiAgICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XG4gICAgICB9XG4gICAgICAvLyBmaW5kIGNoaWxkcmVuXG4gICAgICBsZXQgY2hpbGRFbGVtcyA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCggc2VsZWN0b3IgKTtcbiAgICAgIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XG4gICAgICBmZkVsZW1zID0gZmZFbGVtcy5jb25jYXQoIC4uLmNoaWxkRWxlbXMgKTtcbiAgICAgIHJldHVybiBmZkVsZW1zO1xuICAgIH0sIFtdICk7XG59O1xuXG4vLyAtLS0tLSBkZWJvdW5jZU1ldGhvZCAtLS0tLSAvL1xuXG51dGlscy5kZWJvdW5jZU1ldGhvZCA9IGZ1bmN0aW9uKCBfY2xhc3MsIG1ldGhvZE5hbWUsIHRocmVzaG9sZCApIHtcbiAgdGhyZXNob2xkID0gdGhyZXNob2xkIHx8IDEwMDtcbiAgLy8gb3JpZ2luYWwgbWV0aG9kXG4gIGxldCBtZXRob2QgPSBfY2xhc3MucHJvdG90eXBlWyBtZXRob2ROYW1lIF07XG4gIGxldCB0aW1lb3V0TmFtZSA9IG1ldGhvZE5hbWUgKyAnVGltZW91dCc7XG5cbiAgX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdID0gZnVuY3Rpb24oKSB7XG4gICAgY2xlYXJUaW1lb3V0KCB0aGlzWyB0aW1lb3V0TmFtZSBdICk7XG5cbiAgICBsZXQgYXJncyA9IGFyZ3VtZW50cztcbiAgICB0aGlzWyB0aW1lb3V0TmFtZSBdID0gc2V0VGltZW91dCggKCkgPT4ge1xuICAgICAgbWV0aG9kLmFwcGx5KCB0aGlzLCBhcmdzICk7XG4gICAgICBkZWxldGUgdGhpc1sgdGltZW91dE5hbWUgXTtcbiAgICB9LCB0aHJlc2hvbGQgKTtcbiAgfTtcbn07XG5cbi8vIC0tLS0tIGRvY1JlYWR5IC0tLS0tIC8vXG5cbnV0aWxzLmRvY1JlYWR5ID0gZnVuY3Rpb24oIG9uRG9jUmVhZHkgKSB7XG4gIGxldCByZWFkeVN0YXRlID0gZG9jdW1lbnQucmVhZHlTdGF0ZTtcbiAgaWYgKCByZWFkeVN0YXRlID09ICdjb21wbGV0ZScgfHwgcmVhZHlTdGF0ZSA9PSAnaW50ZXJhY3RpdmUnICkge1xuICAgIC8vIGRvIGFzeW5jIHRvIGFsbG93IGZvciBvdGhlciBzY3JpcHRzIHRvIHJ1bi4gbWV0YWZpenp5L2ZsaWNraXR5IzQ0MVxuICAgIHNldFRpbWVvdXQoIG9uRG9jUmVhZHkgKTtcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnRE9NQ29udGVudExvYWRlZCcsIG9uRG9jUmVhZHkgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gaHRtbEluaXQgLS0tLS0gLy9cblxuLy8gaHR0cDovL2JpdC5seS8zb1lMdXNjXG51dGlscy50b0Rhc2hlZCA9IGZ1bmN0aW9uKCBzdHIgKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSggLyguKShbQS1aXSkvZywgZnVuY3Rpb24oIG1hdGNoLCAkMSwgJDIgKSB7XG4gICAgcmV0dXJuICQxICsgJy0nICsgJDI7XG4gIH0gKS50b0xvd2VyQ2FzZSgpO1xufTtcblxubGV0IGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcblxuLy8gYWxsb3cgdXNlciB0byBpbml0aWFsaXplIGNsYXNzZXMgdmlhIFtkYXRhLW5hbWVzcGFjZV0gb3IgLmpzLW5hbWVzcGFjZSBjbGFzc1xuLy8gaHRtbEluaXQoIFdpZGdldCwgJ3dpZGdldE5hbWUnIClcbi8vIG9wdGlvbnMgYXJlIHBhcnNlZCBmcm9tIGRhdGEtbmFtZXNwYWNlLW9wdGlvbnNcbnV0aWxzLmh0bWxJbml0ID0gZnVuY3Rpb24oIFdpZGdldENsYXNzLCBuYW1lc3BhY2UgKSB7XG4gIHV0aWxzLmRvY1JlYWR5KCBmdW5jdGlvbigpIHtcbiAgICBsZXQgZGFzaGVkTmFtZXNwYWNlID0gdXRpbHMudG9EYXNoZWQoIG5hbWVzcGFjZSApO1xuICAgIGxldCBkYXRhQXR0ciA9ICdkYXRhLScgKyBkYXNoZWROYW1lc3BhY2U7XG4gICAgbGV0IGRhdGFBdHRyRWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCBgWyR7ZGF0YUF0dHJ9XWAgKTtcbiAgICBsZXQgalF1ZXJ5ID0gZ2xvYmFsLmpRdWVyeTtcblxuICAgIFsgLi4uZGF0YUF0dHJFbGVtcyBdLmZvckVhY2goICggZWxlbSApID0+IHtcbiAgICAgIGxldCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIGRhdGFBdHRyICk7XG4gICAgICBsZXQgb3B0aW9ucztcbiAgICAgIHRyeSB7XG4gICAgICAgIG9wdGlvbnMgPSBhdHRyICYmIEpTT04ucGFyc2UoIGF0dHIgKTtcbiAgICAgIH0gY2F0Y2ggKCBlcnJvciApIHtcbiAgICAgICAgLy8gbG9nIGVycm9yLCBkbyBub3QgaW5pdGlhbGl6ZVxuICAgICAgICBpZiAoIGNvbnNvbGUgKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvciggYEVycm9yIHBhcnNpbmcgJHtkYXRhQXR0cn0gb24gJHtlbGVtLmNsYXNzTmFtZX06ICR7ZXJyb3J9YCApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIGluaXRpYWxpemVcbiAgICAgIGxldCBpbnN0YW5jZSA9IG5ldyBXaWRnZXRDbGFzcyggZWxlbSwgb3B0aW9ucyApO1xuICAgICAgLy8gbWFrZSBhdmFpbGFibGUgdmlhICQoKS5kYXRhKCduYW1lc3BhY2UnKVxuICAgICAgaWYgKCBqUXVlcnkgKSB7XG4gICAgICAgIGpRdWVyeS5kYXRhKCBlbGVtLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XG4gICAgICB9XG4gICAgfSApO1xuXG4gIH0gKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gdXRpbHM7XG5cbn0gKSApO1xuIiwiLy8gYWRkLCByZW1vdmUgY2VsbFxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICByZXF1aXJlKCcuL2NvcmUnKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxuICAgICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIEZsaWNraXR5LCB1dGlscyApIHtcblxuLy8gYXBwZW5kIGNlbGxzIHRvIGEgZG9jdW1lbnQgZnJhZ21lbnRcbmZ1bmN0aW9uIGdldENlbGxzRnJhZ21lbnQoIGNlbGxzICkge1xuICBsZXQgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIGNlbGxzLmZvckVhY2goICggY2VsbCApID0+IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjZWxsLmVsZW1lbnQgKSApO1xuICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGFkZC9yZW1vdmUgY2VsbCBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxubGV0IHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG4vKipcbiAqIEluc2VydCwgcHJlcGVuZCwgb3IgYXBwZW5kIGNlbGxzXG4gKiBAcGFyYW0ge1tFbGVtZW50LCBBcnJheSwgTm9kZUxpc3RdfSBlbGVtcyAtIEVsZW1lbnRzIHRvIGluc2VydFxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIFplcm8tYmFzZWQgbnVtYmVyIHRvIGluc2VydFxuICovXG5wcm90by5pbnNlcnQgPSBmdW5jdGlvbiggZWxlbXMsIGluZGV4ICkge1xuICBsZXQgY2VsbHMgPSB0aGlzLl9tYWtlQ2VsbHMoIGVsZW1zICk7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSByZXR1cm47XG5cbiAgbGV0IGxlbiA9IHRoaXMuY2VsbHMubGVuZ3RoO1xuICAvLyBkZWZhdWx0IHRvIGFwcGVuZFxuICBpbmRleCA9IGluZGV4ID09PSB1bmRlZmluZWQgPyBsZW4gOiBpbmRleDtcbiAgLy8gYWRkIGNlbGxzIHdpdGggZG9jdW1lbnQgZnJhZ21lbnRcbiAgbGV0IGZyYWdtZW50ID0gZ2V0Q2VsbHNGcmFnbWVudCggY2VsbHMgKTtcbiAgLy8gYXBwZW5kIHRvIHNsaWRlclxuICBsZXQgaXNBcHBlbmQgPSBpbmRleCA9PT0gbGVuO1xuICBpZiAoIGlzQXBwZW5kICkge1xuICAgIHRoaXMuc2xpZGVyLmFwcGVuZENoaWxkKCBmcmFnbWVudCApO1xuICB9IGVsc2Uge1xuICAgIGxldCBpbnNlcnRDZWxsRWxlbWVudCA9IHRoaXMuY2VsbHNbIGluZGV4IF0uZWxlbWVudDtcbiAgICB0aGlzLnNsaWRlci5pbnNlcnRCZWZvcmUoIGZyYWdtZW50LCBpbnNlcnRDZWxsRWxlbWVudCApO1xuICB9XG4gIC8vIGFkZCB0byB0aGlzLmNlbGxzXG4gIGlmICggaW5kZXggPT09IDAgKSB7XG4gICAgLy8gcHJlcGVuZCwgYWRkIHRvIHN0YXJ0XG4gICAgdGhpcy5jZWxscyA9IGNlbGxzLmNvbmNhdCggdGhpcy5jZWxscyApO1xuICB9IGVsc2UgaWYgKCBpc0FwcGVuZCApIHtcbiAgICAvLyBhcHBlbmQsIGFkZCB0byBlbmRcbiAgICB0aGlzLmNlbGxzID0gdGhpcy5jZWxscy5jb25jYXQoIGNlbGxzICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW5zZXJ0IGluIHRoaXMuY2VsbHNcbiAgICBsZXQgZW5kQ2VsbHMgPSB0aGlzLmNlbGxzLnNwbGljZSggaW5kZXgsIGxlbiAtIGluZGV4ICk7XG4gICAgdGhpcy5jZWxscyA9IHRoaXMuY2VsbHMuY29uY2F0KCBjZWxscyApLmNvbmNhdCggZW5kQ2VsbHMgKTtcbiAgfVxuXG4gIHRoaXMuX3NpemVDZWxscyggY2VsbHMgKTtcbiAgdGhpcy5jZWxsQ2hhbmdlKCBpbmRleCApO1xuICB0aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpO1xufTtcblxucHJvdG8uYXBwZW5kID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB0aGlzLmluc2VydCggZWxlbXMsIHRoaXMuY2VsbHMubGVuZ3RoICk7XG59O1xuXG5wcm90by5wcmVwZW5kID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB0aGlzLmluc2VydCggZWxlbXMsIDAgKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGNlbGxzXG4gKiBAcGFyYW0ge1tFbGVtZW50LCBBcnJheSwgTm9kZUxpc3RdfSBlbGVtcyAtIEVMZW1lbnRzIHRvIHJlbW92ZVxuICovXG5wcm90by5yZW1vdmUgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIGxldCBjZWxscyA9IHRoaXMuZ2V0Q2VsbHMoIGVsZW1zICk7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSByZXR1cm47XG5cbiAgbGV0IG1pbkNlbGxJbmRleCA9IHRoaXMuY2VsbHMubGVuZ3RoIC0gMTtcbiAgLy8gcmVtb3ZlIGNlbGxzIGZyb20gY29sbGVjdGlvbiAmIERPTVxuICBjZWxscy5mb3JFYWNoKCAoIGNlbGwgKSA9PiB7XG4gICAgY2VsbC5yZW1vdmUoKTtcbiAgICBsZXQgaW5kZXggPSB0aGlzLmNlbGxzLmluZGV4T2YoIGNlbGwgKTtcbiAgICBtaW5DZWxsSW5kZXggPSBNYXRoLm1pbiggaW5kZXgsIG1pbkNlbGxJbmRleCApO1xuICAgIHV0aWxzLnJlbW92ZUZyb20oIHRoaXMuY2VsbHMsIGNlbGwgKTtcbiAgfSApO1xuXG4gIHRoaXMuY2VsbENoYW5nZSggbWluQ2VsbEluZGV4ICk7XG4gIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG59O1xuXG4vKipcbiAqIGxvZ2ljIHRvIGJlIHJ1biBhZnRlciBhIGNlbGwncyBzaXplIGNoYW5nZXNcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIGNlbGwncyBlbGVtZW50XG4gKi9cbnByb3RvLmNlbGxTaXplQ2hhbmdlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGxldCBjZWxsID0gdGhpcy5nZXRDZWxsKCBlbGVtICk7XG4gIGlmICggIWNlbGwgKSByZXR1cm47XG5cbiAgY2VsbC5nZXRTaXplKCk7XG5cbiAgbGV0IGluZGV4ID0gdGhpcy5jZWxscy5pbmRleE9mKCBjZWxsICk7XG4gIHRoaXMuY2VsbENoYW5nZSggaW5kZXggKTtcbiAgLy8gZG8gbm90IHBvc2l0aW9uIHNsaWRlciBhZnRlciBsYXp5IGxvYWRcbn07XG5cbi8qKlxuICogbG9naWMgYW55IHRpbWUgYSBjZWxsIGlzIGNoYW5nZWQ6IGFkZGVkLCByZW1vdmVkLCBvciBzaXplIGNoYW5nZWRcbiAqIEBwYXJhbSB7SW50ZWdlcn0gY2hhbmdlZENlbGxJbmRleCAtIGluZGV4IG9mIHRoZSBjaGFuZ2VkIGNlbGwsIG9wdGlvbmFsXG4gKi9cbnByb3RvLmNlbGxDaGFuZ2UgPSBmdW5jdGlvbiggY2hhbmdlZENlbGxJbmRleCApIHtcbiAgbGV0IHByZXZTZWxlY3RlZEVsZW0gPSB0aGlzLnNlbGVjdGVkRWxlbWVudDtcbiAgdGhpcy5fcG9zaXRpb25DZWxscyggY2hhbmdlZENlbGxJbmRleCApO1xuICB0aGlzLl91cGRhdGVXcmFwU2hpZnRDZWxscygpO1xuICB0aGlzLnNldEdhbGxlcnlTaXplKCk7XG4gIC8vIHVwZGF0ZSBzZWxlY3RlZEluZGV4LCB0cnkgdG8gbWFpbnRhaW4gcG9zaXRpb24gJiBzZWxlY3QgcHJldmlvdXMgc2VsZWN0ZWQgZWxlbWVudFxuICBsZXQgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggcHJldlNlbGVjdGVkRWxlbSApO1xuICBpZiAoIGNlbGwgKSB0aGlzLnNlbGVjdGVkSW5kZXggPSB0aGlzLmdldENlbGxTbGlkZUluZGV4KCBjZWxsICk7XG4gIHRoaXMuc2VsZWN0ZWRJbmRleCA9IE1hdGgubWluKCB0aGlzLnNsaWRlcy5sZW5ndGggLSAxLCB0aGlzLnNlbGVjdGVkSW5kZXggKTtcblxuICB0aGlzLmVtaXRFdmVudCggJ2NlbGxDaGFuZ2UnLCBbIGNoYW5nZWRDZWxsSW5kZXggXSApO1xuICAvLyBwb3NpdGlvbiBzbGlkZXJcbiAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG4iLCIvLyBhbmltYXRlXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IHdpbmRvdy5GbGlja2l0eSB8fCB7fTtcbiAgICB3aW5kb3cuRmxpY2tpdHkuYW5pbWF0ZVByb3RvdHlwZSA9IGZhY3RvcnkoIHdpbmRvdy5maXp6eVVJVXRpbHMgKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSggdXRpbHMgKSB7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGFuaW1hdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxubGV0IHByb3RvID0ge307XG5cbnByb3RvLnN0YXJ0QW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5pc0FuaW1hdGluZyApIHJldHVybjtcblxuICB0aGlzLmlzQW5pbWF0aW5nID0gdHJ1ZTtcbiAgdGhpcy5yZXN0aW5nRnJhbWVzID0gMDtcbiAgdGhpcy5hbmltYXRlKCk7XG59O1xuXG5wcm90by5hbmltYXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYXBwbHlEcmFnRm9yY2UoKTtcbiAgdGhpcy5hcHBseVNlbGVjdGVkQXR0cmFjdGlvbigpO1xuXG4gIGxldCBwcmV2aW91c1ggPSB0aGlzLng7XG5cbiAgdGhpcy5pbnRlZ3JhdGVQaHlzaWNzKCk7XG4gIHRoaXMucG9zaXRpb25TbGlkZXIoKTtcbiAgdGhpcy5zZXR0bGUoIHByZXZpb3VzWCApO1xuICAvLyBhbmltYXRlIG5leHQgZnJhbWVcbiAgaWYgKCB0aGlzLmlzQW5pbWF0aW5nICkgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCAoKSA9PiB0aGlzLmFuaW1hdGUoKSApO1xufTtcblxucHJvdG8ucG9zaXRpb25TbGlkZXIgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHggPSB0aGlzLng7XG4gIC8vIHdyYXAgcG9zaXRpb24gYXJvdW5kXG4gIGlmICggdGhpcy5pc1dyYXBwaW5nICkge1xuICAgIHggPSB1dGlscy5tb2R1bG8oIHgsIHRoaXMuc2xpZGVhYmxlV2lkdGggKSAtIHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gICAgdGhpcy5zaGlmdFdyYXBDZWxscyggeCApO1xuICB9XG5cbiAgdGhpcy5zZXRUcmFuc2xhdGVYKCB4LCB0aGlzLmlzQW5pbWF0aW5nICk7XG4gIHRoaXMuZGlzcGF0Y2hTY3JvbGxFdmVudCgpO1xufTtcblxucHJvdG8uc2V0VHJhbnNsYXRlWCA9IGZ1bmN0aW9uKCB4LCBpczNkICkge1xuICB4ICs9IHRoaXMuY3Vyc29yUG9zaXRpb247XG4gIC8vIHJldmVyc2UgaWYgcmlnaHQtdG8tbGVmdCBhbmQgdXNpbmcgdHJhbnNmb3JtXG4gIGlmICggdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ICkgeCA9IC14O1xuICBsZXQgdHJhbnNsYXRlWCA9IHRoaXMuZ2V0UG9zaXRpb25WYWx1ZSggeCApO1xuICAvLyB1c2UgM0QgdHJhbnNmb3JtcyBmb3IgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIG9uIGlPU1xuICAvLyBidXQgdXNlIDJEIHdoZW4gc2V0dGxlZCwgZm9yIGJldHRlciBmb250LXJlbmRlcmluZ1xuICB0aGlzLnNsaWRlci5zdHlsZS50cmFuc2Zvcm0gPSBpczNkID9cbiAgICBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVYfSwwLDApYCA6IGB0cmFuc2xhdGVYKCR7dHJhbnNsYXRlWH0pYDtcbn07XG5cbnByb3RvLmRpc3BhdGNoU2Nyb2xsRXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGZpcnN0U2xpZGUgPSB0aGlzLnNsaWRlc1swXTtcbiAgaWYgKCAhZmlyc3RTbGlkZSApIHJldHVybjtcblxuICBsZXQgcG9zaXRpb25YID0gLXRoaXMueCAtIGZpcnN0U2xpZGUudGFyZ2V0O1xuICBsZXQgcHJvZ3Jlc3MgPSBwb3NpdGlvblggLyB0aGlzLnNsaWRlc1dpZHRoO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdzY3JvbGwnLCBudWxsLCBbIHByb2dyZXNzLCBwb3NpdGlvblggXSApO1xufTtcblxucHJvdG8ucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMuY2VsbHMubGVuZ3RoICkgcmV0dXJuO1xuXG4gIHRoaXMueCA9IC10aGlzLnNlbGVjdGVkU2xpZGUudGFyZ2V0O1xuICB0aGlzLnZlbG9jaXR5ID0gMDsgLy8gc3RvcCB3b2JibGVcbiAgdGhpcy5wb3NpdGlvblNsaWRlcigpO1xufTtcblxucHJvdG8uZ2V0UG9zaXRpb25WYWx1ZSA9IGZ1bmN0aW9uKCBwb3NpdGlvbiApIHtcbiAgaWYgKCB0aGlzLm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICkge1xuICAgIC8vIHBlcmNlbnQgcG9zaXRpb24sIHJvdW5kIHRvIDIgZGlnaXRzLCBsaWtlIDEyLjM0JVxuICAgIHJldHVybiAoIE1hdGgucm91bmQoICggcG9zaXRpb24gLyB0aGlzLnNpemUuaW5uZXJXaWR0aCApICogMTAwMDAgKSAqIDAuMDEgKSArICclJztcbiAgfSBlbHNlIHtcbiAgICAvLyBwaXhlbCBwb3NpdGlvbmluZ1xuICAgIHJldHVybiBNYXRoLnJvdW5kKCBwb3NpdGlvbiApICsgJ3B4JztcbiAgfVxufTtcblxucHJvdG8uc2V0dGxlID0gZnVuY3Rpb24oIHByZXZpb3VzWCApIHtcbiAgLy8ga2VlcCB0cmFjayBvZiBmcmFtZXMgd2hlcmUgeCBoYXNuJ3QgbW92ZWRcbiAgbGV0IGlzUmVzdGluZyA9ICF0aGlzLmlzUG9pbnRlckRvd24gJiZcbiAgICAgIE1hdGgucm91bmQoIHRoaXMueCAqIDEwMCApID09PSBNYXRoLnJvdW5kKCBwcmV2aW91c1ggKiAxMDAgKTtcbiAgaWYgKCBpc1Jlc3RpbmcgKSB0aGlzLnJlc3RpbmdGcmFtZXMrKztcbiAgLy8gc3RvcCBhbmltYXRpbmcgaWYgcmVzdGluZyBmb3IgMyBvciBtb3JlIGZyYW1lc1xuICBpZiAoIHRoaXMucmVzdGluZ0ZyYW1lcyA+IDIgKSB7XG4gICAgdGhpcy5pc0FuaW1hdGluZyA9IGZhbHNlO1xuICAgIGRlbGV0ZSB0aGlzLmlzRnJlZVNjcm9sbGluZztcbiAgICAvLyByZW5kZXIgcG9zaXRpb24gd2l0aCB0cmFuc2xhdGVYIHdoZW4gc2V0dGxlZFxuICAgIHRoaXMucG9zaXRpb25TbGlkZXIoKTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoICdzZXR0bGUnLCBudWxsLCBbIHRoaXMuc2VsZWN0ZWRJbmRleCBdICk7XG4gIH1cbn07XG5cbnByb3RvLnNoaWZ0V3JhcENlbGxzID0gZnVuY3Rpb24oIHggKSB7XG4gIC8vIHNoaWZ0IGJlZm9yZSBjZWxsc1xuICBsZXQgYmVmb3JlR2FwID0gdGhpcy5jdXJzb3JQb3NpdGlvbiArIHg7XG4gIHRoaXMuX3NoaWZ0Q2VsbHMoIHRoaXMuYmVmb3JlU2hpZnRDZWxscywgYmVmb3JlR2FwLCAtMSApO1xuICAvLyBzaGlmdCBhZnRlciBjZWxsc1xuICBsZXQgYWZ0ZXJHYXAgPSB0aGlzLnNpemUuaW5uZXJXaWR0aCAtICggeCArIHRoaXMuc2xpZGVhYmxlV2lkdGggKyB0aGlzLmN1cnNvclBvc2l0aW9uICk7XG4gIHRoaXMuX3NoaWZ0Q2VsbHMoIHRoaXMuYWZ0ZXJTaGlmdENlbGxzLCBhZnRlckdhcCwgMSApO1xufTtcblxucHJvdG8uX3NoaWZ0Q2VsbHMgPSBmdW5jdGlvbiggY2VsbHMsIGdhcCwgc2hpZnQgKSB7XG4gIGNlbGxzLmZvckVhY2goICggY2VsbCApID0+IHtcbiAgICBsZXQgY2VsbFNoaWZ0ID0gZ2FwID4gMCA/IHNoaWZ0IDogMDtcbiAgICB0aGlzLl93cmFwU2hpZnRDZWxsKCBjZWxsLCBjZWxsU2hpZnQgKTtcbiAgICBnYXAgLT0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIH0gKTtcbn07XG5cbnByb3RvLl91bnNoaWZ0Q2VsbHMgPSBmdW5jdGlvbiggY2VsbHMgKSB7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSByZXR1cm47XG5cbiAgY2VsbHMuZm9yRWFjaCggKCBjZWxsICkgPT4gdGhpcy5fd3JhcFNoaWZ0Q2VsbCggY2VsbCwgMCApICk7XG59O1xuXG4vLyBAcGFyYW0ge0ludGVnZXJ9IHNoaWZ0IC0gMCwgMSwgb3IgLTFcbnByb3RvLl93cmFwU2hpZnRDZWxsID0gZnVuY3Rpb24oIGNlbGwsIHNoaWZ0ICkge1xuICB0aGlzLl9yZW5kZXJDZWxsUG9zaXRpb24oIGNlbGwsIGNlbGwueCArIHRoaXMuc2xpZGVhYmxlV2lkdGggKiBzaGlmdCApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcGh5c2ljcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by5pbnRlZ3JhdGVQaHlzaWNzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMueCArPSB0aGlzLnZlbG9jaXR5O1xuICB0aGlzLnZlbG9jaXR5ICo9IHRoaXMuZ2V0RnJpY3Rpb25GYWN0b3IoKTtcbn07XG5cbnByb3RvLmFwcGx5Rm9yY2UgPSBmdW5jdGlvbiggZm9yY2UgKSB7XG4gIHRoaXMudmVsb2NpdHkgKz0gZm9yY2U7XG59O1xuXG5wcm90by5nZXRGcmljdGlvbkZhY3RvciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gMSAtIHRoaXMub3B0aW9uc1sgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPyAnZnJlZVNjcm9sbEZyaWN0aW9uJyA6ICdmcmljdGlvbicgXTtcbn07XG5cbnByb3RvLmdldFJlc3RpbmdQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAvLyBteSB0aGFua3MgdG8gU3RldmVuIFdpdHRlbnMsIHdobyBzaW1wbGlmaWVkIHRoaXMgbWF0aCBncmVhdGx5XG4gIHJldHVybiB0aGlzLnggKyB0aGlzLnZlbG9jaXR5IC8gKCAxIC0gdGhpcy5nZXRGcmljdGlvbkZhY3RvcigpICk7XG59O1xuXG5wcm90by5hcHBseURyYWdGb3JjZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlIHx8ICF0aGlzLmlzUG9pbnRlckRvd24gKSByZXR1cm47XG5cbiAgLy8gY2hhbmdlIHRoZSBwb3NpdGlvbiB0byBkcmFnIHBvc2l0aW9uIGJ5IGFwcGx5aW5nIGZvcmNlXG4gIGxldCBkcmFnVmVsb2NpdHkgPSB0aGlzLmRyYWdYIC0gdGhpcy54O1xuICBsZXQgZHJhZ0ZvcmNlID0gZHJhZ1ZlbG9jaXR5IC0gdGhpcy52ZWxvY2l0eTtcbiAgdGhpcy5hcHBseUZvcmNlKCBkcmFnRm9yY2UgKTtcbn07XG5cbnByb3RvLmFwcGx5U2VsZWN0ZWRBdHRyYWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIC8vIGRvIG5vdCBhdHRyYWN0IGlmIHBvaW50ZXIgZG93biBvciBubyBzbGlkZXNcbiAgbGV0IGRyYWdEb3duID0gdGhpcy5pc0RyYWdnYWJsZSAmJiB0aGlzLmlzUG9pbnRlckRvd247XG4gIGlmICggZHJhZ0Rvd24gfHwgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgfHwgIXRoaXMuc2xpZGVzLmxlbmd0aCApIHJldHVybjtcblxuICBsZXQgZGlzdGFuY2UgPSB0aGlzLnNlbGVjdGVkU2xpZGUudGFyZ2V0ICogLTEgLSB0aGlzLng7XG4gIGxldCBmb3JjZSA9IGRpc3RhbmNlICogdGhpcy5vcHRpb25zLnNlbGVjdGVkQXR0cmFjdGlvbjtcbiAgdGhpcy5hcHBseUZvcmNlKCBmb3JjZSApO1xufTtcblxucmV0dXJuIHByb3RvO1xuXG59ICkgKTtcbiIsIi8vIEZsaWNraXR5LkNlbGxcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggcmVxdWlyZSgnZ2V0LXNpemUnKSApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LkZsaWNraXR5ID0gd2luZG93LkZsaWNraXR5IHx8IHt9O1xuICAgIHdpbmRvdy5GbGlja2l0eS5DZWxsID0gZmFjdG9yeSggd2luZG93LmdldFNpemUgKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSggZ2V0U2l6ZSApIHtcblxuY29uc3QgY2VsbENsYXNzTmFtZSA9ICdmbGlja2l0eS1jZWxsJztcblxuZnVuY3Rpb24gQ2VsbCggZWxlbSApIHtcbiAgdGhpcy5lbGVtZW50ID0gZWxlbTtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoIGNlbGxDbGFzc05hbWUgKTtcblxuICB0aGlzLnggPSAwO1xuICB0aGlzLnVuc2VsZWN0KCk7XG59XG5cbmxldCBwcm90byA9IENlbGwucHJvdG90eXBlO1xuXG5wcm90by5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlc2V0IHN0eWxlXG4gIHRoaXMudW5zZWxlY3QoKTtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoIGNlbGxDbGFzc05hbWUgKTtcbiAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xufTtcblxucHJvdG8uZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcbn07XG5cbnByb3RvLnNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtc2VsZWN0ZWQnKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbn07XG5cbnByb3RvLnVuc2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zZWxlY3RlZCcpO1xuICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCAnYXJpYS1oaWRkZW4nLCAndHJ1ZScgKTtcbn07XG5cbnByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlKCk7XG59O1xuXG5yZXR1cm4gQ2VsbDtcblxufSApICk7XG4iLCIvLyBGbGlja2l0eSBtYWluXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtcGFyYW1zICovXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICAgICByZXF1aXJlKCcuL2NlbGwnKSxcbiAgICAgICAgcmVxdWlyZSgnLi9zbGlkZScpLFxuICAgICAgICByZXF1aXJlKCcuL2FuaW1hdGUnKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgbGV0IF9GbGlja2l0eSA9IHdpbmRvdy5GbGlja2l0eTtcblxuICAgIHdpbmRvdy5GbGlja2l0eSA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICAgICAgd2luZG93LmdldFNpemUsXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXG4gICAgICAgIF9GbGlja2l0eS5DZWxsLFxuICAgICAgICBfRmxpY2tpdHkuU2xpZGUsXG4gICAgICAgIF9GbGlja2l0eS5hbmltYXRlUHJvdG90eXBlLFxuICAgICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsXG4gICAgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBDZWxsLCBTbGlkZSwgYW5pbWF0ZVByb3RvdHlwZSApIHtcbi8qIGVzbGludC1lbmFibGUgbWF4LXBhcmFtcyAqL1xuXG4vLyB2YXJzXG5jb25zdCB7IGdldENvbXB1dGVkU3R5bGUsIGNvbnNvbGUgfSA9IHdpbmRvdztcbmxldCB7IGpRdWVyeSB9ID0gd2luZG93O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBGbGlja2l0eSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllcnNcbmxldCBHVUlEID0gMDtcbi8vIGludGVybmFsIHN0b3JlIG9mIGFsbCBGbGlja2l0eSBpbnRhbmNlc1xubGV0IGluc3RhbmNlcyA9IHt9O1xuXG5mdW5jdGlvbiBGbGlja2l0eSggZWxlbWVudCwgb3B0aW9ucyApIHtcbiAgbGV0IHF1ZXJ5RWxlbWVudCA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbWVudCApO1xuICBpZiAoICFxdWVyeUVsZW1lbnQgKSB7XG4gICAgaWYgKCBjb25zb2xlICkgY29uc29sZS5lcnJvcihgQmFkIGVsZW1lbnQgZm9yIEZsaWNraXR5OiAke3F1ZXJ5RWxlbWVudCB8fCBlbGVtZW50fWApO1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmVsZW1lbnQgPSBxdWVyeUVsZW1lbnQ7XG4gIC8vIGRvIG5vdCBpbml0aWFsaXplIHR3aWNlIG9uIHNhbWUgZWxlbWVudFxuICBpZiAoIHRoaXMuZWxlbWVudC5mbGlja2l0eUdVSUQgKSB7XG4gICAgbGV0IGluc3RhbmNlID0gaW5zdGFuY2VzWyB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEIF07XG4gICAgaWYgKCBpbnN0YW5jZSApIGluc3RhbmNlLm9wdGlvbiggb3B0aW9ucyApO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfVxuXG4gIC8vIGFkZCBqUXVlcnlcbiAgaWYgKCBqUXVlcnkgKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGpRdWVyeSggdGhpcy5lbGVtZW50ICk7XG4gIH1cbiAgLy8gb3B0aW9uc1xuICB0aGlzLm9wdGlvbnMgPSB7IC4uLnRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMgfTtcbiAgdGhpcy5vcHRpb24oIG9wdGlvbnMgKTtcblxuICAvLyBraWNrIHRoaW5ncyBvZmZcbiAgdGhpcy5fY3JlYXRlKCk7XG59XG5cbkZsaWNraXR5LmRlZmF1bHRzID0ge1xuICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAvLyBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gIGNlbGxBbGlnbjogJ2NlbnRlcicsXG4gIC8vIGNlbGxTZWxlY3RvcjogdW5kZWZpbmVkLFxuICAvLyBjb250YWluOiBmYWxzZSxcbiAgZnJlZVNjcm9sbEZyaWN0aW9uOiAwLjA3NSwgLy8gZnJpY3Rpb24gd2hlbiBmcmVlLXNjcm9sbGluZ1xuICBmcmljdGlvbjogMC4yOCwgLy8gZnJpY3Rpb24gd2hlbiBzZWxlY3RpbmdcbiAgbmFtZXNwYWNlSlF1ZXJ5RXZlbnRzOiB0cnVlLFxuICAvLyBpbml0aWFsSW5kZXg6IDAsXG4gIHBlcmNlbnRQb3NpdGlvbjogdHJ1ZSxcbiAgcmVzaXplOiB0cnVlLFxuICBzZWxlY3RlZEF0dHJhY3Rpb246IDAuMDI1LFxuICBzZXRHYWxsZXJ5U2l6ZTogdHJ1ZSxcbiAgLy8gd2F0Y2hDU1M6IGZhbHNlLFxuICAvLyB3cmFwQXJvdW5kOiBmYWxzZVxufTtcblxuLy8gaGFzaCBvZiBtZXRob2RzIHRyaWdnZXJlZCBvbiBfY3JlYXRlKClcbkZsaWNraXR5LmNyZWF0ZSA9IHt9O1xuXG5sZXQgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG4vLyBpbmhlcml0IEV2ZW50RW1pdHRlclxuT2JqZWN0LmFzc2lnbiggcHJvdG8sIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxucHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgeyByZXNpemUsIHdhdGNoQ1NTLCByaWdodFRvTGVmdCB9ID0gdGhpcy5vcHRpb25zO1xuICAvLyBhZGQgaWQgZm9yIEZsaWNraXR5LmRhdGFcbiAgbGV0IGlkID0gdGhpcy5ndWlkID0gKytHVUlEO1xuICB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEID0gaWQ7IC8vIGV4cGFuZG9cbiAgaW5zdGFuY2VzWyBpZCBdID0gdGhpczsgLy8gYXNzb2NpYXRlIHZpYSBpZFxuICAvLyBpbml0aWFsIHByb3BlcnRpZXNcbiAgdGhpcy5zZWxlY3RlZEluZGV4ID0gMDtcbiAgLy8gaG93IG1hbnkgZnJhbWVzIHNsaWRlciBoYXMgYmVlbiBpbiBzYW1lIHBvc2l0aW9uXG4gIHRoaXMucmVzdGluZ0ZyYW1lcyA9IDA7XG4gIC8vIGluaXRpYWwgcGh5c2ljcyBwcm9wZXJ0aWVzXG4gIHRoaXMueCA9IDA7XG4gIHRoaXMudmVsb2NpdHkgPSAwO1xuICB0aGlzLmJlZ2luTWFyZ2luID0gcmlnaHRUb0xlZnQgPyAnbWFyZ2luUmlnaHQnIDogJ21hcmdpbkxlZnQnO1xuICB0aGlzLmVuZE1hcmdpbiA9IHJpZ2h0VG9MZWZ0ID8gJ21hcmdpbkxlZnQnIDogJ21hcmdpblJpZ2h0JztcbiAgLy8gY3JlYXRlIHZpZXdwb3J0ICYgc2xpZGVyXG4gIHRoaXMudmlld3BvcnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGhpcy52aWV3cG9ydC5jbGFzc05hbWUgPSAnZmxpY2tpdHktdmlld3BvcnQnO1xuICB0aGlzLl9jcmVhdGVTbGlkZXIoKTtcbiAgLy8gdXNlZCBmb3Iga2V5Ym9hcmQgbmF2aWdhdGlvblxuICB0aGlzLmZvY3VzYWJsZUVsZW1zID0gWyB0aGlzLmVsZW1lbnQgXTtcblxuICBpZiAoIHJlc2l6ZSB8fCB3YXRjaENTUyApIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3Jlc2l6ZScsIHRoaXMgKTtcbiAgfVxuXG4gIC8vIGFkZCBsaXN0ZW5lcnMgZnJvbSBvbiBvcHRpb25cbiAgZm9yICggbGV0IGV2ZW50TmFtZSBpbiB0aGlzLm9wdGlvbnMub24gKSB7XG4gICAgbGV0IGxpc3RlbmVyID0gdGhpcy5vcHRpb25zLm9uWyBldmVudE5hbWUgXTtcbiAgICB0aGlzLm9uKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gIH1cblxuICBmb3IgKCBsZXQgbWV0aG9kIGluIEZsaWNraXR5LmNyZWF0ZSApIHtcbiAgICBGbGlja2l0eS5jcmVhdGVbIG1ldGhvZCBdLmNhbGwoIHRoaXMgKTtcbiAgfVxuXG4gIGlmICggd2F0Y2hDU1MgKSB7XG4gICAgdGhpcy53YXRjaENTUygpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBzZXQgb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGV4dGVuZFxuICovXG5wcm90by5vcHRpb24gPSBmdW5jdGlvbiggb3B0cyApIHtcbiAgT2JqZWN0LmFzc2lnbiggdGhpcy5vcHRpb25zLCBvcHRzICk7XG59O1xuXG5wcm90by5hY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuaXNBY3RpdmUgKSByZXR1cm47XG5cbiAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmbGlja2l0eS1lbmFibGVkJyk7XG4gIGlmICggdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ICkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmbGlja2l0eS1ydGwnKTtcbiAgfVxuXG4gIHRoaXMuZ2V0U2l6ZSgpO1xuICAvLyBtb3ZlIGluaXRpYWwgY2VsbCBlbGVtZW50cyBzbyB0aGV5IGNhbiBiZSBsb2FkZWQgYXMgY2VsbHNcbiAgbGV0IGNlbGxFbGVtcyA9IHRoaXMuX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMoIHRoaXMuZWxlbWVudC5jaGlsZHJlbiApO1xuICB0aGlzLnNsaWRlci5hcHBlbmQoIC4uLmNlbGxFbGVtcyApO1xuICB0aGlzLnZpZXdwb3J0LmFwcGVuZCggdGhpcy5zbGlkZXIgKTtcbiAgdGhpcy5lbGVtZW50LmFwcGVuZCggdGhpcy52aWV3cG9ydCApO1xuICAvLyBnZXQgY2VsbHMgZnJvbSBjaGlsZHJlblxuICB0aGlzLnJlbG9hZENlbGxzKCk7XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSApIHtcbiAgICAvLyBhbGxvdyBlbGVtZW50IHRvIGZvY3VzYWJsZVxuICAgIHRoaXMuZWxlbWVudC50YWJJbmRleCA9IDA7XG4gICAgLy8gbGlzdGVuIGZvciBrZXkgcHJlc3Nlc1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMgKTtcbiAgfVxuXG4gIHRoaXMuZW1pdEV2ZW50KCdhY3RpdmF0ZScpO1xuICB0aGlzLnNlbGVjdEluaXRpYWxJbmRleCgpO1xuICAvLyBmbGFnIGZvciBpbml0aWFsIGFjdGl2YXRpb24sIGZvciB1c2luZyBpbml0aWFsSW5kZXhcbiAgdGhpcy5pc0luaXRBY3RpdmF0ZWQgPSB0cnVlO1xuICAvLyByZWFkeSBldmVudC4gIzQ5M1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoJ3JlYWR5Jyk7XG59O1xuXG4vLyBzbGlkZXIgcG9zaXRpb25zIHRoZSBjZWxsc1xucHJvdG8uX2NyZWF0ZVNsaWRlciA9IGZ1bmN0aW9uKCkge1xuICAvLyBzbGlkZXIgZWxlbWVudCBkb2VzIGFsbCB0aGUgcG9zaXRpb25pbmdcbiAgbGV0IHNsaWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzbGlkZXIuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXNsaWRlcic7XG4gIHRoaXMuc2xpZGVyID0gc2xpZGVyO1xufTtcblxucHJvdG8uX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHJldHVybiB1dGlscy5maWx0ZXJGaW5kRWxlbWVudHMoIGVsZW1zLCB0aGlzLm9wdGlvbnMuY2VsbFNlbGVjdG9yICk7XG59O1xuXG4vLyBnb2VzIHRocm91Z2ggYWxsIGNoaWxkcmVuXG5wcm90by5yZWxvYWRDZWxscyA9IGZ1bmN0aW9uKCkge1xuICAvLyBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcbiAgdGhpcy5jZWxscyA9IHRoaXMuX21ha2VDZWxscyggdGhpcy5zbGlkZXIuY2hpbGRyZW4gKTtcbiAgdGhpcy5wb3NpdGlvbkNlbGxzKCk7XG4gIHRoaXMuX3VwZGF0ZVdyYXBTaGlmdENlbGxzKCk7XG4gIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbn07XG5cbi8qKlxuICogdHVybiBlbGVtZW50cyBpbnRvIEZsaWNraXR5LkNlbGxzXG4gKiBAcGFyYW0ge1tBcnJheSwgTm9kZUxpc3QsIEhUTUxFbGVtZW50XX0gZWxlbXMgLSBlbGVtZW50cyB0byBtYWtlIGludG8gY2VsbHNcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBjb2xsZWN0aW9uIG9mIG5ldyBGbGlja2l0eSBDZWxsc1xuICovXG5wcm90by5fbWFrZUNlbGxzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBsZXQgY2VsbEVsZW1zID0gdGhpcy5fZmlsdGVyRmluZENlbGxFbGVtZW50cyggZWxlbXMgKTtcblxuICAvLyBjcmVhdGUgbmV3IENlbGxzIGZvciBjb2xsZWN0aW9uXG4gIHJldHVybiBjZWxsRWxlbXMubWFwKCAoIGNlbGxFbGVtICkgPT4gbmV3IENlbGwoIGNlbGxFbGVtICkgKTtcbn07XG5cbnByb3RvLmdldExhc3RDZWxsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNlbGxzWyB0aGlzLmNlbGxzLmxlbmd0aCAtIDEgXTtcbn07XG5cbnByb3RvLmdldExhc3RTbGlkZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zbGlkZXNbIHRoaXMuc2xpZGVzLmxlbmd0aCAtIDEgXTtcbn07XG5cbi8vIHBvc2l0aW9ucyBhbGwgY2VsbHNcbnByb3RvLnBvc2l0aW9uQ2VsbHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gc2l6ZSBhbGwgY2VsbHNcbiAgdGhpcy5fc2l6ZUNlbGxzKCB0aGlzLmNlbGxzICk7XG4gIC8vIHBvc2l0aW9uIGFsbCBjZWxsc1xuICB0aGlzLl9wb3NpdGlvbkNlbGxzKCAwICk7XG59O1xuXG4vKipcbiAqIHBvc2l0aW9uIGNlcnRhaW4gY2VsbHNcbiAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSB3aGljaCBjZWxsIHRvIHN0YXJ0IHdpdGhcbiAqL1xucHJvdG8uX3Bvc2l0aW9uQ2VsbHMgPSBmdW5jdGlvbiggaW5kZXggKSB7XG4gIGluZGV4ID0gaW5kZXggfHwgMDtcbiAgLy8gYWxzbyBtZWFzdXJlIG1heENlbGxIZWlnaHRcbiAgLy8gc3RhcnQgMCBpZiBwb3NpdGlvbmluZyBhbGwgY2VsbHNcbiAgdGhpcy5tYXhDZWxsSGVpZ2h0ID0gaW5kZXggPyB0aGlzLm1heENlbGxIZWlnaHQgfHwgMCA6IDA7XG4gIGxldCBjZWxsWCA9IDA7XG4gIC8vIGdldCBjZWxsWFxuICBpZiAoIGluZGV4ID4gMCApIHtcbiAgICBsZXQgc3RhcnRDZWxsID0gdGhpcy5jZWxsc1sgaW5kZXggLSAxIF07XG4gICAgY2VsbFggPSBzdGFydENlbGwueCArIHN0YXJ0Q2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIH1cblxuICB0aGlzLmNlbGxzLnNsaWNlKCBpbmRleCApLmZvckVhY2goICggY2VsbCApID0+IHtcbiAgICBjZWxsLnggPSBjZWxsWDtcbiAgICB0aGlzLl9yZW5kZXJDZWxsUG9zaXRpb24oIGNlbGwsIGNlbGxYICk7XG4gICAgY2VsbFggKz0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gICAgdGhpcy5tYXhDZWxsSGVpZ2h0ID0gTWF0aC5tYXgoIGNlbGwuc2l6ZS5vdXRlckhlaWdodCwgdGhpcy5tYXhDZWxsSGVpZ2h0ICk7XG4gIH0gKTtcbiAgLy8ga2VlcCB0cmFjayBvZiBjZWxsWCBmb3Igd3JhcC1hcm91bmRcbiAgdGhpcy5zbGlkZWFibGVXaWR0aCA9IGNlbGxYO1xuICAvLyBzbGlkZXNcbiAgdGhpcy51cGRhdGVTbGlkZXMoKTtcbiAgLy8gY29udGFpbiBzbGlkZXMgdGFyZ2V0XG4gIHRoaXMuX2NvbnRhaW5TbGlkZXMoKTtcbiAgLy8gdXBkYXRlIHNsaWRlc1dpZHRoXG4gIHRoaXMuc2xpZGVzV2lkdGggPSB0aGlzLmNlbGxzLmxlbmd0aCA/XG4gICAgdGhpcy5nZXRMYXN0U2xpZGUoKS50YXJnZXQgLSB0aGlzLnNsaWRlc1swXS50YXJnZXQgOiAwO1xufTtcblxucHJvdG8uX3JlbmRlckNlbGxQb3NpdGlvbiA9IGZ1bmN0aW9uKCBjZWxsLCB4ICkge1xuICAvLyByZW5kZXIgcG9zaXRpb24gb2YgY2VsbCB3aXRoIGluIHNsaWRlclxuICBsZXQgc2lkZU9mZnNldCA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/IC0xIDogMTtcbiAgbGV0IHJlbmRlclggPSB4ICogc2lkZU9mZnNldDtcbiAgaWYgKCB0aGlzLm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICkgcmVuZGVyWCAqPSB0aGlzLnNpemUuaW5uZXJXaWR0aCAvIGNlbGwuc2l6ZS53aWR0aDtcbiAgbGV0IHBvc2l0aW9uVmFsdWUgPSB0aGlzLmdldFBvc2l0aW9uVmFsdWUoIHJlbmRlclggKTtcbiAgY2VsbC5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCAke3Bvc2l0aW9uVmFsdWV9IClgO1xufTtcblxuLyoqXG4gKiBjZWxsLmdldFNpemUoKSBvbiBtdWx0aXBsZSBjZWxsc1xuICogQHBhcmFtIHtBcnJheX0gY2VsbHMgLSBjZWxscyB0byBzaXplXG4gKi9cbnByb3RvLl9zaXplQ2VsbHMgPSBmdW5jdGlvbiggY2VsbHMgKSB7XG4gIGNlbGxzLmZvckVhY2goICggY2VsbCApID0+IGNlbGwuZ2V0U2l6ZSgpICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8udXBkYXRlU2xpZGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2xpZGVzID0gW107XG4gIGlmICggIXRoaXMuY2VsbHMubGVuZ3RoICkgcmV0dXJuO1xuXG4gIGxldCB7IGJlZ2luTWFyZ2luLCBlbmRNYXJnaW4gfSA9IHRoaXM7XG4gIGxldCBzbGlkZSA9IG5ldyBTbGlkZSggYmVnaW5NYXJnaW4sIGVuZE1hcmdpbiwgdGhpcy5jZWxsQWxpZ24gKTtcbiAgdGhpcy5zbGlkZXMucHVzaCggc2xpZGUgKTtcblxuICBsZXQgY2FuQ2VsbEZpdCA9IHRoaXMuX2dldENhbkNlbGxGaXQoKTtcblxuICB0aGlzLmNlbGxzLmZvckVhY2goICggY2VsbCwgaSApID0+IHtcbiAgICAvLyBqdXN0IGFkZCBjZWxsIGlmIGZpcnN0IGNlbGwgaW4gc2xpZGVcbiAgICBpZiAoICFzbGlkZS5jZWxscy5sZW5ndGggKSB7XG4gICAgICBzbGlkZS5hZGRDZWxsKCBjZWxsICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHNsaWRlV2lkdGggPSAoIHNsaWRlLm91dGVyV2lkdGggLSBzbGlkZS5maXJzdE1hcmdpbiApICtcbiAgICAgICggY2VsbC5zaXplLm91dGVyV2lkdGggLSBjZWxsLnNpemVbIGVuZE1hcmdpbiBdICk7XG5cbiAgICBpZiAoIGNhbkNlbGxGaXQoIGksIHNsaWRlV2lkdGggKSApIHtcbiAgICAgIHNsaWRlLmFkZENlbGwoIGNlbGwgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZG9lc24ndCBmaXQsIG5ldyBzbGlkZVxuICAgICAgc2xpZGUudXBkYXRlVGFyZ2V0KCk7XG5cbiAgICAgIHNsaWRlID0gbmV3IFNsaWRlKCBiZWdpbk1hcmdpbiwgZW5kTWFyZ2luLCB0aGlzLmNlbGxBbGlnbiApO1xuICAgICAgdGhpcy5zbGlkZXMucHVzaCggc2xpZGUgKTtcbiAgICAgIHNsaWRlLmFkZENlbGwoIGNlbGwgKTtcbiAgICB9XG4gIH0gKTtcbiAgLy8gbGFzdCBzbGlkZVxuICBzbGlkZS51cGRhdGVUYXJnZXQoKTtcbiAgLy8gdXBkYXRlIC5zZWxlY3RlZFNsaWRlXG4gIHRoaXMudXBkYXRlU2VsZWN0ZWRTbGlkZSgpO1xufTtcblxucHJvdG8uX2dldENhbkNlbGxGaXQgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHsgZ3JvdXBDZWxscyB9ID0gdGhpcy5vcHRpb25zO1xuICBpZiAoICFncm91cENlbGxzICkgcmV0dXJuICgpID0+IGZhbHNlO1xuXG4gIGlmICggdHlwZW9mIGdyb3VwQ2VsbHMgPT0gJ251bWJlcicgKSB7XG4gICAgLy8gZ3JvdXAgYnkgbnVtYmVyLiAzIC0+IFswLDEsMl0sIFszLDQsNV0sIC4uLlxuICAgIGxldCBudW1iZXIgPSBwYXJzZUludCggZ3JvdXBDZWxscywgMTAgKTtcbiAgICByZXR1cm4gKCBpICkgPT4gKCBpICUgbnVtYmVyICkgIT09IDA7XG4gIH1cbiAgLy8gZGVmYXVsdCwgZ3JvdXAgYnkgd2lkdGggb2Ygc2xpZGVcbiAgbGV0IHBlcmNlbnQgPSAxO1xuICAvLyBwYXJzZSAnNzUlXG4gIGxldCBwZXJjZW50TWF0Y2ggPSB0eXBlb2YgZ3JvdXBDZWxscyA9PSAnc3RyaW5nJyAmJiBncm91cENlbGxzLm1hdGNoKCAvXihcXGQrKSUkLyApO1xuICBpZiAoIHBlcmNlbnRNYXRjaCApIHBlcmNlbnQgPSBwYXJzZUludCggcGVyY2VudE1hdGNoWzFdLCAxMCApIC8gMTAwO1xuICBsZXQgZ3JvdXBXaWR0aCA9ICggdGhpcy5zaXplLmlubmVyV2lkdGggKyAxICkgKiBwZXJjZW50O1xuICByZXR1cm4gKCBpLCBzbGlkZVdpZHRoICkgPT4gc2xpZGVXaWR0aCA8PSBncm91cFdpZHRoO1xufTtcblxuLy8gYWxpYXMgX2luaXQgZm9yIGpRdWVyeSBwbHVnaW4gLmZsaWNraXR5KClcbnByb3RvLl9pbml0ID1cbnByb3RvLnJlcG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wb3NpdGlvbkNlbGxzKCk7XG4gIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG59O1xuXG5wcm90by5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xuICB0aGlzLnNldENlbGxBbGlnbigpO1xuICB0aGlzLmN1cnNvclBvc2l0aW9uID0gdGhpcy5zaXplLmlubmVyV2lkdGggKiB0aGlzLmNlbGxBbGlnbjtcbn07XG5cbmxldCBjZWxsQWxpZ25TaG9ydGhhbmRzID0ge1xuICBsZWZ0OiAwLFxuICBjZW50ZXI6IDAuNSxcbiAgcmlnaHQ6IDEsXG59O1xuXG5wcm90by5zZXRDZWxsQWxpZ24gPSBmdW5jdGlvbigpIHtcbiAgbGV0IHsgY2VsbEFsaWduLCByaWdodFRvTGVmdCB9ID0gdGhpcy5vcHRpb25zO1xuICBsZXQgc2hvcnRoYW5kID0gY2VsbEFsaWduU2hvcnRoYW5kc1sgY2VsbEFsaWduIF07XG4gIHRoaXMuY2VsbEFsaWduID0gc2hvcnRoYW5kICE9PSB1bmRlZmluZWQgPyBzaG9ydGhhbmQgOiBjZWxsQWxpZ247XG4gIGlmICggcmlnaHRUb0xlZnQgKSB0aGlzLmNlbGxBbGlnbiA9IDEgLSB0aGlzLmNlbGxBbGlnbjtcbn07XG5cbnByb3RvLnNldEdhbGxlcnlTaXplID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5zZXRHYWxsZXJ5U2l6ZSApIHJldHVybjtcblxuICBsZXQgaGVpZ2h0ID0gdGhpcy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ICYmIHRoaXMuc2VsZWN0ZWRTbGlkZSA/XG4gICAgdGhpcy5zZWxlY3RlZFNsaWRlLmhlaWdodCA6IHRoaXMubWF4Q2VsbEhlaWdodDtcbiAgdGhpcy52aWV3cG9ydC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xufTtcblxucHJvdG8uX3VwZGF0ZVdyYXBTaGlmdENlbGxzID0gZnVuY3Rpb24oKSB7XG4gIC8vIHVwZGF0ZSBpc1dyYXBwaW5nXG4gIHRoaXMuaXNXcmFwcGluZyA9IHRoaXMuZ2V0SXNXcmFwcGluZygpO1xuICAvLyBvbmx5IGZvciB3cmFwLWFyb3VuZFxuICBpZiAoICF0aGlzLmlzV3JhcHBpbmcgKSByZXR1cm47XG5cbiAgLy8gdW5zaGlmdCBwcmV2aW91cyBjZWxsc1xuICB0aGlzLl91bnNoaWZ0Q2VsbHMoIHRoaXMuYmVmb3JlU2hpZnRDZWxscyApO1xuICB0aGlzLl91bnNoaWZ0Q2VsbHMoIHRoaXMuYWZ0ZXJTaGlmdENlbGxzICk7XG4gIC8vIGdldCBiZWZvcmUgY2VsbHNcbiAgLy8gaW5pdGlhbCBnYXBcbiAgbGV0IGJlZm9yZUdhcFggPSB0aGlzLmN1cnNvclBvc2l0aW9uO1xuICBsZXQgbGFzdEluZGV4ID0gdGhpcy5jZWxscy5sZW5ndGggLSAxO1xuICB0aGlzLmJlZm9yZVNoaWZ0Q2VsbHMgPSB0aGlzLl9nZXRHYXBDZWxscyggYmVmb3JlR2FwWCwgbGFzdEluZGV4LCAtMSApO1xuICAvLyBnZXQgYWZ0ZXIgY2VsbHNcbiAgLy8gZW5kaW5nIGdhcCBiZXR3ZWVuIGxhc3QgY2VsbCBhbmQgZW5kIG9mIGdhbGxlcnkgdmlld3BvcnRcbiAgbGV0IGFmdGVyR2FwWCA9IHRoaXMuc2l6ZS5pbm5lcldpZHRoIC0gdGhpcy5jdXJzb3JQb3NpdGlvbjtcbiAgLy8gc3RhcnQgY2xvbmluZyBhdCBmaXJzdCBjZWxsLCB3b3JraW5nIGZvcndhcmRzXG4gIHRoaXMuYWZ0ZXJTaGlmdENlbGxzID0gdGhpcy5fZ2V0R2FwQ2VsbHMoIGFmdGVyR2FwWCwgMCwgMSApO1xufTtcblxucHJvdG8uZ2V0SXNXcmFwcGluZyA9IGZ1bmN0aW9uKCkge1xuICBsZXQgeyB3cmFwQXJvdW5kIH0gPSB0aGlzLm9wdGlvbnM7XG4gIGlmICggIXdyYXBBcm91bmQgfHwgdGhpcy5zbGlkZXMubGVuZ3RoIDwgMiApIHJldHVybiBmYWxzZTtcblxuICBpZiAoIHdyYXBBcm91bmQgIT09ICdmaWxsJyApIHJldHVybiB0cnVlO1xuICAvLyBjaGVjayB0aGF0IHNsaWRlcyBjYW4gZml0XG5cbiAgbGV0IGdhcFdpZHRoID0gdGhpcy5zbGlkZWFibGVXaWR0aCAtIHRoaXMuc2l6ZS5pbm5lcldpZHRoO1xuICBpZiAoIGdhcFdpZHRoID4gdGhpcy5zaXplLmlubmVyV2lkdGggKSByZXR1cm4gdHJ1ZTsgLy8gZ2FwICogMnggYmlnLCBhbGwgZ29vZFxuICAvLyBjaGVjayB0aGF0IGNvbnRlbnQgd2lkdGggLSBzaGlmdGluZyBjZWxsIGlzIGJpZ2dlciB0aGFuIHZpZXdwb3J0IHdpZHRoXG4gIGZvciAoIGxldCBjZWxsIG9mIHRoaXMuY2VsbHMgKSB7XG4gICAgaWYgKCBjZWxsLnNpemUub3V0ZXJXaWR0aCA+IGdhcFdpZHRoICkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxucHJvdG8uX2dldEdhcENlbGxzID0gZnVuY3Rpb24oIGdhcFgsIGNlbGxJbmRleCwgaW5jcmVtZW50ICkge1xuICAvLyBrZWVwIGFkZGluZyBjZWxscyB1bnRpbCB0aGUgY292ZXIgdGhlIGluaXRpYWwgZ2FwXG4gIGxldCBjZWxscyA9IFtdO1xuICB3aGlsZSAoIGdhcFggPiAwICkge1xuICAgIGxldCBjZWxsID0gdGhpcy5jZWxsc1sgY2VsbEluZGV4IF07XG4gICAgaWYgKCAhY2VsbCApIGJyZWFrO1xuXG4gICAgY2VsbHMucHVzaCggY2VsbCApO1xuICAgIGNlbGxJbmRleCArPSBpbmNyZW1lbnQ7XG4gICAgZ2FwWCAtPSBjZWxsLnNpemUub3V0ZXJXaWR0aDtcbiAgfVxuICByZXR1cm4gY2VsbHM7XG59O1xuXG4vLyAtLS0tLSBjb250YWluICYgd3JhcCAtLS0tLSAvL1xuXG4vLyBjb250YWluIGNlbGwgdGFyZ2V0cyBzbyBubyBleGNlc3Mgc2xpZGluZ1xucHJvdG8uX2NvbnRhaW5TbGlkZXMgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGlzQ29udGFpbmluZyA9IHRoaXMub3B0aW9ucy5jb250YWluICYmICF0aGlzLmlzV3JhcHBpbmcgJiZcbiAgICAgIHRoaXMuY2VsbHMubGVuZ3RoO1xuICBpZiAoICFpc0NvbnRhaW5pbmcgKSByZXR1cm47XG5cbiAgbGV0IGNvbnRlbnRXaWR0aCA9IHRoaXMuc2xpZGVhYmxlV2lkdGggLSB0aGlzLmdldExhc3RDZWxsKCkuc2l6ZVsgdGhpcy5lbmRNYXJnaW4gXTtcbiAgLy8gY29udGVudCBpcyBsZXNzIHRoYW4gZ2FsbGVyeSBzaXplXG4gIGxldCBpc0NvbnRlbnRTbWFsbGVyID0gY29udGVudFdpZHRoIDwgdGhpcy5zaXplLmlubmVyV2lkdGg7XG4gIGlmICggaXNDb250ZW50U21hbGxlciApIHtcbiAgICAvLyBhbGwgY2VsbHMgZml0IGluc2lkZSBnYWxsZXJ5XG4gICAgdGhpcy5zbGlkZXMuZm9yRWFjaCggKCBzbGlkZSApID0+IHtcbiAgICAgIHNsaWRlLnRhcmdldCA9IGNvbnRlbnRXaWR0aCAqIHRoaXMuY2VsbEFsaWduO1xuICAgIH0gKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBjb250YWluIHRvIGJvdW5kc1xuICAgIGxldCBiZWdpbkJvdW5kID0gdGhpcy5jdXJzb3JQb3NpdGlvbiArIHRoaXMuY2VsbHNbMF0uc2l6ZVsgdGhpcy5iZWdpbk1hcmdpbiBdO1xuICAgIGxldCBlbmRCb3VuZCA9IGNvbnRlbnRXaWR0aCAtIHRoaXMuc2l6ZS5pbm5lcldpZHRoICogKCAxIC0gdGhpcy5jZWxsQWxpZ24gKTtcbiAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKCAoIHNsaWRlICkgPT4ge1xuICAgICAgc2xpZGUudGFyZ2V0ID0gTWF0aC5tYXgoIHNsaWRlLnRhcmdldCwgYmVnaW5Cb3VuZCApO1xuICAgICAgc2xpZGUudGFyZ2V0ID0gTWF0aC5taW4oIHNsaWRlLnRhcmdldCwgZW5kQm91bmQgKTtcbiAgICB9ICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGV2ZW50cyAtLS0tLSAvL1xuXG4vKipcbiAqIGVtaXRzIGV2ZW50cyB2aWEgZXZlbnRFbWl0dGVyIGFuZCBqUXVlcnkgZXZlbnRzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIG5hbWUgb2YgZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gb3JpZ2luYWwgZXZlbnRcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgLSBleHRyYSBhcmd1bWVudHNcbiAqL1xucHJvdG8uZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgYXJncyApIHtcbiAgbGV0IGVtaXRBcmdzID0gZXZlbnQgPyBbIGV2ZW50IF0uY29uY2F0KCBhcmdzICkgOiBhcmdzO1xuICB0aGlzLmVtaXRFdmVudCggdHlwZSwgZW1pdEFyZ3MgKTtcblxuICBpZiAoIGpRdWVyeSAmJiB0aGlzLiRlbGVtZW50ICkge1xuICAgIC8vIGRlZmF1bHQgdHJpZ2dlciB3aXRoIHR5cGUgaWYgbm8gZXZlbnRcbiAgICB0eXBlICs9IHRoaXMub3B0aW9ucy5uYW1lc3BhY2VKUXVlcnlFdmVudHMgPyAnLmZsaWNraXR5JyA6ICcnO1xuICAgIGxldCAkZXZlbnQgPSB0eXBlO1xuICAgIGlmICggZXZlbnQgKSB7XG4gICAgICAvLyBjcmVhdGUgalF1ZXJ5IGV2ZW50XG4gICAgICBsZXQgalFFdmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIGV2ZW50ICk7XG4gICAgICBqUUV2ZW50LnR5cGUgPSB0eXBlO1xuICAgICAgJGV2ZW50ID0galFFdmVudDtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCAkZXZlbnQsIGFyZ3MgKTtcbiAgfVxufTtcblxuY29uc3QgdW5pZHJhZ2dlckV2ZW50cyA9IFtcbiAgJ2RyYWdTdGFydCcsXG4gICdkcmFnTW92ZScsXG4gICdkcmFnRW5kJyxcbiAgJ3BvaW50ZXJEb3duJyxcbiAgJ3BvaW50ZXJNb3ZlJyxcbiAgJ3BvaW50ZXJFbmQnLFxuICAnc3RhdGljQ2xpY2snLFxuXTtcblxubGV0IF9lbWl0RXZlbnQgPSBwcm90by5lbWl0RXZlbnQ7XG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xuICBpZiAoIGV2ZW50TmFtZSA9PT0gJ3N0YXRpY0NsaWNrJyApIHtcbiAgICAvLyBhZGQgY2VsbEVsZW0gYW5kIGNlbGxJbmRleCBhcmdzIHRvIHN0YXRpY0NsaWNrXG4gICAgbGV0IGNsaWNrZWRDZWxsID0gdGhpcy5nZXRQYXJlbnRDZWxsKCBhcmdzWzBdLnRhcmdldCApO1xuICAgIGxldCBjZWxsRWxlbSA9IGNsaWNrZWRDZWxsICYmIGNsaWNrZWRDZWxsLmVsZW1lbnQ7XG4gICAgbGV0IGNlbGxJbmRleCA9IGNsaWNrZWRDZWxsICYmIHRoaXMuY2VsbHMuaW5kZXhPZiggY2xpY2tlZENlbGwgKTtcbiAgICBhcmdzID0gYXJncy5jb25jYXQoIGNlbGxFbGVtLCBjZWxsSW5kZXggKTtcbiAgfVxuICAvLyBkbyByZWd1bGFyIHRoaW5nXG4gIF9lbWl0RXZlbnQuY2FsbCggdGhpcywgZXZlbnROYW1lLCBhcmdzICk7XG4gIC8vIGR1Y2stcHVuY2ggaW4galF1ZXJ5IGV2ZW50cyBmb3IgVW5pZHJhZ2dlciBldmVudHNcbiAgbGV0IGlzVW5pZHJhZ2dlckV2ZW50ID0gdW5pZHJhZ2dlckV2ZW50cy5pbmNsdWRlcyggZXZlbnROYW1lICk7XG4gIGlmICggIWlzVW5pZHJhZ2dlckV2ZW50IHx8ICFqUXVlcnkgfHwgIXRoaXMuJGVsZW1lbnQgKSByZXR1cm47XG5cbiAgZXZlbnROYW1lICs9IHRoaXMub3B0aW9ucy5uYW1lc3BhY2VKUXVlcnlFdmVudHMgPyAnLmZsaWNraXR5JyA6ICcnO1xuICBsZXQgZXZlbnQgPSBhcmdzLnNoaWZ0KCAwICk7XG4gIGxldCBqUUV2ZW50ID0gbmV3IGpRdWVyeS5FdmVudCggZXZlbnQgKTtcbiAgalFFdmVudC50eXBlID0gZXZlbnROYW1lO1xuICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoIGpRRXZlbnQsIGFyZ3MgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNlbGVjdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSBpbmRleCBvZiB0aGUgc2xpZGVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNXcmFwIC0gd2lsbCB3cmFwLWFyb3VuZCB0byBsYXN0L2ZpcnN0IGlmIGF0IHRoZSBlbmRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbnN0YW50IC0gd2lsbCBpbW1lZGlhdGVseSBzZXQgcG9zaXRpb24gYXQgc2VsZWN0ZWQgY2VsbFxuICovXG5wcm90by5zZWxlY3QgPSBmdW5jdGlvbiggaW5kZXgsIGlzV3JhcCwgaXNJbnN0YW50ICkge1xuICBpZiAoICF0aGlzLmlzQWN0aXZlICkgcmV0dXJuO1xuXG4gIGluZGV4ID0gcGFyc2VJbnQoIGluZGV4LCAxMCApO1xuICB0aGlzLl93cmFwU2VsZWN0KCBpbmRleCApO1xuXG4gIGlmICggdGhpcy5pc1dyYXBwaW5nIHx8IGlzV3JhcCApIHtcbiAgICBpbmRleCA9IHV0aWxzLm1vZHVsbyggaW5kZXgsIHRoaXMuc2xpZGVzLmxlbmd0aCApO1xuICB9XG4gIC8vIGJhaWwgaWYgaW52YWxpZCBpbmRleFxuICBpZiAoICF0aGlzLnNsaWRlc1sgaW5kZXggXSApIHJldHVybjtcblxuICBsZXQgcHJldkluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4O1xuICB0aGlzLnNlbGVjdGVkSW5kZXggPSBpbmRleDtcbiAgdGhpcy51cGRhdGVTZWxlY3RlZFNsaWRlKCk7XG4gIGlmICggaXNJbnN0YW50ICkge1xuICAgIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICB9XG4gIGlmICggdGhpcy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ICkge1xuICAgIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbiAgfVxuICAvLyBldmVudHNcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc2VsZWN0JywgbnVsbCwgWyBpbmRleCBdICk7XG4gIC8vIGNoYW5nZSBldmVudCBpZiBuZXcgaW5kZXhcbiAgaWYgKCBpbmRleCAhPT0gcHJldkluZGV4ICkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCggJ2NoYW5nZScsIG51bGwsIFsgaW5kZXggXSApO1xuICB9XG59O1xuXG4vLyB3cmFwcyBwb3NpdGlvbiBmb3Igd3JhcEFyb3VuZCwgdG8gbW92ZSB0byBjbG9zZXN0IHNsaWRlLiAjMTEzXG5wcm90by5fd3JhcFNlbGVjdCA9IGZ1bmN0aW9uKCBpbmRleCApIHtcbiAgaWYgKCAhdGhpcy5pc1dyYXBwaW5nICkgcmV0dXJuO1xuXG4gIGNvbnN0IHsgc2VsZWN0ZWRJbmRleCwgc2xpZGVhYmxlV2lkdGgsIHNsaWRlczogeyBsZW5ndGggfSB9ID0gdGhpcztcbiAgLy8gc2hpZnQgaW5kZXggZm9yIHdyYXAsIGRvIG5vdCB3cmFwIGRyYWdTZWxlY3RcbiAgaWYgKCAhdGhpcy5pc0RyYWdTZWxlY3QgKSB7XG4gICAgbGV0IHdyYXBJbmRleCA9IHV0aWxzLm1vZHVsbyggaW5kZXgsIGxlbmd0aCApO1xuICAgIC8vIGdvIHRvIHNob3J0ZXN0XG4gICAgbGV0IGRlbHRhID0gTWF0aC5hYnMoIHdyYXBJbmRleCAtIHNlbGVjdGVkSW5kZXggKTtcbiAgICBsZXQgYmFja1dyYXBEZWx0YSA9IE1hdGguYWJzKCAoIHdyYXBJbmRleCArIGxlbmd0aCApIC0gc2VsZWN0ZWRJbmRleCApO1xuICAgIGxldCBmb3Jld2FyZFdyYXBEZWx0YSA9IE1hdGguYWJzKCAoIHdyYXBJbmRleCAtIGxlbmd0aCApIC0gc2VsZWN0ZWRJbmRleCApO1xuICAgIGlmICggYmFja1dyYXBEZWx0YSA8IGRlbHRhICkge1xuICAgICAgaW5kZXggKz0gbGVuZ3RoO1xuICAgIH0gZWxzZSBpZiAoIGZvcmV3YXJkV3JhcERlbHRhIDwgZGVsdGEgKSB7XG4gICAgICBpbmRleCAtPSBsZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgLy8gd3JhcCBwb3NpdGlvbiBzbyBzbGlkZXIgaXMgd2l0aGluIG5vcm1hbCBhcmVhXG4gIGlmICggaW5kZXggPCAwICkge1xuICAgIHRoaXMueCAtPSBzbGlkZWFibGVXaWR0aDtcbiAgfSBlbHNlIGlmICggaW5kZXggPj0gbGVuZ3RoICkge1xuICAgIHRoaXMueCArPSBzbGlkZWFibGVXaWR0aDtcbiAgfVxufTtcblxucHJvdG8ucHJldmlvdXMgPSBmdW5jdGlvbiggaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIHRoaXMuc2VsZWN0KCB0aGlzLnNlbGVjdGVkSW5kZXggLSAxLCBpc1dyYXAsIGlzSW5zdGFudCApO1xufTtcblxucHJvdG8ubmV4dCA9IGZ1bmN0aW9uKCBpc1dyYXAsIGlzSW5zdGFudCApIHtcbiAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCArIDEsIGlzV3JhcCwgaXNJbnN0YW50ICk7XG59O1xuXG5wcm90by51cGRhdGVTZWxlY3RlZFNsaWRlID0gZnVuY3Rpb24oKSB7XG4gIGxldCBzbGlkZSA9IHRoaXMuc2xpZGVzWyB0aGlzLnNlbGVjdGVkSW5kZXggXTtcbiAgLy8gc2VsZWN0ZWRJbmRleCBjb3VsZCBiZSBvdXRzaWRlIG9mIHNsaWRlcywgaWYgdHJpZ2dlcmVkIGJlZm9yZSByZXNpemUoKVxuICBpZiAoICFzbGlkZSApIHJldHVybjtcblxuICAvLyB1bnNlbGVjdCBwcmV2aW91cyBzZWxlY3RlZCBzbGlkZVxuICB0aGlzLnVuc2VsZWN0U2VsZWN0ZWRTbGlkZSgpO1xuICAvLyB1cGRhdGUgbmV3IHNlbGVjdGVkIHNsaWRlXG4gIHRoaXMuc2VsZWN0ZWRTbGlkZSA9IHNsaWRlO1xuICBzbGlkZS5zZWxlY3QoKTtcbiAgdGhpcy5zZWxlY3RlZENlbGxzID0gc2xpZGUuY2VsbHM7XG4gIHRoaXMuc2VsZWN0ZWRFbGVtZW50cyA9IHNsaWRlLmdldENlbGxFbGVtZW50cygpO1xuICAvLyBIQUNLOiBzZWxlY3RlZENlbGwgJiBzZWxlY3RlZEVsZW1lbnQgaXMgZmlyc3QgY2VsbCBpbiBzbGlkZSwgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgdGhpcy5zZWxlY3RlZENlbGwgPSBzbGlkZS5jZWxsc1swXTtcbiAgdGhpcy5zZWxlY3RlZEVsZW1lbnQgPSB0aGlzLnNlbGVjdGVkRWxlbWVudHNbMF07XG59O1xuXG5wcm90by51bnNlbGVjdFNlbGVjdGVkU2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnNlbGVjdGVkU2xpZGUgKSB0aGlzLnNlbGVjdGVkU2xpZGUudW5zZWxlY3QoKTtcbn07XG5cbnByb3RvLnNlbGVjdEluaXRpYWxJbmRleCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgaW5pdGlhbEluZGV4ID0gdGhpcy5vcHRpb25zLmluaXRpYWxJbmRleDtcbiAgLy8gYWxyZWFkeSBhY3RpdmF0ZWQsIHNlbGVjdCBwcmV2aW91cyBzZWxlY3RlZEluZGV4XG4gIGlmICggdGhpcy5pc0luaXRBY3RpdmF0ZWQgKSB7XG4gICAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCwgZmFsc2UsIHRydWUgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2VsZWN0IHdpdGggc2VsZWN0b3Igc3RyaW5nXG4gIGlmICggaW5pdGlhbEluZGV4ICYmIHR5cGVvZiBpbml0aWFsSW5kZXggPT0gJ3N0cmluZycgKSB7XG4gICAgbGV0IGNlbGwgPSB0aGlzLnF1ZXJ5Q2VsbCggaW5pdGlhbEluZGV4ICk7XG4gICAgaWYgKCBjZWxsICkge1xuICAgICAgdGhpcy5zZWxlY3RDZWxsKCBpbml0aWFsSW5kZXgsIGZhbHNlLCB0cnVlICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgbGV0IGluZGV4ID0gMDtcbiAgLy8gc2VsZWN0IHdpdGggbnVtYmVyXG4gIGlmICggaW5pdGlhbEluZGV4ICYmIHRoaXMuc2xpZGVzWyBpbml0aWFsSW5kZXggXSApIHtcbiAgICBpbmRleCA9IGluaXRpYWxJbmRleDtcbiAgfVxuICAvLyBzZWxlY3QgaW5zdGFudGx5XG4gIHRoaXMuc2VsZWN0KCBpbmRleCwgZmFsc2UsIHRydWUgKTtcbn07XG5cbi8qKlxuICogc2VsZWN0IHNsaWRlIGZyb20gbnVtYmVyIG9yIGNlbGwgZWxlbWVudFxuICogQHBhcmFtIHtbRWxlbWVudCwgTnVtYmVyXX0gdmFsdWUgLSB6ZXJvLWJhc2VkIGluZGV4IG9yIGVsZW1lbnQgdG8gc2VsZWN0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzV3JhcCAtIGVuYWJsZXMgd3JhcHBpbmcgYXJvdW5kIGZvciBleHRyYSBpbmRleFxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSBkaXNhYmxlcyBzbGlkZSBhbmltYXRpb25cbiAqL1xucHJvdG8uc2VsZWN0Q2VsbCA9IGZ1bmN0aW9uKCB2YWx1ZSwgaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIC8vIGdldCBjZWxsXG4gIGxldCBjZWxsID0gdGhpcy5xdWVyeUNlbGwoIHZhbHVlICk7XG4gIGlmICggIWNlbGwgKSByZXR1cm47XG5cbiAgbGV0IGluZGV4ID0gdGhpcy5nZXRDZWxsU2xpZGVJbmRleCggY2VsbCApO1xuICB0aGlzLnNlbGVjdCggaW5kZXgsIGlzV3JhcCwgaXNJbnN0YW50ICk7XG59O1xuXG5wcm90by5nZXRDZWxsU2xpZGVJbmRleCA9IGZ1bmN0aW9uKCBjZWxsICkge1xuICAvLyBnZXQgaW5kZXggb2Ygc2xpZGUgdGhhdCBoYXMgY2VsbFxuICBsZXQgY2VsbFNsaWRlID0gdGhpcy5zbGlkZXMuZmluZCggKCBzbGlkZSApID0+IHNsaWRlLmNlbGxzLmluY2x1ZGVzKCBjZWxsICkgKTtcbiAgcmV0dXJuIHRoaXMuc2xpZGVzLmluZGV4T2YoIGNlbGxTbGlkZSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0IGNlbGxzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogZ2V0IEZsaWNraXR5LkNlbGwsIGdpdmVuIGFuIEVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIG1hdGNoaW5nIGNlbGwgZWxlbWVudFxuICogQHJldHVybnMge0ZsaWNraXR5LkNlbGx9IGNlbGwgLSBtYXRjaGluZyBjZWxsXG4gKi9cbnByb3RvLmdldENlbGwgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgLy8gbG9vcCB0aHJvdWdoIGNlbGxzIHRvIGdldCB0aGUgb25lIHRoYXQgbWF0Y2hlc1xuICBmb3IgKCBsZXQgY2VsbCBvZiB0aGlzLmNlbGxzICkge1xuICAgIGlmICggY2VsbC5lbGVtZW50ID09PSBlbGVtICkgcmV0dXJuIGNlbGw7XG4gIH1cbn07XG5cbi8qKlxuICogZ2V0IGNvbGxlY3Rpb24gb2YgRmxpY2tpdHkuQ2VsbHMsIGdpdmVuIEVsZW1lbnRzXG4gKiBAcGFyYW0ge1tFbGVtZW50LCBBcnJheSwgTm9kZUxpc3RdfSBlbGVtcyAtIG11bHRpcGxlIGVsZW1lbnRzXG4gKiBAcmV0dXJucyB7QXJyYXl9IGNlbGxzIC0gRmxpY2tpdHkuQ2VsbHNcbiAqL1xucHJvdG8uZ2V0Q2VsbHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICByZXR1cm4gZWxlbXMubWFwKCAoIGVsZW0gKSA9PiB0aGlzLmdldENlbGwoIGVsZW0gKSApLmZpbHRlciggQm9vbGVhbiApO1xufTtcblxuLyoqXG4gKiBnZXQgY2VsbCBlbGVtZW50c1xuICogQHJldHVybnMge0FycmF5fSBjZWxsRWxlbXNcbiAqL1xucHJvdG8uZ2V0Q2VsbEVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNlbGxzLm1hcCggKCBjZWxsICkgPT4gY2VsbC5lbGVtZW50ICk7XG59O1xuXG4vKipcbiAqIGdldCBwYXJlbnQgY2VsbCBmcm9tIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIGNoaWxkIGVsZW1lbnRcbiAqIEByZXR1cm5zIHtGbGlja2l0LkNlbGx9IGNlbGwgLSBwYXJlbnQgY2VsbFxuICovXG5wcm90by5nZXRQYXJlbnRDZWxsID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIC8vIGZpcnN0IGNoZWNrIGlmIGVsZW0gaXMgY2VsbFxuICBsZXQgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggZWxlbSApO1xuICBpZiAoIGNlbGwgKSByZXR1cm4gY2VsbDtcblxuICAvLyB0cnkgdG8gZ2V0IHBhcmVudCBjZWxsIGVsZW1cbiAgbGV0IGNsb3Nlc3QgPSBlbGVtLmNsb3Nlc3QoJy5mbGlja2l0eS1zbGlkZXIgPiAqJyk7XG4gIHJldHVybiB0aGlzLmdldENlbGwoIGNsb3Nlc3QgKTtcbn07XG5cbi8qKlxuICogZ2V0IGNlbGxzIGFkamFjZW50IHRvIGEgc2xpZGVcbiAqIEBwYXJhbSB7SW50ZWdlcn0gYWRqQ291bnQgLSBudW1iZXIgb2YgYWRqYWNlbnQgc2xpZGVzXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gaW5kZXggb2Ygc2xpZGUgdG8gc3RhcnRcbiAqIEByZXR1cm5zIHtBcnJheX0gY2VsbHMgLSBhcnJheSBvZiBGbGlja2l0eS5DZWxsc1xuICovXG5wcm90by5nZXRBZGphY2VudENlbGxFbGVtZW50cyA9IGZ1bmN0aW9uKCBhZGpDb3VudCwgaW5kZXggKSB7XG4gIGlmICggIWFkakNvdW50ICkgcmV0dXJuIHRoaXMuc2VsZWN0ZWRTbGlkZS5nZXRDZWxsRWxlbWVudHMoKTtcblxuICBpbmRleCA9IGluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzLnNlbGVjdGVkSW5kZXggOiBpbmRleDtcblxuICBsZXQgbGVuID0gdGhpcy5zbGlkZXMubGVuZ3RoO1xuICBpZiAoIDEgKyAoIGFkakNvdW50ICogMiApID49IGxlbiApIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDZWxsRWxlbWVudHMoKTsgLy8gZ2V0IGFsbFxuICB9XG5cbiAgbGV0IGNlbGxFbGVtcyA9IFtdO1xuICBmb3IgKCBsZXQgaSA9IGluZGV4IC0gYWRqQ291bnQ7IGkgPD0gaW5kZXggKyBhZGpDb3VudDsgaSsrICkge1xuICAgIGxldCBzbGlkZUluZGV4ID0gdGhpcy5pc1dyYXBwaW5nID8gdXRpbHMubW9kdWxvKCBpLCBsZW4gKSA6IGk7XG4gICAgbGV0IHNsaWRlID0gdGhpcy5zbGlkZXNbIHNsaWRlSW5kZXggXTtcbiAgICBpZiAoIHNsaWRlICkge1xuICAgICAgY2VsbEVsZW1zID0gY2VsbEVsZW1zLmNvbmNhdCggc2xpZGUuZ2V0Q2VsbEVsZW1lbnRzKCkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNlbGxFbGVtcztcbn07XG5cbi8qKlxuICogc2VsZWN0IHNsaWRlIGZyb20gbnVtYmVyIG9yIGNlbGwgZWxlbWVudFxuICogQHBhcmFtIHtbRWxlbWVudCwgU3RyaW5nLCBOdW1iZXJdfSBzZWxlY3RvciAtIGVsZW1lbnQsIHNlbGVjdG9yIHN0cmluZywgb3IgaW5kZXhcbiAqIEByZXR1cm5zIHtGbGlja2l0eS5DZWxsfSAtIG1hdGNoaW5nIGNlbGxcbiAqL1xucHJvdG8ucXVlcnlDZWxsID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuICBpZiAoIHR5cGVvZiBzZWxlY3RvciA9PSAnbnVtYmVyJyApIHtcbiAgICAvLyB1c2UgbnVtYmVyIGFzIGluZGV4XG4gICAgcmV0dXJuIHRoaXMuY2VsbHNbIHNlbGVjdG9yIF07XG4gIH1cbiAgLy8gZG8gbm90IHNlbGVjdCBpbnZhbGlkIHNlbGVjdG9ycyBmcm9tIGhhc2g6ICMxMjMsICMvLiAjNzkxXG4gIGxldCBpc1NlbGVjdG9yU3RyaW5nID0gdHlwZW9mIHNlbGVjdG9yID09ICdzdHJpbmcnICYmICFzZWxlY3Rvci5tYXRjaCggL15bIy5dP1tcXGQvXS8gKTtcbiAgaWYgKCBpc1NlbGVjdG9yU3RyaW5nICkge1xuICAgIC8vIHVzZSBzdHJpbmcgYXMgc2VsZWN0b3IsIGdldCBlbGVtZW50XG4gICAgc2VsZWN0b3IgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvciggc2VsZWN0b3IgKTtcbiAgfVxuICAvLyBnZXQgY2VsbCBmcm9tIGVsZW1lbnRcbiAgcmV0dXJuIHRoaXMuZ2V0Q2VsbCggc2VsZWN0b3IgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGV2ZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by51aUNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVtaXRFdmVudCgndWlDaGFuZ2UnKTtcbn07XG5cbi8vIC0tLS0tIHJlc2l6ZSAtLS0tLSAvL1xuXG5wcm90by5vbnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLndhdGNoQ1NTKCk7XG4gIHRoaXMucmVzaXplKCk7XG59O1xuXG51dGlscy5kZWJvdW5jZU1ldGhvZCggRmxpY2tpdHksICdvbnJlc2l6ZScsIDE1MCApO1xuXG5wcm90by5yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgLy8gIzExNzcgZGlzYWJsZSByZXNpemUgYmVoYXZpb3Igd2hlbiBhbmltYXRpbmcgb3IgZHJhZ2dpbmcgZm9yIGlPUyAxNVxuICBpZiAoICF0aGlzLmlzQWN0aXZlIHx8IHRoaXMuaXNBbmltYXRpbmcgfHwgdGhpcy5pc0RyYWdnaW5nICkgcmV0dXJuO1xuICB0aGlzLmdldFNpemUoKTtcbiAgLy8gd3JhcCB2YWx1ZXNcbiAgaWYgKCB0aGlzLmlzV3JhcHBpbmcgKSB7XG4gICAgdGhpcy54ID0gdXRpbHMubW9kdWxvKCB0aGlzLngsIHRoaXMuc2xpZGVhYmxlV2lkdGggKTtcbiAgfVxuICB0aGlzLnBvc2l0aW9uQ2VsbHMoKTtcbiAgdGhpcy5fdXBkYXRlV3JhcFNoaWZ0Q2VsbHMoKTtcbiAgdGhpcy5zZXRHYWxsZXJ5U2l6ZSgpO1xuICB0aGlzLmVtaXRFdmVudCgncmVzaXplJyk7XG4gIC8vIHVwZGF0ZSBzZWxlY3RlZCBpbmRleCBmb3IgZ3JvdXAgc2xpZGVzLCBpbnN0YW50XG4gIC8vIFRPRE86IHBvc2l0aW9uIGNhbiBiZSBsb3N0IGJldHdlZW4gZ3JvdXBzIG9mIHZhcmlvdXMgbnVtYmVyc1xuICBsZXQgc2VsZWN0ZWRFbGVtZW50ID0gdGhpcy5zZWxlY3RlZEVsZW1lbnRzICYmIHRoaXMuc2VsZWN0ZWRFbGVtZW50c1swXTtcbiAgdGhpcy5zZWxlY3RDZWxsKCBzZWxlY3RlZEVsZW1lbnQsIGZhbHNlLCB0cnVlICk7XG59O1xuXG4vLyB3YXRjaGVzIHRoZSA6YWZ0ZXIgcHJvcGVydHksIGFjdGl2YXRlcy9kZWFjdGl2YXRlc1xucHJvdG8ud2F0Y2hDU1MgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLndhdGNoQ1NTICkgcmV0dXJuO1xuXG4gIGxldCBhZnRlckNvbnRlbnQgPSBnZXRDb21wdXRlZFN0eWxlKCB0aGlzLmVsZW1lbnQsICc6YWZ0ZXInICkuY29udGVudDtcbiAgLy8gYWN0aXZhdGUgaWYgOmFmdGVyIHsgY29udGVudDogJ2ZsaWNraXR5JyB9XG4gIGlmICggYWZ0ZXJDb250ZW50LmluY2x1ZGVzKCdmbGlja2l0eScpICkge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgfVxufTtcblxuLy8gLS0tLS0ga2V5ZG93biAtLS0tLSAvL1xuXG4vLyBnbyBwcmV2aW91cy9uZXh0IGlmIGxlZnQvcmlnaHQga2V5cyBwcmVzc2VkXG5wcm90by5vbmtleWRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGxldCB7IGFjdGl2ZUVsZW1lbnQgfSA9IGRvY3VtZW50O1xuICBsZXQgaGFuZGxlciA9IEZsaWNraXR5LmtleWJvYXJkSGFuZGxlcnNbIGV2ZW50LmtleSBdO1xuICAvLyBvbmx5IHdvcmsgaWYgZWxlbWVudCBpcyBpbiBmb2N1c1xuICBpZiAoICF0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSB8fCAhYWN0aXZlRWxlbWVudCB8fCAhaGFuZGxlciApIHJldHVybjtcblxuICBsZXQgaXNGb2N1c2VkID0gdGhpcy5mb2N1c2FibGVFbGVtcy5zb21lKCAoIGVsZW0gKSA9PiBhY3RpdmVFbGVtZW50ID09PSBlbGVtICk7XG4gIGlmICggaXNGb2N1c2VkICkgaGFuZGxlci5jYWxsKCB0aGlzICk7XG59O1xuXG5GbGlja2l0eS5rZXlib2FyZEhhbmRsZXJzID0ge1xuICBBcnJvd0xlZnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudWlDaGFuZ2UoKTtcbiAgICBsZXQgbGVmdE1ldGhvZCA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/ICduZXh0JyA6ICdwcmV2aW91cyc7XG4gICAgdGhpc1sgbGVmdE1ldGhvZCBdKCk7XG4gIH0sXG4gIEFycm93UmlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudWlDaGFuZ2UoKTtcbiAgICBsZXQgcmlnaHRNZXRob2QgPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAncHJldmlvdXMnIDogJ25leHQnO1xuICAgIHRoaXNbIHJpZ2h0TWV0aG9kIF0oKTtcbiAgfSxcbn07XG5cbi8vIC0tLS0tIGZvY3VzIC0tLS0tIC8vXG5cbnByb3RvLmZvY3VzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkZXN0cm95IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGRlYWN0aXZhdGUgYWxsIEZsaWNraXR5IGZ1bmN0aW9uYWxpdHksIGJ1dCBrZWVwIHN0dWZmIGF2YWlsYWJsZVxucHJvdG8uZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzQWN0aXZlICkgcmV0dXJuO1xuXG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdmbGlja2l0eS1lbmFibGVkJyk7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdmbGlja2l0eS1ydGwnKTtcbiAgdGhpcy51bnNlbGVjdFNlbGVjdGVkU2xpZGUoKTtcbiAgLy8gZGVzdHJveSBjZWxsc1xuICB0aGlzLmNlbGxzLmZvckVhY2goICggY2VsbCApID0+IGNlbGwuZGVzdHJveSgpICk7XG4gIHRoaXMudmlld3BvcnQucmVtb3ZlKCk7XG4gIC8vIG1vdmUgY2hpbGQgZWxlbWVudHMgYmFjayBpbnRvIGVsZW1lbnRcbiAgdGhpcy5lbGVtZW50LmFwcGVuZCggLi4udGhpcy5zbGlkZXIuY2hpbGRyZW4gKTtcbiAgaWYgKCB0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSApIHtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd0YWJJbmRleCcpO1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMgKTtcbiAgfVxuICAvLyBzZXQgZmxhZ3NcbiAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICB0aGlzLmVtaXRFdmVudCgnZGVhY3RpdmF0ZScpO1xufTtcblxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XG4gIHRoaXMuYWxsT2ZmKCk7XG4gIHRoaXMuZW1pdEV2ZW50KCdkZXN0cm95Jyk7XG4gIGlmICggalF1ZXJ5ICYmIHRoaXMuJGVsZW1lbnQgKSB7XG4gICAgalF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMuZWxlbWVudCwgJ2ZsaWNraXR5JyApO1xuICB9XG4gIGRlbGV0ZSB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEO1xuICBkZWxldGUgaW5zdGFuY2VzWyB0aGlzLmd1aWQgXTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHByb3RvdHlwZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5PYmplY3QuYXNzaWduKCBwcm90bywgYW5pbWF0ZVByb3RvdHlwZSApO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBleHRyYXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBnZXQgRmxpY2tpdHkgaW5zdGFuY2UgZnJvbSBlbGVtZW50XG4gKiBAcGFyYW0ge1tFbGVtZW50LCBTdHJpbmddfSBlbGVtIC0gZWxlbWVudCBvciBzZWxlY3RvciBzdHJpbmdcbiAqIEByZXR1cm5zIHtGbGlja2l0eX0gLSBGbGlja2l0eSBpbnN0YW5jZVxuICovXG5GbGlja2l0eS5kYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGVsZW0gPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW0gKTtcbiAgaWYgKCBlbGVtICkgcmV0dXJuIGluc3RhbmNlc1sgZWxlbS5mbGlja2l0eUdVSUQgXTtcbn07XG5cbnV0aWxzLmh0bWxJbml0KCBGbGlja2l0eSwgJ2ZsaWNraXR5JyApO1xuXG5sZXQgeyBqUXVlcnlCcmlkZ2V0IH0gPSB3aW5kb3c7XG5pZiAoIGpRdWVyeSAmJiBqUXVlcnlCcmlkZ2V0ICkge1xuICBqUXVlcnlCcmlkZ2V0KCAnZmxpY2tpdHknLCBGbGlja2l0eSwgalF1ZXJ5ICk7XG59XG5cbi8vIHNldCBpbnRlcm5hbCBqUXVlcnksIGZvciBXZWJwYWNrICsgalF1ZXJ5IHYzLCAjNDc4XG5GbGlja2l0eS5zZXRKUXVlcnkgPSBmdW5jdGlvbigganEgKSB7XG4gIGpRdWVyeSA9IGpxO1xufTtcblxuRmxpY2tpdHkuQ2VsbCA9IENlbGw7XG5GbGlja2l0eS5TbGlkZSA9IFNsaWRlO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuIiwiLy8gZHJhZ1xuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHJlcXVpcmUoJy4vY29yZScpLFxuICAgICAgICByZXF1aXJlKCd1bmlkcmFnZ2VyJyksXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuVW5pZHJhZ2dlcixcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLFxuICAgIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIFVuaWRyYWdnZXIsIHV0aWxzICkge1xuXG4vLyAtLS0tLSBkZWZhdWx0cyAtLS0tLSAvL1xuXG5PYmplY3QuYXNzaWduKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBkcmFnZ2FibGU6ICc+MScsXG4gIGRyYWdUaHJlc2hvbGQ6IDMsXG59ICk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWcgcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmxldCBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcbk9iamVjdC5hc3NpZ24oIHByb3RvLCBVbmlkcmFnZ2VyLnByb3RvdHlwZSApOyAvLyBpbmhlcml0IFVuaWRyYWdnZXJcbnByb3RvLnRvdWNoQWN0aW9uVmFsdWUgPSAnJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbkZsaWNraXR5LmNyZWF0ZS5kcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMub25BY3RpdmF0ZURyYWcgKTtcbiAgdGhpcy5vbiggJ3VpQ2hhbmdlJywgdGhpcy5fdWlDaGFuZ2VEcmFnICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5vbkRlYWN0aXZhdGVEcmFnICk7XG4gIHRoaXMub24oICdjZWxsQ2hhbmdlJywgdGhpcy51cGRhdGVEcmFnZ2FibGUgKTtcbiAgdGhpcy5vbiggJ3BvaW50ZXJEb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG93biApO1xuICB0aGlzLm9uKCAncG9pbnRlclVwJywgdGhpcy5oYW5kbGVQb2ludGVyVXAgKTtcbiAgdGhpcy5vbiggJ3BvaW50ZXJEb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG9uZSApO1xuICB0aGlzLm9uKCAnZHJhZ1N0YXJ0JywgdGhpcy5oYW5kbGVEcmFnU3RhcnQgKTtcbiAgdGhpcy5vbiggJ2RyYWdNb3ZlJywgdGhpcy5oYW5kbGVEcmFnTW92ZSApO1xuICB0aGlzLm9uKCAnZHJhZ0VuZCcsIHRoaXMuaGFuZGxlRHJhZ0VuZCApO1xuICB0aGlzLm9uKCAnc3RhdGljQ2xpY2snLCB0aGlzLmhhbmRsZVN0YXRpY0NsaWNrICk7XG4gIC8vIFRPRE8gdXBkYXRlRHJhZ2dhYmxlIG9uIHJlc2l6ZT8gaWYgZ3JvdXBDZWxscyAmIHNsaWRlcyBjaGFuZ2Vcbn07XG5cbnByb3RvLm9uQWN0aXZhdGVEcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaGFuZGxlcyA9IFsgdGhpcy52aWV3cG9ydCBdO1xuICB0aGlzLmJpbmRIYW5kbGVzKCk7XG4gIHRoaXMudXBkYXRlRHJhZ2dhYmxlKCk7XG59O1xuXG5wcm90by5vbkRlYWN0aXZhdGVEcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudW5iaW5kSGFuZGxlcygpO1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZHJhZ2dhYmxlJyk7XG59O1xuXG5wcm90by51cGRhdGVEcmFnZ2FibGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gZGlzYWJsZSBkcmFnZ2luZyBpZiBsZXNzIHRoYW4gMiBzbGlkZXMuICMyNzhcbiAgaWYgKCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlID09PSAnPjEnICkge1xuICAgIHRoaXMuaXNEcmFnZ2FibGUgPSB0aGlzLnNsaWRlcy5sZW5ndGggPiAxO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNEcmFnZ2FibGUgPSB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlO1xuICB9XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCAnaXMtZHJhZ2dhYmxlJywgdGhpcy5pc0RyYWdnYWJsZSApO1xufTtcblxucHJvdG8uX3VpQ2hhbmdlRHJhZyA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5pc0ZyZWVTY3JvbGxpbmc7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwb2ludGVyIGV2ZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by5oYW5kbGVQb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSApIHtcbiAgICAvLyBwcm9jZWVkIGZvciBzdGF0aWNDbGlja1xuICAgIHRoaXMuYmluZEFjdGl2ZVBvaW50ZXJFdmVudHMoIGV2ZW50ICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGlzVG91Y2hTdGFydCA9IGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0JztcbiAgbGV0IGlzVG91Y2hQb2ludGVyID0gZXZlbnQucG9pbnRlclR5cGUgPT09ICd0b3VjaCc7XG4gIGxldCBpc0ZvY3VzTm9kZSA9IGV2ZW50LnRhcmdldC5tYXRjaGVzKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpO1xuICBpZiAoICFpc1RvdWNoU3RhcnQgJiYgIWlzVG91Y2hQb2ludGVyICYmICFpc0ZvY3VzTm9kZSApIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGlmICggIWlzRm9jdXNOb2RlICkgdGhpcy5mb2N1cygpO1xuICAvLyBibHVyXG4gIGlmICggZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGhpcy5lbGVtZW50ICkgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIC8vIHN0b3AgaWYgaXQgd2FzIG1vdmluZ1xuICB0aGlzLmRyYWdYID0gdGhpcy54O1xuICB0aGlzLnZpZXdwb3J0LmNsYXNzTGlzdC5hZGQoJ2lzLXBvaW50ZXItZG93bicpO1xuICAvLyB0cmFjayBzY3JvbGxpbmdcbiAgdGhpcy5wb2ludGVyRG93blNjcm9sbCA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhpcyApO1xuICB0aGlzLmJpbmRBY3RpdmVQb2ludGVyRXZlbnRzKCBldmVudCApO1xufTtcblxuLy8gLS0tLS0gbW92ZSAtLS0tLSAvL1xuXG5wcm90by5oYXNEcmFnU3RhcnRlZCA9IGZ1bmN0aW9uKCBtb3ZlVmVjdG9yICkge1xuICByZXR1cm4gTWF0aC5hYnMoIG1vdmVWZWN0b3IueCApID4gdGhpcy5vcHRpb25zLmRyYWdUaHJlc2hvbGQ7XG59O1xuXG4vLyAtLS0tLSB1cCAtLS0tLSAvL1xuXG5wcm90by5oYW5kbGVQb2ludGVyVXAgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuaXNUb3VjaFNjcm9sbGluZztcbiAgdGhpcy52aWV3cG9ydC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1wb2ludGVyLWRvd24nKTtcbn07XG5cbnByb3RvLmhhbmRsZVBvaW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhpcyApO1xuICBkZWxldGUgdGhpcy5wb2ludGVyRG93blNjcm9sbDtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWdnaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnByb3RvLmhhbmRsZURyYWdTdGFydCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlICkgcmV0dXJuO1xuXG4gIHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gPSB0aGlzLng7XG4gIHRoaXMuc3RhcnRBbmltYXRpb24oKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzY3JvbGwnLCB0aGlzICk7XG59O1xuXG5wcm90by5oYW5kbGVEcmFnTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSApIHJldHVybjtcblxuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gIHRoaXMucHJldmlvdXNEcmFnWCA9IHRoaXMuZHJhZ1g7XG4gIC8vIHJldmVyc2UgaWYgcmlnaHQtdG8tbGVmdFxuICBsZXQgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gLTEgOiAxO1xuICAvLyB3cmFwIGFyb3VuZCBtb3ZlLiAjNTg5XG4gIGlmICggdGhpcy5pc1dyYXBwaW5nICkgbW92ZVZlY3Rvci54ICU9IHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gIGxldCBkcmFnWCA9IHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKyBtb3ZlVmVjdG9yLnggKiBkaXJlY3Rpb247XG5cbiAgaWYgKCAhdGhpcy5pc1dyYXBwaW5nICkge1xuICAgIC8vIHNsb3cgZHJhZ1xuICAgIGxldCBvcmlnaW5Cb3VuZCA9IE1hdGgubWF4KCAtdGhpcy5zbGlkZXNbMF0udGFyZ2V0LCB0aGlzLmRyYWdTdGFydFBvc2l0aW9uICk7XG4gICAgZHJhZ1ggPSBkcmFnWCA+IG9yaWdpbkJvdW5kID8gKCBkcmFnWCArIG9yaWdpbkJvdW5kICkgKiAwLjUgOiBkcmFnWDtcbiAgICBsZXQgZW5kQm91bmQgPSBNYXRoLm1pbiggLXRoaXMuZ2V0TGFzdFNsaWRlKCkudGFyZ2V0LCB0aGlzLmRyYWdTdGFydFBvc2l0aW9uICk7XG4gICAgZHJhZ1ggPSBkcmFnWCA8IGVuZEJvdW5kID8gKCBkcmFnWCArIGVuZEJvdW5kICkgKiAwLjUgOiBkcmFnWDtcbiAgfVxuXG4gIHRoaXMuZHJhZ1ggPSBkcmFnWDtcbiAgdGhpcy5kcmFnTW92ZVRpbWUgPSBuZXcgRGF0ZSgpO1xufTtcblxucHJvdG8uaGFuZGxlRHJhZ0VuZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlICkgcmV0dXJuO1xuXG4gIGxldCB7IGZyZWVTY3JvbGwgfSA9IHRoaXMub3B0aW9ucztcbiAgaWYgKCBmcmVlU2Nyb2xsICkgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPSB0cnVlO1xuICAvLyBzZXQgc2VsZWN0ZWRJbmRleCBiYXNlZCBvbiB3aGVyZSBmbGljayB3aWxsIGVuZCB1cFxuICBsZXQgaW5kZXggPSB0aGlzLmRyYWdFbmRSZXN0aW5nU2VsZWN0KCk7XG5cbiAgaWYgKCBmcmVlU2Nyb2xsICYmICF0aGlzLmlzV3JhcHBpbmcgKSB7XG4gICAgLy8gaWYgZnJlZS1zY3JvbGwgJiBub3Qgd3JhcCBhcm91bmRcbiAgICAvLyBkbyBub3QgZnJlZS1zY3JvbGwgaWYgZ29pbmcgb3V0c2lkZSBvZiBib3VuZGluZyBzbGlkZXNcbiAgICAvLyBzbyBib3VuZGluZyBzbGlkZXMgY2FuIGF0dHJhY3Qgc2xpZGVyLCBhbmQga2VlcCBpdCBpbiBib3VuZHNcbiAgICBsZXQgcmVzdGluZ1ggPSB0aGlzLmdldFJlc3RpbmdQb3NpdGlvbigpO1xuICAgIHRoaXMuaXNGcmVlU2Nyb2xsaW5nID0gLXJlc3RpbmdYID4gdGhpcy5zbGlkZXNbMF0udGFyZ2V0ICYmXG4gICAgICAtcmVzdGluZ1ggPCB0aGlzLmdldExhc3RTbGlkZSgpLnRhcmdldDtcbiAgfSBlbHNlIGlmICggIWZyZWVTY3JvbGwgJiYgaW5kZXggPT09IHRoaXMuc2VsZWN0ZWRJbmRleCApIHtcbiAgICAvLyBib29zdCBzZWxlY3Rpb24gaWYgc2VsZWN0ZWQgaW5kZXggaGFzIG5vdCBjaGFuZ2VkXG4gICAgaW5kZXggKz0gdGhpcy5kcmFnRW5kQm9vc3RTZWxlY3QoKTtcbiAgfVxuICBkZWxldGUgdGhpcy5wcmV2aW91c0RyYWdYO1xuICAvLyBhcHBseSBzZWxlY3Rpb25cbiAgLy8gSEFDSywgc2V0IGZsYWcgc28gZHJhZ2dpbmcgc3RheXMgaW4gY29ycmVjdCBkaXJlY3Rpb25cbiAgdGhpcy5pc0RyYWdTZWxlY3QgPSB0aGlzLmlzV3JhcHBpbmc7XG4gIHRoaXMuc2VsZWN0KCBpbmRleCApO1xuICBkZWxldGUgdGhpcy5pc0RyYWdTZWxlY3Q7XG59O1xuXG5wcm90by5kcmFnRW5kUmVzdGluZ1NlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcmVzdGluZ1ggPSB0aGlzLmdldFJlc3RpbmdQb3NpdGlvbigpO1xuICAvLyBob3cgZmFyIGF3YXkgZnJvbSBzZWxlY3RlZCBzbGlkZVxuICBsZXQgZGlzdGFuY2UgPSBNYXRoLmFicyggdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtcmVzdGluZ1gsIHRoaXMuc2VsZWN0ZWRJbmRleCApICk7XG4gIC8vIGdldCBjbG9zZXQgcmVzdGluZyBnb2luZyB1cCBhbmQgZ29pbmcgZG93blxuICBsZXQgcG9zaXRpdmVSZXN0aW5nID0gdGhpcy5fZ2V0Q2xvc2VzdFJlc3RpbmcoIHJlc3RpbmdYLCBkaXN0YW5jZSwgMSApO1xuICBsZXQgbmVnYXRpdmVSZXN0aW5nID0gdGhpcy5fZ2V0Q2xvc2VzdFJlc3RpbmcoIHJlc3RpbmdYLCBkaXN0YW5jZSwgLTEgKTtcbiAgLy8gdXNlIGNsb3NlciByZXN0aW5nIGZvciB3cmFwLWFyb3VuZFxuICByZXR1cm4gcG9zaXRpdmVSZXN0aW5nLmRpc3RhbmNlIDwgbmVnYXRpdmVSZXN0aW5nLmRpc3RhbmNlID9cbiAgICBwb3NpdGl2ZVJlc3RpbmcuaW5kZXggOiBuZWdhdGl2ZVJlc3RpbmcuaW5kZXg7XG59O1xuXG4vKipcbiAqIGdpdmVuIHJlc3RpbmcgWCBhbmQgZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxuICogZ2V0IHRoZSBkaXN0YW5jZSBhbmQgaW5kZXggb2YgdGhlIGNsb3Nlc3QgY2VsbFxuICogQHBhcmFtIHtOdW1iZXJ9IHJlc3RpbmdYIC0gZXN0aW1hdGVkIHBvc3QtZmxpY2sgcmVzdGluZyBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IGRpc3RhbmNlIC0gZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmNyZW1lbnQgLSArMSBvciAtMSwgZ29pbmcgdXAgb3IgZG93blxuICogQHJldHVybnMge09iamVjdH0gLSB7IGRpc3RhbmNlOiB7TnVtYmVyfSwgaW5kZXg6IHtJbnRlZ2VyfSB9XG4gKi9cbnByb3RvLl9nZXRDbG9zZXN0UmVzdGluZyA9IGZ1bmN0aW9uKCByZXN0aW5nWCwgZGlzdGFuY2UsIGluY3JlbWVudCApIHtcbiAgbGV0IGluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4O1xuICBsZXQgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgbGV0IGNvbmRpdGlvbiA9IHRoaXMub3B0aW9ucy5jb250YWluICYmICF0aGlzLmlzV3JhcHBpbmcgP1xuICAgIC8vIGlmIGNvbnRhaW5pbmcsIGtlZXAgZ29pbmcgaWYgZGlzdGFuY2UgaXMgZXF1YWwgdG8gbWluRGlzdGFuY2VcbiAgICAoIGRpc3QsIG1pbkRpc3QgKSA9PiBkaXN0IDw9IG1pbkRpc3QgOlxuICAgICggZGlzdCwgbWluRGlzdCApID0+IGRpc3QgPCBtaW5EaXN0O1xuXG4gIHdoaWxlICggY29uZGl0aW9uKCBkaXN0YW5jZSwgbWluRGlzdGFuY2UgKSApIHtcbiAgICAvLyBtZWFzdXJlIGRpc3RhbmNlIHRvIG5leHQgY2VsbFxuICAgIGluZGV4ICs9IGluY3JlbWVudDtcbiAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgIGRpc3RhbmNlID0gdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtcmVzdGluZ1gsIGluZGV4ICk7XG4gICAgaWYgKCBkaXN0YW5jZSA9PT0gbnVsbCApIGJyZWFrO1xuXG4gICAgZGlzdGFuY2UgPSBNYXRoLmFicyggZGlzdGFuY2UgKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGRpc3RhbmNlOiBtaW5EaXN0YW5jZSxcbiAgICAvLyBzZWxlY3RlZCB3YXMgcHJldmlvdXMgaW5kZXhcbiAgICBpbmRleDogaW5kZXggLSBpbmNyZW1lbnQsXG4gIH07XG59O1xuXG4vKipcbiAqIG1lYXN1cmUgZGlzdGFuY2UgYmV0d2VlbiB4IGFuZCBhIHNsaWRlIHRhcmdldFxuICogQHBhcmFtIHtOdW1iZXJ9IHggLSBob3Jpem9udGFsIHBvc2l0aW9uXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gc2xpZGUgaW5kZXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gc2xpZGUgZGlzdGFuY2VcbiAqL1xucHJvdG8uZ2V0U2xpZGVEaXN0YW5jZSA9IGZ1bmN0aW9uKCB4LCBpbmRleCApIHtcbiAgbGV0IGxlbiA9IHRoaXMuc2xpZGVzLmxlbmd0aDtcbiAgLy8gd3JhcCBhcm91bmQgaWYgYXQgbGVhc3QgMiBzbGlkZXNcbiAgbGV0IGlzV3JhcEFyb3VuZCA9IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIGxlbiA+IDE7XG4gIGxldCBzbGlkZUluZGV4ID0gaXNXcmFwQXJvdW5kID8gdXRpbHMubW9kdWxvKCBpbmRleCwgbGVuICkgOiBpbmRleDtcbiAgbGV0IHNsaWRlID0gdGhpcy5zbGlkZXNbIHNsaWRlSW5kZXggXTtcbiAgaWYgKCAhc2xpZGUgKSByZXR1cm4gbnVsbDtcblxuICAvLyBhZGQgZGlzdGFuY2UgZm9yIHdyYXAtYXJvdW5kIHNsaWRlc1xuICBsZXQgd3JhcCA9IGlzV3JhcEFyb3VuZCA/IHRoaXMuc2xpZGVhYmxlV2lkdGggKiBNYXRoLmZsb29yKCBpbmRleC9sZW4gKSA6IDA7XG4gIHJldHVybiB4IC0gKCBzbGlkZS50YXJnZXQgKyB3cmFwICk7XG59O1xuXG5wcm90by5kcmFnRW5kQm9vc3RTZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgLy8gZG8gbm90IGJvb3N0IGlmIG5vIHByZXZpb3VzRHJhZ1ggb3IgZHJhZ01vdmVUaW1lXG4gIGlmICggdGhpcy5wcmV2aW91c0RyYWdYID09PSB1bmRlZmluZWQgfHwgIXRoaXMuZHJhZ01vdmVUaW1lIHx8XG4gICAgLy8gb3IgaWYgZHJhZyB3YXMgaGVsZCBmb3IgMTAwIG1zXG4gICAgbmV3IERhdGUoKSAtIHRoaXMuZHJhZ01vdmVUaW1lID4gMTAwICkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgbGV0IGRpc3RhbmNlID0gdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtdGhpcy5kcmFnWCwgdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIGxldCBkZWx0YSA9IHRoaXMucHJldmlvdXNEcmFnWCAtIHRoaXMuZHJhZ1g7XG4gIGlmICggZGlzdGFuY2UgPiAwICYmIGRlbHRhID4gMCApIHtcbiAgICAvLyBib29zdCB0byBuZXh0IGlmIG1vdmluZyB0b3dhcmRzIHRoZSByaWdodCwgYW5kIHBvc2l0aXZlIHZlbG9jaXR5XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSBpZiAoIGRpc3RhbmNlIDwgMCAmJiBkZWx0YSA8IDAgKSB7XG4gICAgLy8gYm9vc3QgdG8gcHJldmlvdXMgaWYgbW92aW5nIHRvd2FyZHMgdGhlIGxlZnQsIGFuZCBuZWdhdGl2ZSB2ZWxvY2l0eVxuICAgIHJldHVybiAtMTtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbi8vIC0tLS0tIHNjcm9sbCAtLS0tLSAvL1xuXG5wcm90by5vbnNjcm9sbCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgc2Nyb2xsID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgbGV0IHNjcm9sbE1vdmVYID0gdGhpcy5wb2ludGVyRG93blNjcm9sbC54IC0gc2Nyb2xsLng7XG4gIGxldCBzY3JvbGxNb3ZlWSA9IHRoaXMucG9pbnRlckRvd25TY3JvbGwueSAtIHNjcm9sbC55O1xuICAvLyBjYW5jZWwgY2xpY2svdGFwIGlmIHNjcm9sbCBpcyB0b28gbXVjaFxuICBpZiAoIE1hdGguYWJzKCBzY3JvbGxNb3ZlWCApID4gMyB8fCBNYXRoLmFicyggc2Nyb2xsTW92ZVkgKSA+IDMgKSB7XG4gICAgdGhpcy5wb2ludGVyRG9uZSgpO1xuICB9XG59O1xuXG4vLyAtLS0tLSB1dGlscyAtLS0tLSAvL1xuXG5mdW5jdGlvbiBnZXRTY3JvbGxQb3NpdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0LFxuICB9O1xufVxuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcbiIsIi8vIGxhenlsb2FkXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHJlcXVpcmUoJy4vY29yZScpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXG4gICAgKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSggRmxpY2tpdHksIHV0aWxzICkge1xuXG5jb25zdCBsYXp5QXR0ciA9ICdkYXRhLWZsaWNraXR5LWxhenlsb2FkJztcbmNvbnN0IGxhenlTcmNBdHRyID0gYCR7bGF6eUF0dHJ9LXNyY2A7XG5jb25zdCBsYXp5U3Jjc2V0QXR0ciA9IGAke2xhenlBdHRyfS1zcmNzZXRgO1xuY29uc3QgaW1nU2VsZWN0b3IgPSBgaW1nWyR7bGF6eUF0dHJ9XSwgaW1nWyR7bGF6eVNyY0F0dHJ9XSwgYCArXG4gIGBpbWdbJHtsYXp5U3Jjc2V0QXR0cn1dLCBzb3VyY2VbJHtsYXp5U3Jjc2V0QXR0cn1dYDtcblxuRmxpY2tpdHkuY3JlYXRlLmxhenlMb2FkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub24oICdzZWxlY3QnLCB0aGlzLmxhenlMb2FkICk7XG5cbiAgdGhpcy5oYW5kbGVMYXp5TG9hZENvbXBsZXRlID0gdGhpcy5vbkxhenlMb2FkQ29tcGxldGUuYmluZCggdGhpcyApO1xufTtcblxubGV0IHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG5wcm90by5sYXp5TG9hZCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgeyBsYXp5TG9hZCB9ID0gdGhpcy5vcHRpb25zO1xuICBpZiAoICFsYXp5TG9hZCApIHJldHVybjtcblxuICAvLyBnZXQgYWRqYWNlbnQgY2VsbHMsIHVzZSBsYXp5TG9hZCBvcHRpb24gZm9yIGFkamFjZW50IGNvdW50XG4gIGxldCBhZGpDb3VudCA9IHR5cGVvZiBsYXp5TG9hZCA9PSAnbnVtYmVyJyA/IGxhenlMb2FkIDogMDtcbiAgLy8gbGF6eSBsb2FkIGltYWdlc1xuICB0aGlzLmdldEFkamFjZW50Q2VsbEVsZW1lbnRzKCBhZGpDb3VudCApXG4gICAgLm1hcCggZ2V0Q2VsbExhenlJbWFnZXMgKVxuICAgIC5mbGF0KClcbiAgICAuZm9yRWFjaCggKCBpbWcgKSA9PiBuZXcgTGF6eUxvYWRlciggaW1nLCB0aGlzLmhhbmRsZUxhenlMb2FkQ29tcGxldGUgKSApO1xufTtcblxuZnVuY3Rpb24gZ2V0Q2VsbExhenlJbWFnZXMoIGNlbGxFbGVtICkge1xuICAvLyBjaGVjayBpZiBjZWxsIGVsZW1lbnQgaXMgbGF6eSBpbWFnZVxuICBpZiAoIGNlbGxFbGVtLm1hdGNoZXMoJ2ltZycpICkge1xuICAgIGxldCBjZWxsQXR0ciA9IGNlbGxFbGVtLmdldEF0dHJpYnV0ZSggbGF6eUF0dHIgKTtcbiAgICBsZXQgY2VsbFNyY0F0dHIgPSBjZWxsRWxlbS5nZXRBdHRyaWJ1dGUoIGxhenlTcmNBdHRyICk7XG4gICAgbGV0IGNlbGxTcmNzZXRBdHRyID0gY2VsbEVsZW0uZ2V0QXR0cmlidXRlKCBsYXp5U3Jjc2V0QXR0ciApO1xuICAgIGlmICggY2VsbEF0dHIgfHwgY2VsbFNyY0F0dHIgfHwgY2VsbFNyY3NldEF0dHIgKSB7XG4gICAgICByZXR1cm4gY2VsbEVsZW07XG4gICAgfVxuICB9XG4gIC8vIHNlbGVjdCBsYXp5IGltYWdlcyBpbiBjZWxsXG4gIHJldHVybiBbIC4uLmNlbGxFbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIGltZ1NlbGVjdG9yICkgXTtcbn1cblxucHJvdG8ub25MYXp5TG9hZENvbXBsZXRlID0gZnVuY3Rpb24oIGltZywgZXZlbnQgKSB7XG4gIGxldCBjZWxsID0gdGhpcy5nZXRQYXJlbnRDZWxsKCBpbWcgKTtcbiAgbGV0IGNlbGxFbGVtID0gY2VsbCAmJiBjZWxsLmVsZW1lbnQ7XG4gIHRoaXMuY2VsbFNpemVDaGFuZ2UoIGNlbGxFbGVtICk7XG5cbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnbGF6eUxvYWQnLCBldmVudCwgY2VsbEVsZW0gKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExhenlMb2FkZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBjbGFzcyB0byBoYW5kbGUgbG9hZGluZyBpbWFnZXNcbiAqIEBwYXJhbSB7SW1hZ2V9IGltZyAtIEltYWdlIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uQ29tcGxldGUgLSBjYWxsYmFjayBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBMYXp5TG9hZGVyKCBpbWcsIG9uQ29tcGxldGUgKSB7XG4gIHRoaXMuaW1nID0gaW1nO1xuICB0aGlzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlO1xuICB0aGlzLmxvYWQoKTtcbn1cblxuTGF6eUxvYWRlci5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSB1dGlscy5oYW5kbGVFdmVudDtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICAvLyBnZXQgc3JjICYgc3Jjc2V0XG4gIGxldCBzcmMgPSB0aGlzLmltZy5nZXRBdHRyaWJ1dGUoIGxhenlBdHRyICkgfHxcbiAgICB0aGlzLmltZy5nZXRBdHRyaWJ1dGUoIGxhenlTcmNBdHRyICk7XG4gIGxldCBzcmNzZXQgPSB0aGlzLmltZy5nZXRBdHRyaWJ1dGUoIGxhenlTcmNzZXRBdHRyICk7XG4gIC8vIHNldCBzcmMgJiBzZXJzZXRcbiAgdGhpcy5pbWcuc3JjID0gc3JjO1xuICBpZiAoIHNyY3NldCApIHRoaXMuaW1nLnNldEF0dHJpYnV0ZSggJ3NyY3NldCcsIHNyY3NldCApO1xuICAvLyByZW1vdmUgYXR0clxuICB0aGlzLmltZy5yZW1vdmVBdHRyaWJ1dGUoIGxhenlBdHRyICk7XG4gIHRoaXMuaW1nLnJlbW92ZUF0dHJpYnV0ZSggbGF6eVNyY0F0dHIgKTtcbiAgdGhpcy5pbWcucmVtb3ZlQXR0cmlidXRlKCBsYXp5U3Jjc2V0QXR0ciApO1xufTtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUub25sb2FkID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLmNvbXBsZXRlKCBldmVudCwgJ2ZsaWNraXR5LWxhenlsb2FkZWQnICk7XG59O1xuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLmNvbXBsZXRlKCBldmVudCwgJ2ZsaWNraXR5LWxhenllcnJvcicgKTtcbn07XG5cbkxhenlMb2FkZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24oIGV2ZW50LCBjbGFzc05hbWUgKSB7XG4gIC8vIHVuYmluZCBldmVudHNcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgbGV0IG1lZGlhRWxlbSA9IHRoaXMuaW1nLnBhcmVudE5vZGUubWF0Y2hlcygncGljdHVyZScpID8gdGhpcy5pbWcucGFyZW50Tm9kZSA6IHRoaXMuaW1nO1xuICBtZWRpYUVsZW0uY2xhc3NMaXN0LmFkZCggY2xhc3NOYW1lICk7XG5cbiAgdGhpcy5vbkNvbXBsZXRlKCB0aGlzLmltZywgZXZlbnQgKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5GbGlja2l0eS5MYXp5TG9hZGVyID0gTGF6eUxvYWRlcjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcbiIsIi8vIGltYWdlc2xvYWRlZFxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICByZXF1aXJlKCcuL2NvcmUnKSxcbiAgICAgICAgcmVxdWlyZSgnaW1hZ2VzbG9hZGVkJyksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgICAgd2luZG93LmltYWdlc0xvYWRlZCxcbiAgICApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLFxuICAgIGZ1bmN0aW9uIGZhY3RvcnkoIEZsaWNraXR5LCBpbWFnZXNMb2FkZWQgKSB7XG5cbkZsaWNraXR5LmNyZWF0ZS5pbWFnZXNMb2FkZWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5pbWFnZXNMb2FkZWQgKTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5pbWFnZXNMb2FkZWQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmltYWdlc0xvYWRlZCApIHJldHVybjtcblxuICBsZXQgb25JbWFnZXNMb2FkZWRQcm9ncmVzcyA9ICggaW5zdGFuY2UsIGltYWdlICkgPT4ge1xuICAgIGxldCBjZWxsID0gdGhpcy5nZXRQYXJlbnRDZWxsKCBpbWFnZS5pbWcgKTtcbiAgICB0aGlzLmNlbGxTaXplQ2hhbmdlKCBjZWxsICYmIGNlbGwuZWxlbWVudCApO1xuICAgIGlmICggIXRoaXMub3B0aW9ucy5mcmVlU2Nyb2xsICkgdGhpcy5wb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQoKTtcbiAgfTtcbiAgaW1hZ2VzTG9hZGVkKCB0aGlzLnNsaWRlciApLm9uKCAncHJvZ3Jlc3MnLCBvbkltYWdlc0xvYWRlZFByb2dyZXNzICk7XG59O1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuIiwiLyohXG4gKiBGbGlja2l0eSB2My4wLjBcbiAqIFRvdWNoLCByZXNwb25zaXZlLCBmbGlja2FibGUgY2Fyb3VzZWxzXG4gKlxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxuICogb3IgRmxpY2tpdHkgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxuICpcbiAqIGh0dHBzOi8vZmxpY2tpdHkubWV0YWZpenp5LmNvXG4gKiBDb3B5cmlnaHQgMjAxNS0yMDIyIE1ldGFmaXp6eVxuICovXG5cbmlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgY29uc3QgRmxpY2tpdHkgPSByZXF1aXJlKCcuL2NvcmUnKTtcbiAgcmVxdWlyZSgnLi9kcmFnJyk7XG4gIHJlcXVpcmUoJy4vcHJldi1uZXh0LWJ1dHRvbicpO1xuICByZXF1aXJlKCcuL3BhZ2UtZG90cycpO1xuICByZXF1aXJlKCcuL3BsYXllcicpO1xuICByZXF1aXJlKCcuL2FkZC1yZW1vdmUtY2VsbCcpO1xuICByZXF1aXJlKCcuL2xhenlsb2FkJyk7XG4gIHJlcXVpcmUoJy4vaW1hZ2VzbG9hZGVkJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBGbGlja2l0eTtcbn1cbiIsIi8vIHBhZ2UgZG90c1xuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICByZXF1aXJlKCcuL2NvcmUnKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxuICAgICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIEZsaWNraXR5LCB1dGlscyApIHtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUGFnZURvdHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gUGFnZURvdHMoKSB7XG4gIC8vIGNyZWF0ZSBob2xkZXIgZWxlbWVudFxuICB0aGlzLmhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0aGlzLmhvbGRlci5jbGFzc05hbWUgPSAnZmxpY2tpdHktcGFnZS1kb3RzJztcbiAgLy8gY3JlYXRlIGRvdHMsIGFycmF5IG9mIGVsZW1lbnRzXG4gIHRoaXMuZG90cyA9IFtdO1xufVxuXG5QYWdlRG90cy5wcm90b3R5cGUuc2V0RG90cyA9IGZ1bmN0aW9uKCBzbGlkZXNMZW5ndGggKSB7XG4gIC8vIGdldCBkaWZmZXJlbmNlIGJldHdlZW4gbnVtYmVyIG9mIHNsaWRlcyBhbmQgbnVtYmVyIG9mIGRvdHNcbiAgbGV0IGRlbHRhID0gc2xpZGVzTGVuZ3RoIC0gdGhpcy5kb3RzLmxlbmd0aDtcbiAgaWYgKCBkZWx0YSA+IDAgKSB7XG4gICAgdGhpcy5hZGREb3RzKCBkZWx0YSApO1xuICB9IGVsc2UgaWYgKCBkZWx0YSA8IDAgKSB7XG4gICAgdGhpcy5yZW1vdmVEb3RzKCAtZGVsdGEgKTtcbiAgfVxufTtcblxuUGFnZURvdHMucHJvdG90eXBlLmFkZERvdHMgPSBmdW5jdGlvbiggY291bnQgKSB7XG4gIGxldCBuZXdEb3RzID0gbmV3IEFycmF5KCBjb3VudCApLmZpbGwoKVxuICAgIC5tYXAoICggaXRlbSwgaSApID0+IHtcbiAgICAgIGxldCBkb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGRvdC5zZXRBdHRyaWJ1dGUoICd0eXBlJywgJ2J1dHRvbicgKTtcbiAgICAgIGxldCBudW0gPSBpICsgMSArIHRoaXMuZG90cy5sZW5ndGg7XG4gICAgICBkb3QuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXBhZ2UtZG90JztcbiAgICAgIGRvdC50ZXh0Q29udGVudCA9IGBWaWV3IHNsaWRlICR7bnVtfWA7XG4gICAgICByZXR1cm4gZG90O1xuICAgIH0gKTtcblxuICB0aGlzLmhvbGRlci5hcHBlbmQoIC4uLm5ld0RvdHMgKTtcbiAgdGhpcy5kb3RzID0gdGhpcy5kb3RzLmNvbmNhdCggbmV3RG90cyApO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLnJlbW92ZURvdHMgPSBmdW5jdGlvbiggY291bnQgKSB7XG4gIC8vIHJlbW92ZSBmcm9tIHRoaXMuZG90cyBjb2xsZWN0aW9uXG4gIGxldCByZW1vdmVEb3RzID0gdGhpcy5kb3RzLnNwbGljZSggdGhpcy5kb3RzLmxlbmd0aCAtIGNvdW50LCBjb3VudCApO1xuICAvLyByZW1vdmUgZnJvbSBET01cbiAgcmVtb3ZlRG90cy5mb3JFYWNoKCAoIGRvdCApID0+IGRvdC5yZW1vdmUoKSApO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLnVwZGF0ZVNlbGVjdGVkID0gZnVuY3Rpb24oIGluZGV4ICkge1xuICAvLyByZW1vdmUgc2VsZWN0ZWQgY2xhc3Mgb24gcHJldmlvdXNcbiAgaWYgKCB0aGlzLnNlbGVjdGVkRG90ICkge1xuICAgIHRoaXMuc2VsZWN0ZWREb3QuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc2VsZWN0ZWQnKTtcbiAgICB0aGlzLnNlbGVjdGVkRG90LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50Jyk7XG4gIH1cbiAgLy8gZG9uJ3QgcHJvY2VlZCBpZiBubyBkb3RzXG4gIGlmICggIXRoaXMuZG90cy5sZW5ndGggKSByZXR1cm47XG5cbiAgdGhpcy5zZWxlY3RlZERvdCA9IHRoaXMuZG90c1sgaW5kZXggXTtcbiAgdGhpcy5zZWxlY3RlZERvdC5jbGFzc0xpc3QuYWRkKCdpcy1zZWxlY3RlZCcpO1xuICB0aGlzLnNlbGVjdGVkRG90LnNldEF0dHJpYnV0ZSggJ2FyaWEtY3VycmVudCcsICdzdGVwJyApO1xufTtcblxuRmxpY2tpdHkuUGFnZURvdHMgPSBQYWdlRG90cztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuT2JqZWN0LmFzc2lnbiggRmxpY2tpdHkuZGVmYXVsdHMsIHtcbiAgcGFnZURvdHM6IHRydWUsXG59ICk7XG5cbkZsaWNraXR5LmNyZWF0ZS5wYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm9wdGlvbnMucGFnZURvdHMgKSByZXR1cm47XG5cbiAgdGhpcy5wYWdlRG90cyA9IG5ldyBQYWdlRG90cygpO1xuICB0aGlzLmhhbmRsZVBhZ2VEb3RzQ2xpY2sgPSB0aGlzLm9uUGFnZURvdHNDbGljay5iaW5kKCB0aGlzICk7XG4gIC8vIGV2ZW50c1xuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmFjdGl2YXRlUGFnZURvdHMgKTtcbiAgdGhpcy5vbiggJ3NlbGVjdCcsIHRoaXMudXBkYXRlU2VsZWN0ZWRQYWdlRG90cyApO1xuICB0aGlzLm9uKCAnY2VsbENoYW5nZScsIHRoaXMudXBkYXRlUGFnZURvdHMgKTtcbiAgdGhpcy5vbiggJ3Jlc2l6ZScsIHRoaXMudXBkYXRlUGFnZURvdHMgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQYWdlRG90cyApO1xufTtcblxubGV0IHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG5wcm90by5hY3RpdmF0ZVBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGFnZURvdHMuc2V0RG90cyggdGhpcy5zbGlkZXMubGVuZ3RoICk7XG4gIHRoaXMuZm9jdXNhYmxlRWxlbXMucHVzaCggLi4udGhpcy5wYWdlRG90cy5kb3RzICk7XG4gIHRoaXMucGFnZURvdHMuaG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMuaGFuZGxlUGFnZURvdHNDbGljayApO1xuICB0aGlzLmVsZW1lbnQuYXBwZW5kKCB0aGlzLnBhZ2VEb3RzLmhvbGRlciApO1xufTtcblxucHJvdG8ub25QYWdlRG90c0NsaWNrID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBsZXQgaW5kZXggPSB0aGlzLnBhZ2VEb3RzLmRvdHMuaW5kZXhPZiggZXZlbnQudGFyZ2V0ICk7XG4gIGlmICggaW5kZXggPT09IC0xICkgcmV0dXJuOyAvLyBvbmx5IGRvdCBjbGlja3NcblxuICB0aGlzLnVpQ2hhbmdlKCk7XG4gIHRoaXMuc2VsZWN0KCBpbmRleCApO1xufTtcblxucHJvdG8udXBkYXRlU2VsZWN0ZWRQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBhZ2VEb3RzLnVwZGF0ZVNlbGVjdGVkKCB0aGlzLnNlbGVjdGVkSW5kZXggKTtcbn07XG5cbnByb3RvLnVwZGF0ZVBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGFnZURvdHMuZG90cy5mb3JFYWNoKCAoIGRvdCApID0+IHtcbiAgICB1dGlscy5yZW1vdmVGcm9tKCB0aGlzLmZvY3VzYWJsZUVsZW1zLCBkb3QgKTtcbiAgfSApO1xuICB0aGlzLnBhZ2VEb3RzLnNldERvdHMoIHRoaXMuc2xpZGVzLmxlbmd0aCApO1xuICB0aGlzLmZvY3VzYWJsZUVsZW1zLnB1c2goIC4uLnRoaXMucGFnZURvdHMuZG90cyApO1xufTtcblxucHJvdG8uZGVhY3RpdmF0ZVBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGFnZURvdHMuaG9sZGVyLnJlbW92ZSgpO1xuICB0aGlzLnBhZ2VEb3RzLmhvbGRlci5yZW1vdmVFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzLmhhbmRsZVBhZ2VEb3RzQ2xpY2sgKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5GbGlja2l0eS5QYWdlRG90cyA9IFBhZ2VEb3RzO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuIiwiLy8gcGxheWVyICYgYXV0b1BsYXlcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggcmVxdWlyZSgnLi9jb3JlJykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoIHdpbmRvdy5GbGlja2l0eSApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiBmYWN0b3J5KCBGbGlja2l0eSApIHtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUGxheWVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIFBsYXllciggYXV0b1BsYXksIG9uVGljayApIHtcbiAgdGhpcy5hdXRvUGxheSA9IGF1dG9QbGF5O1xuICB0aGlzLm9uVGljayA9IG9uVGljaztcbiAgdGhpcy5zdGF0ZSA9ICdzdG9wcGVkJztcbiAgLy8gdmlzaWJpbGl0eSBjaGFuZ2UgZXZlbnQgaGFuZGxlclxuICB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSA9IHRoaXMudmlzaWJpbGl0eUNoYW5nZS5iaW5kKCB0aGlzICk7XG4gIHRoaXMub25WaXNpYmlsaXR5UGxheSA9IHRoaXMudmlzaWJpbGl0eVBsYXkuYmluZCggdGhpcyApO1xufVxuXG4vLyBzdGFydCBwbGF5XG5QbGF5ZXIucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnN0YXRlID09PSAncGxheWluZycgKSByZXR1cm47XG5cbiAgLy8gZG8gbm90IHBsYXkgaWYgcGFnZSBpcyBoaWRkZW4sIHN0YXJ0IHBsYXlpbmcgd2hlbiBwYWdlIGlzIHZpc2libGVcbiAgbGV0IGlzUGFnZUhpZGRlbiA9IGRvY3VtZW50LmhpZGRlbjtcbiAgaWYgKCBpc1BhZ2VIaWRkZW4gKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eVBsYXkgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnN0YXRlID0gJ3BsYXlpbmcnO1xuICAvLyBsaXN0ZW4gdG8gdmlzaWJpbGl0eSBjaGFuZ2VcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSApO1xuICAvLyBzdGFydCB0aWNraW5nXG4gIHRoaXMudGljaygpO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vIGRvIG5vdCB0aWNrIGlmIG5vdCBwbGF5aW5nXG4gIGlmICggdGhpcy5zdGF0ZSAhPT0gJ3BsYXlpbmcnICkgcmV0dXJuO1xuXG4gIC8vIGRlZmF1bHQgdG8gMyBzZWNvbmRzXG4gIGxldCB0aW1lID0gdHlwZW9mIHRoaXMuYXV0b1BsYXkgPT0gJ251bWJlcicgPyB0aGlzLmF1dG9QbGF5IDogMzAwMDtcbiAgLy8gSEFDSzogcmVzZXQgdGlja3MgaWYgc3RvcHBlZCBhbmQgc3RhcnRlZCB3aXRoaW4gaW50ZXJ2YWxcbiAgdGhpcy5jbGVhcigpO1xuICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KCAoKSA9PiB7XG4gICAgdGhpcy5vblRpY2soKTtcbiAgICB0aGlzLnRpY2soKTtcbiAgfSwgdGltZSApO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc3RhdGUgPSAnc3RvcHBlZCc7XG4gIHRoaXMuY2xlYXIoKTtcbiAgLy8gcmVtb3ZlIHZpc2liaWxpdHkgY2hhbmdlIGV2ZW50XG4gIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICd2aXNpYmlsaXR5Y2hhbmdlJywgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UgKTtcbn07XG5cblBsYXllci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgY2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVvdXQgKTtcbn07XG5cblBsYXllci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnN0YXRlID09PSAncGxheWluZycgKSB7XG4gICAgdGhpcy5zdGF0ZSA9ICdwYXVzZWQnO1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgfVxufTtcblxuUGxheWVyLnByb3RvdHlwZS51bnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlLXN0YXJ0IHBsYXkgaWYgcGF1c2VkXG4gIGlmICggdGhpcy5zdGF0ZSA9PT0gJ3BhdXNlZCcgKSB0aGlzLnBsYXkoKTtcbn07XG5cbi8vIHBhdXNlIGlmIHBhZ2UgdmlzaWJpbGl0eSBpcyBoaWRkZW4sIHVucGF1c2UgaWYgdmlzaWJsZVxuUGxheWVyLnByb3RvdHlwZS52aXNpYmlsaXR5Q2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gIGxldCBpc1BhZ2VIaWRkZW4gPSBkb2N1bWVudC5oaWRkZW47XG4gIHRoaXNbIGlzUGFnZUhpZGRlbiA/ICdwYXVzZScgOiAndW5wYXVzZScgXSgpO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS52aXNpYmlsaXR5UGxheSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXkoKTtcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eVBsYXkgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZsaWNraXR5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbk9iamVjdC5hc3NpZ24oIEZsaWNraXR5LmRlZmF1bHRzLCB7XG4gIHBhdXNlQXV0b1BsYXlPbkhvdmVyOiB0cnVlLFxufSApO1xuXG5GbGlja2l0eS5jcmVhdGUucGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyID0gbmV3IFBsYXllciggdGhpcy5vcHRpb25zLmF1dG9QbGF5LCAoKSA9PiB7XG4gICAgdGhpcy5uZXh0KCB0cnVlICk7XG4gIH0gKTtcblxuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmFjdGl2YXRlUGxheWVyICk7XG4gIHRoaXMub24oICd1aUNoYW5nZScsIHRoaXMuc3RvcFBsYXllciApO1xuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCB0aGlzLnN0b3BQbGF5ZXIgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQbGF5ZXIgKTtcbn07XG5cbmxldCBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8uYWN0aXZhdGVQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmF1dG9QbGF5ICkgcmV0dXJuO1xuXG4gIHRoaXMucGxheWVyLnBsYXkoKTtcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZWVudGVyJywgdGhpcyApO1xufTtcblxuLy8gUGxheWVyIEFQSSwgZG9uJ3QgaGF0ZSB0aGUgLi4uIHRoYW5rcyBJIGtub3cgd2hlcmUgdGhlIGRvb3IgaXNcblxucHJvdG8ucGxheVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci5wbGF5KCk7XG59O1xuXG5wcm90by5zdG9wUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnN0b3AoKTtcbn07XG5cbnByb3RvLnBhdXNlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnBhdXNlKCk7XG59O1xuXG5wcm90by51bnBhdXNlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnVucGF1c2UoKTtcbn07XG5cbnByb3RvLmRlYWN0aXZhdGVQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIuc3RvcCgpO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlZW50ZXInLCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLSBtb3VzZWVudGVyL2xlYXZlIC0tLS0tIC8vXG5cbi8vIHBhdXNlIGF1dG8tcGxheSBvbiBob3ZlclxucHJvdG8ub25tb3VzZWVudGVyID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5wYXVzZUF1dG9QbGF5T25Ib3ZlciApIHJldHVybjtcblxuICB0aGlzLnBsYXllci5wYXVzZSgpO1xuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbGVhdmUnLCB0aGlzICk7XG59O1xuXG4vLyByZXN1bWUgYXV0by1wbGF5IG9uIGhvdmVyIG9mZlxucHJvdG8ub25tb3VzZWxlYXZlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnVucGF1c2UoKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZWxlYXZlJywgdGhpcyApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbkZsaWNraXR5LlBsYXllciA9IFBsYXllcjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcbiIsIi8vIHByZXYvbmV4dCBidXR0b25zXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIHJlcXVpcmUoJy4vY29yZScpICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KCB3aW5kb3cuRmxpY2tpdHkgKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSggRmxpY2tpdHkgKSB7XG5cbmNvbnN0IHN2Z1VSSSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFByZXZOZXh0QnV0dG9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIFByZXZOZXh0QnV0dG9uKCBpbmNyZW1lbnQsIGRpcmVjdGlvbiwgYXJyb3dTaGFwZSApIHtcbiAgdGhpcy5pbmNyZW1lbnQgPSBpbmNyZW1lbnQ7XG4gIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICB0aGlzLmlzUHJldmlvdXMgPSBpbmNyZW1lbnQgPT09ICdwcmV2aW91cyc7XG4gIHRoaXMuaXNMZWZ0ID0gZGlyZWN0aW9uID09PSAnbGVmdCc7XG4gIHRoaXMuX2NyZWF0ZSggYXJyb3dTaGFwZSApO1xufVxuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuX2NyZWF0ZSA9IGZ1bmN0aW9uKCBhcnJvd1NoYXBlICkge1xuICAvLyBwcm9wZXJ0aWVzXG4gIGxldCBlbGVtZW50ID0gdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGVsZW1lbnQuY2xhc3NOYW1lID0gYGZsaWNraXR5LWJ1dHRvbiBmbGlja2l0eS1wcmV2LW5leHQtYnV0dG9uICR7dGhpcy5pbmNyZW1lbnR9YDtcbiAgbGV0IGxhYmVsID0gdGhpcy5pc1ByZXZpb3VzID8gJ1ByZXZpb3VzJyA6ICdOZXh0JztcbiAgLy8gcHJldmVudCBidXR0b24gZnJvbSBzdWJtaXR0aW5nIGZvcm0gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwODM2MDc2LzE4MjE4M1xuICBlbGVtZW50LnNldEF0dHJpYnV0ZSggJ3R5cGUnLCAnYnV0dG9uJyApO1xuICBlbGVtZW50LnNldEF0dHJpYnV0ZSggJ2FyaWEtbGFiZWwnLCBsYWJlbCApO1xuICAvLyBpbml0IGFzIGRpc2FibGVkXG4gIHRoaXMuZGlzYWJsZSgpO1xuICAvLyBjcmVhdGUgYXJyb3dcbiAgbGV0IHN2ZyA9IHRoaXMuY3JlYXRlU1ZHKCBsYWJlbCwgYXJyb3dTaGFwZSApO1xuICBlbGVtZW50LmFwcGVuZCggc3ZnICk7XG59O1xuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuY3JlYXRlU1ZHID0gZnVuY3Rpb24oIGxhYmVsLCBhcnJvd1NoYXBlICkge1xuICBsZXQgc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCBzdmdVUkksICdzdmcnICk7XG4gIHN2Zy5zZXRBdHRyaWJ1dGUoICdjbGFzcycsICdmbGlja2l0eS1idXR0b24taWNvbicgKTtcbiAgc3ZnLnNldEF0dHJpYnV0ZSggJ3ZpZXdCb3gnLCAnMCAwIDEwMCAxMDAnICk7XG4gIC8vIGFkZCB0aXRsZSAjMTE4OVxuICBsZXQgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z1VSSSwgJ3RpdGxlJyApO1xuICB0aXRsZS5hcHBlbmQoIGxhYmVsICk7XG4gIC8vIGFkZCBwYXRoXG4gIGxldCBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCBzdmdVUkksICdwYXRoJyApO1xuICBsZXQgcGF0aE1vdmVtZW50cyA9IGdldEFycm93TW92ZW1lbnRzKCBhcnJvd1NoYXBlICk7XG4gIHBhdGguc2V0QXR0cmlidXRlKCAnZCcsIHBhdGhNb3ZlbWVudHMgKTtcbiAgcGF0aC5zZXRBdHRyaWJ1dGUoICdjbGFzcycsICdhcnJvdycgKTtcbiAgLy8gcm90YXRlIGFycm93XG4gIGlmICggIXRoaXMuaXNMZWZ0ICkge1xuICAgIHBhdGguc2V0QXR0cmlidXRlKCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgxMDAsIDEwMCkgcm90YXRlKDE4MCknICk7XG4gIH1cbiAgc3ZnLmFwcGVuZCggdGl0bGUsIHBhdGggKTtcbiAgcmV0dXJuIHN2Zztcbn07XG5cbi8vIGdldCBTVkcgcGF0aCBtb3ZtZW1lbnRcbmZ1bmN0aW9uIGdldEFycm93TW92ZW1lbnRzKCBzaGFwZSApIHtcbiAgLy8gdXNlIHNoYXBlIGFzIG1vdmVtZW50IGlmIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBzaGFwZSA9PSAnc3RyaW5nJyApIHJldHVybiBzaGFwZTtcblxuICBsZXQgeyB4MCwgeDEsIHgyLCB4MywgeTEsIHkyIH0gPSBzaGFwZTtcblxuICAvLyBjcmVhdGUgbW92ZW1lbnQgc3RyaW5nXG4gIHJldHVybiBgTSAke3gwfSwgNTBcbiAgICBMICR7eDF9LCAke3kxICsgNTB9XG4gICAgTCAke3gyfSwgJHt5MiArIDUwfVxuICAgIEwgJHt4M30sIDUwXG4gICAgTCAke3gyfSwgJHs1MCAtIHkyfVxuICAgIEwgJHt4MX0sICR7NTAgLSB5MX1cbiAgICBaYDtcbn1cblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdkaXNhYmxlZCcsIHRydWUgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZsaWNraXR5IHByb3RvdHlwZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5PYmplY3QuYXNzaWduKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBwcmV2TmV4dEJ1dHRvbnM6IHRydWUsXG4gIGFycm93U2hhcGU6IHtcbiAgICB4MDogMTAsXG4gICAgeDE6IDYwLCB5MTogNTAsXG4gICAgeDI6IDcwLCB5MjogNDAsXG4gICAgeDM6IDMwLFxuICB9LFxufSApO1xuXG5GbGlja2l0eS5jcmVhdGUucHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5wcmV2TmV4dEJ1dHRvbnMgKSByZXR1cm47XG5cbiAgbGV0IHsgcmlnaHRUb0xlZnQsIGFycm93U2hhcGUgfSA9IHRoaXMub3B0aW9ucztcbiAgbGV0IHByZXZEaXJlY3Rpb24gPSByaWdodFRvTGVmdCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gIGxldCBuZXh0RGlyZWN0aW9uID0gcmlnaHRUb0xlZnQgPyAnbGVmdCcgOiAncmlnaHQnO1xuICB0aGlzLnByZXZCdXR0b24gPSBuZXcgUHJldk5leHRCdXR0b24oICdwcmV2aW91cycsIHByZXZEaXJlY3Rpb24sIGFycm93U2hhcGUgKTtcbiAgdGhpcy5uZXh0QnV0dG9uID0gbmV3IFByZXZOZXh0QnV0dG9uKCAnbmV4dCcsIG5leHREaXJlY3Rpb24sIGFycm93U2hhcGUgKTtcbiAgdGhpcy5mb2N1c2FibGVFbGVtcy5wdXNoKCB0aGlzLnByZXZCdXR0b24uZWxlbWVudCApO1xuICB0aGlzLmZvY3VzYWJsZUVsZW1zLnB1c2goIHRoaXMubmV4dEJ1dHRvbi5lbGVtZW50ICk7XG5cbiAgdGhpcy5oYW5kbGVQcmV2QnV0dG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgdGhpcy51aUNoYW5nZSgpO1xuICAgIHRoaXMucHJldmlvdXMoKTtcbiAgfTtcblxuICB0aGlzLmhhbmRsZU5leHRCdXR0b25DbGljayA9ICgpID0+IHtcbiAgICB0aGlzLnVpQ2hhbmdlKCk7XG4gICAgdGhpcy5uZXh0KCk7XG4gIH07XG5cbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyApO1xuICB0aGlzLm9uKCAnc2VsZWN0JywgdGhpcy51cGRhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcbn07XG5cbmxldCBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8udXBkYXRlUHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gIGxldCBsYXN0SW5kZXggPSB0aGlzLnNsaWRlcy5sZW5ndGggPyB0aGlzLnNsaWRlcy5sZW5ndGggLSAxIDogMDtcbiAgdGhpcy51cGRhdGVQcmV2TmV4dEJ1dHRvbiggdGhpcy5wcmV2QnV0dG9uLCAwICk7XG4gIHRoaXMudXBkYXRlUHJldk5leHRCdXR0b24oIHRoaXMubmV4dEJ1dHRvbiwgbGFzdEluZGV4ICk7XG59O1xuXG5wcm90by51cGRhdGVQcmV2TmV4dEJ1dHRvbiA9IGZ1bmN0aW9uKCBidXR0b24sIGRpc2FibGVkSW5kZXggKSB7XG4gIC8vIGVuYWJsZSBpcyB3cmFwQXJvdW5kIGFuZCBhdCBsZWFzdCAyIHNsaWRlc1xuICBpZiAoIHRoaXMuaXNXcmFwcGluZyAmJiB0aGlzLnNsaWRlcy5sZW5ndGggPiAxICkge1xuICAgIGJ1dHRvbi5lbmFibGUoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaXNFbmFibGVkID0gdGhpcy5zZWxlY3RlZEluZGV4ICE9PSBkaXNhYmxlZEluZGV4O1xuICBidXR0b25bIGlzRW5hYmxlZCA/ICdlbmFibGUnIDogJ2Rpc2FibGUnIF0oKTtcbiAgLy8gaWYgZGlzYWJsaW5nIGJ1dHRvbiB0aGF0IGlzIGZvY3VzZWQsXG4gIC8vIHNoaWZ0IGZvY3VzIHRvIGVsZW1lbnQgdG8gbWFpbnRhaW4ga2V5Ym9hcmQgYWNjZXNzaWJpbGl0eVxuICBsZXQgaXNEaXNhYmxlZEZvY3VzZWQgPSAhaXNFbmFibGVkICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGJ1dHRvbi5lbGVtZW50O1xuICBpZiAoIGlzRGlzYWJsZWRGb2N1c2VkICkgdGhpcy5mb2N1cygpO1xufTtcblxucHJvdG8uYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcmV2QnV0dG9uLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVQcmV2QnV0dG9uQ2xpY2sgKTtcbiAgdGhpcy5uZXh0QnV0dG9uLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVOZXh0QnV0dG9uQ2xpY2sgKTtcbiAgdGhpcy5lbGVtZW50LmFwcGVuZCggdGhpcy5wcmV2QnV0dG9uLmVsZW1lbnQsIHRoaXMubmV4dEJ1dHRvbi5lbGVtZW50ICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zICk7XG59O1xuXG5wcm90by5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucHJldkJ1dHRvbi5lbGVtZW50LnJlbW92ZSgpO1xuICB0aGlzLm5leHRCdXR0b24uZWxlbWVudC5yZW1vdmUoKTtcbiAgdGhpcy5wcmV2QnV0dG9uLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVQcmV2QnV0dG9uQ2xpY2sgKTtcbiAgdGhpcy5uZXh0QnV0dG9uLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVOZXh0QnV0dG9uQ2xpY2sgKTtcbiAgdGhpcy5vZmYoICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuRmxpY2tpdHkuUHJldk5leHRCdXR0b24gPSBQcmV2TmV4dEJ1dHRvbjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcbiIsIi8qIVxuICogSW5maW5pdGUgU2Nyb2xsIHYyLjAuNFxuICogbWVhc3VyZSBzaXplIG9mIGVsZW1lbnRzXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuZ2V0U2l6ZSA9IGZhY3RvcnkoKTtcbiAgfVxuXG59ICkoIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBnZXQgYSBudW1iZXIgZnJvbSBhIHN0cmluZywgbm90IGEgcGVyY2VudGFnZVxuZnVuY3Rpb24gZ2V0U3R5bGVTaXplKCB2YWx1ZSApIHtcbiAgbGV0IG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG4gIC8vIG5vdCBhIHBlcmNlbnQgbGlrZSAnMTAwJScsIGFuZCBhIG51bWJlclxuICBsZXQgaXNWYWxpZCA9IHZhbHVlLmluZGV4T2YoJyUnKSA9PSAtMSAmJiAhaXNOYU4oIG51bSApO1xuICByZXR1cm4gaXNWYWxpZCAmJiBudW07XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1lYXN1cmVtZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5sZXQgbWVhc3VyZW1lbnRzID0gW1xuICAncGFkZGluZ0xlZnQnLFxuICAncGFkZGluZ1JpZ2h0JyxcbiAgJ3BhZGRpbmdUb3AnLFxuICAncGFkZGluZ0JvdHRvbScsXG4gICdtYXJnaW5MZWZ0JyxcbiAgJ21hcmdpblJpZ2h0JyxcbiAgJ21hcmdpblRvcCcsXG4gICdtYXJnaW5Cb3R0b20nLFxuICAnYm9yZGVyTGVmdFdpZHRoJyxcbiAgJ2JvcmRlclJpZ2h0V2lkdGgnLFxuICAnYm9yZGVyVG9wV2lkdGgnLFxuICAnYm9yZGVyQm90dG9tV2lkdGgnLFxuXTtcblxubGV0IG1lYXN1cmVtZW50c0xlbmd0aCA9IG1lYXN1cmVtZW50cy5sZW5ndGg7XG5cbmZ1bmN0aW9uIGdldFplcm9TaXplKCkge1xuICBsZXQgc2l6ZSA9IHtcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgaW5uZXJXaWR0aDogMCxcbiAgICBpbm5lckhlaWdodDogMCxcbiAgICBvdXRlcldpZHRoOiAwLFxuICAgIG91dGVySGVpZ2h0OiAwLFxuICB9O1xuICBtZWFzdXJlbWVudHMuZm9yRWFjaCggKCBtZWFzdXJlbWVudCApID0+IHtcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gMDtcbiAgfSApO1xuICByZXR1cm4gc2l6ZTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0U2l6ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBnZXRTaXplKCBlbGVtICkge1xuICAvLyB1c2UgcXVlcnlTZWxldG9yIGlmIGVsZW0gaXMgc3RyaW5nXG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSBlbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggZWxlbSApO1xuXG4gIC8vIGRvIG5vdCBwcm9jZWVkIG9uIG5vbi1vYmplY3RzXG4gIGxldCBpc0VsZW1lbnQgPSBlbGVtICYmIHR5cGVvZiBlbGVtID09ICdvYmplY3QnICYmIGVsZW0ubm9kZVR5cGU7XG4gIGlmICggIWlzRWxlbWVudCApIHJldHVybjtcblxuICBsZXQgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cbiAgLy8gaWYgaGlkZGVuLCBldmVyeXRoaW5nIGlzIDBcbiAgaWYgKCBzdHlsZS5kaXNwbGF5ID09ICdub25lJyApIHJldHVybiBnZXRaZXJvU2l6ZSgpO1xuXG4gIGxldCBzaXplID0ge307XG4gIHNpemUud2lkdGggPSBlbGVtLm9mZnNldFdpZHRoO1xuICBzaXplLmhlaWdodCA9IGVsZW0ub2Zmc2V0SGVpZ2h0O1xuXG4gIGxldCBpc0JvcmRlckJveCA9IHNpemUuaXNCb3JkZXJCb3ggPSBzdHlsZS5ib3hTaXppbmcgPT0gJ2JvcmRlci1ib3gnO1xuXG4gIC8vIGdldCBhbGwgbWVhc3VyZW1lbnRzXG4gIG1lYXN1cmVtZW50cy5mb3JFYWNoKCAoIG1lYXN1cmVtZW50ICkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IHN0eWxlWyBtZWFzdXJlbWVudCBdO1xuICAgIGxldCBudW0gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuICAgIC8vIGFueSAnYXV0bycsICdtZWRpdW0nIHZhbHVlIHdpbGwgYmUgMFxuICAgIHNpemVbIG1lYXN1cmVtZW50IF0gPSAhaXNOYU4oIG51bSApID8gbnVtIDogMDtcbiAgfSApO1xuXG4gIGxldCBwYWRkaW5nV2lkdGggPSBzaXplLnBhZGRpbmdMZWZ0ICsgc2l6ZS5wYWRkaW5nUmlnaHQ7XG4gIGxldCBwYWRkaW5nSGVpZ2h0ID0gc2l6ZS5wYWRkaW5nVG9wICsgc2l6ZS5wYWRkaW5nQm90dG9tO1xuICBsZXQgbWFyZ2luV2lkdGggPSBzaXplLm1hcmdpbkxlZnQgKyBzaXplLm1hcmdpblJpZ2h0O1xuICBsZXQgbWFyZ2luSGVpZ2h0ID0gc2l6ZS5tYXJnaW5Ub3AgKyBzaXplLm1hcmdpbkJvdHRvbTtcbiAgbGV0IGJvcmRlcldpZHRoID0gc2l6ZS5ib3JkZXJMZWZ0V2lkdGggKyBzaXplLmJvcmRlclJpZ2h0V2lkdGg7XG4gIGxldCBib3JkZXJIZWlnaHQgPSBzaXplLmJvcmRlclRvcFdpZHRoICsgc2l6ZS5ib3JkZXJCb3R0b21XaWR0aDtcblxuICAvLyBvdmVyd3JpdGUgd2lkdGggYW5kIGhlaWdodCBpZiB3ZSBjYW4gZ2V0IGl0IGZyb20gc3R5bGVcbiAgbGV0IHN0eWxlV2lkdGggPSBnZXRTdHlsZVNpemUoIHN0eWxlLndpZHRoICk7XG4gIGlmICggc3R5bGVXaWR0aCAhPT0gZmFsc2UgKSB7XG4gICAgc2l6ZS53aWR0aCA9IHN0eWxlV2lkdGggK1xuICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxuICAgICAgKCBpc0JvcmRlckJveCA/IDAgOiBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xuICB9XG5cbiAgbGV0IHN0eWxlSGVpZ2h0ID0gZ2V0U3R5bGVTaXplKCBzdHlsZS5oZWlnaHQgKTtcbiAgaWYgKCBzdHlsZUhlaWdodCAhPT0gZmFsc2UgKSB7XG4gICAgc2l6ZS5oZWlnaHQgPSBzdHlsZUhlaWdodCArXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XG4gICAgICAoIGlzQm9yZGVyQm94ID8gMCA6IHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcbiAgfVxuXG4gIHNpemUuaW5uZXJXaWR0aCA9IHNpemUud2lkdGggLSAoIHBhZGRpbmdXaWR0aCArIGJvcmRlcldpZHRoICk7XG4gIHNpemUuaW5uZXJIZWlnaHQgPSBzaXplLmhlaWdodCAtICggcGFkZGluZ0hlaWdodCArIGJvcmRlckhlaWdodCApO1xuXG4gIHNpemUub3V0ZXJXaWR0aCA9IHNpemUud2lkdGggKyBtYXJnaW5XaWR0aDtcbiAgc2l6ZS5vdXRlckhlaWdodCA9IHNpemUuaGVpZ2h0ICsgbWFyZ2luSGVpZ2h0O1xuXG4gIHJldHVybiBzaXplO1xufVxuXG5yZXR1cm4gZ2V0U2l6ZTtcblxufSApO1xuIiwiLy8gc2xpZGVcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LkZsaWNraXR5ID0gd2luZG93LkZsaWNraXR5IHx8IHt9O1xuICAgIHdpbmRvdy5GbGlja2l0eS5TbGlkZSA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcblxuZnVuY3Rpb24gU2xpZGUoIGJlZ2luTWFyZ2luLCBlbmRNYXJnaW4sIGNlbGxBbGlnbiApIHtcbiAgdGhpcy5iZWdpbk1hcmdpbiA9IGJlZ2luTWFyZ2luO1xuICB0aGlzLmVuZE1hcmdpbiA9IGVuZE1hcmdpbjtcbiAgdGhpcy5jZWxsQWxpZ24gPSBjZWxsQWxpZ247XG4gIHRoaXMuY2VsbHMgPSBbXTtcbiAgdGhpcy5vdXRlcldpZHRoID0gMDtcbiAgdGhpcy5oZWlnaHQgPSAwO1xufVxuXG5sZXQgcHJvdG8gPSBTbGlkZS5wcm90b3R5cGU7XG5cbnByb3RvLmFkZENlbGwgPSBmdW5jdGlvbiggY2VsbCApIHtcbiAgdGhpcy5jZWxscy5wdXNoKCBjZWxsICk7XG4gIHRoaXMub3V0ZXJXaWR0aCArPSBjZWxsLnNpemUub3V0ZXJXaWR0aDtcbiAgdGhpcy5oZWlnaHQgPSBNYXRoLm1heCggY2VsbC5zaXplLm91dGVySGVpZ2h0LCB0aGlzLmhlaWdodCApO1xuICAvLyBmaXJzdCBjZWxsIHN0dWZmXG4gIGlmICggdGhpcy5jZWxscy5sZW5ndGggPT09IDEgKSB7XG4gICAgdGhpcy54ID0gY2VsbC54OyAvLyB4IGNvbWVzIGZyb20gZmlyc3QgY2VsbFxuICAgIHRoaXMuZmlyc3RNYXJnaW4gPSBjZWxsLnNpemVbIHRoaXMuYmVnaW5NYXJnaW4gXTtcbiAgfVxufTtcblxucHJvdG8udXBkYXRlVGFyZ2V0ID0gZnVuY3Rpb24oKSB7XG4gIGxldCBsYXN0Q2VsbCA9IHRoaXMuZ2V0TGFzdENlbGwoKTtcbiAgbGV0IGxhc3RNYXJnaW4gPSBsYXN0Q2VsbCA/IGxhc3RDZWxsLnNpemVbIHRoaXMuZW5kTWFyZ2luIF0gOiAwO1xuICBsZXQgc2xpZGVXaWR0aCA9IHRoaXMub3V0ZXJXaWR0aCAtICggdGhpcy5maXJzdE1hcmdpbiArIGxhc3RNYXJnaW4gKTtcbiAgdGhpcy50YXJnZXQgPSB0aGlzLnggKyB0aGlzLmZpcnN0TWFyZ2luICsgc2xpZGVXaWR0aCAqIHRoaXMuY2VsbEFsaWduO1xufTtcblxucHJvdG8uZ2V0TGFzdENlbGwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2VsbHNbIHRoaXMuY2VsbHMubGVuZ3RoIC0gMSBdO1xufTtcblxucHJvdG8uc2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY2VsbHMuZm9yRWFjaCggKCBjZWxsICkgPT4gY2VsbC5zZWxlY3QoKSApO1xufTtcblxucHJvdG8udW5zZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jZWxscy5mb3JFYWNoKCAoIGNlbGwgKSA9PiBjZWxsLnVuc2VsZWN0KCkgKTtcbn07XG5cbnByb3RvLmdldENlbGxFbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jZWxscy5tYXAoICggY2VsbCApID0+IGNlbGwuZWxlbWVudCApO1xufTtcblxucmV0dXJuIFNsaWRlO1xuXG59ICkgKTtcbiIsIi8qIVxuICogaW1hZ2VzTG9hZGVkIHY1LjAuMFxuICogSmF2YVNjcmlwdCBpcyBhbGwgbGlrZSBcIllvdSBpbWFnZXMgYXJlIGRvbmUgeWV0IG9yIHdoYXQ/XCJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCB3aW5kb3csIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKSApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmltYWdlc0xvYWRlZCA9IGZhY3RvcnkoIHdpbmRvdywgd2luZG93LkV2RW1pdHRlciApO1xuICB9XG5cbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLFxuICAgIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyICkge1xuXG5sZXQgJCA9IHdpbmRvdy5qUXVlcnk7XG5sZXQgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBoZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XG5mdW5jdGlvbiBtYWtlQXJyYXkoIG9iaiApIHtcbiAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XG4gIGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSByZXR1cm4gb2JqO1xuXG4gIGxldCBpc0FycmF5TGlrZSA9IHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcic7XG4gIC8vIGNvbnZlcnQgbm9kZUxpc3QgdG8gYXJyYXlcbiAgaWYgKCBpc0FycmF5TGlrZSApIHJldHVybiBbIC4uLm9iaiBdO1xuXG4gIC8vIGFycmF5IG9mIHNpbmdsZSBpbmRleFxuICByZXR1cm4gWyBvYmogXTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaW1hZ2VzTG9hZGVkIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogQHBhcmFtIHtbQXJyYXksIEVsZW1lbnQsIE5vZGVMaXN0LCBTdHJpbmddfSBlbGVtXG4gKiBAcGFyYW0ge1tPYmplY3QsIEZ1bmN0aW9uXX0gb3B0aW9ucyAtIGlmIGZ1bmN0aW9uLCB1c2UgYXMgY2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uQWx3YXlzIC0gY2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtJbWFnZXNMb2FkZWR9XG4gKi9cbmZ1bmN0aW9uIEltYWdlc0xvYWRlZCggZWxlbSwgb3B0aW9ucywgb25BbHdheXMgKSB7XG4gIC8vIGNvZXJjZSBJbWFnZXNMb2FkZWQoKSB3aXRob3V0IG5ldywgdG8gYmUgbmV3IEltYWdlc0xvYWRlZCgpXG4gIGlmICggISggdGhpcyBpbnN0YW5jZW9mIEltYWdlc0xvYWRlZCApICkge1xuICAgIHJldHVybiBuZXcgSW1hZ2VzTG9hZGVkKCBlbGVtLCBvcHRpb25zLCBvbkFsd2F5cyApO1xuICB9XG4gIC8vIHVzZSBlbGVtIGFzIHNlbGVjdG9yIHN0cmluZ1xuICBsZXQgcXVlcnlFbGVtID0gZWxlbTtcbiAgaWYgKCB0eXBlb2YgZWxlbSA9PSAnc3RyaW5nJyApIHtcbiAgICBxdWVyeUVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCBlbGVtICk7XG4gIH1cbiAgLy8gYmFpbCBpZiBiYWQgZWxlbWVudFxuICBpZiAoICFxdWVyeUVsZW0gKSB7XG4gICAgY29uc29sZS5lcnJvcihgQmFkIGVsZW1lbnQgZm9yIGltYWdlc0xvYWRlZCAke3F1ZXJ5RWxlbSB8fCBlbGVtfWApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuZWxlbWVudHMgPSBtYWtlQXJyYXkoIHF1ZXJ5RWxlbSApO1xuICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgLy8gc2hpZnQgYXJndW1lbnRzIGlmIG5vIG9wdGlvbnMgc2V0XG4gIGlmICggdHlwZW9mIG9wdGlvbnMgPT0gJ2Z1bmN0aW9uJyApIHtcbiAgICBvbkFsd2F5cyA9IG9wdGlvbnM7XG4gIH0gZWxzZSB7XG4gICAgT2JqZWN0LmFzc2lnbiggdGhpcy5vcHRpb25zLCBvcHRpb25zICk7XG4gIH1cblxuICBpZiAoIG9uQWx3YXlzICkgdGhpcy5vbiggJ2Fsd2F5cycsIG9uQWx3YXlzICk7XG5cbiAgdGhpcy5nZXRJbWFnZXMoKTtcbiAgLy8gYWRkIGpRdWVyeSBEZWZlcnJlZCBvYmplY3RcbiAgaWYgKCAkICkgdGhpcy5qcURlZmVycmVkID0gbmV3ICQuRGVmZXJyZWQoKTtcblxuICAvLyBIQUNLIGNoZWNrIGFzeW5jIHRvIGFsbG93IHRpbWUgdG8gYmluZCBsaXN0ZW5lcnNcbiAgc2V0VGltZW91dCggdGhpcy5jaGVjay5iaW5kKCB0aGlzICkgKTtcbn1cblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5nZXRJbWFnZXMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWFnZXMgPSBbXTtcblxuICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYW4gaXRlbSBzZWxlY3RvclxuICB0aGlzLmVsZW1lbnRzLmZvckVhY2goIHRoaXMuYWRkRWxlbWVudEltYWdlcywgdGhpcyApO1xufTtcblxuY29uc3QgZWxlbWVudE5vZGVUeXBlcyA9IFsgMSwgOSwgMTEgXTtcblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IGVsZW1cbiAqL1xuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRFbGVtZW50SW1hZ2VzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIC8vIGZpbHRlciBzaWJsaW5nc1xuICBpZiAoIGVsZW0ubm9kZU5hbWUgPT09ICdJTUcnICkge1xuICAgIHRoaXMuYWRkSW1hZ2UoIGVsZW0gKTtcbiAgfVxuICAvLyBnZXQgYmFja2dyb3VuZCBpbWFnZSBvbiBlbGVtZW50XG4gIGlmICggdGhpcy5vcHRpb25zLmJhY2tncm91bmQgPT09IHRydWUgKSB7XG4gICAgdGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyggZWxlbSApO1xuICB9XG5cbiAgLy8gZmluZCBjaGlsZHJlblxuICAvLyBubyBub24tZWxlbWVudCBub2RlcywgIzE0M1xuICBsZXQgeyBub2RlVHlwZSB9ID0gZWxlbTtcbiAgaWYgKCAhbm9kZVR5cGUgfHwgIWVsZW1lbnROb2RlVHlwZXMuaW5jbHVkZXMoIG5vZGVUeXBlICkgKSByZXR1cm47XG5cbiAgbGV0IGNoaWxkSW1ncyA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCgnaW1nJyk7XG4gIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XG4gIGZvciAoIGxldCBpbWcgb2YgY2hpbGRJbWdzICkge1xuICAgIHRoaXMuYWRkSW1hZ2UoIGltZyApO1xuICB9XG5cbiAgLy8gZ2V0IGNoaWxkIGJhY2tncm91bmQgaW1hZ2VzXG4gIGlmICggdHlwZW9mIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kID09ICdzdHJpbmcnICkge1xuICAgIGxldCBjaGlsZHJlbiA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCggdGhpcy5vcHRpb25zLmJhY2tncm91bmQgKTtcbiAgICBmb3IgKCBsZXQgY2hpbGQgb2YgY2hpbGRyZW4gKSB7XG4gICAgICB0aGlzLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzKCBjaGlsZCApO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgcmVVUkwgPSAvdXJsXFwoKFsnXCJdKT8oLio/KVxcMVxcKS9naTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICBsZXQgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG4gIC8vIEZpcmVmb3ggcmV0dXJucyBudWxsIGlmIGluIGEgaGlkZGVuIGlmcmFtZSBodHRwczovL2J1Z3ppbC5sYS81NDgzOTdcbiAgaWYgKCAhc3R5bGUgKSByZXR1cm47XG5cbiAgLy8gZ2V0IHVybCBpbnNpZGUgdXJsKFwiLi4uXCIpXG4gIGxldCBtYXRjaGVzID0gcmVVUkwuZXhlYyggc3R5bGUuYmFja2dyb3VuZEltYWdlICk7XG4gIHdoaWxlICggbWF0Y2hlcyAhPT0gbnVsbCApIHtcbiAgICBsZXQgdXJsID0gbWF0Y2hlcyAmJiBtYXRjaGVzWzJdO1xuICAgIGlmICggdXJsICkge1xuICAgICAgdGhpcy5hZGRCYWNrZ3JvdW5kKCB1cmwsIGVsZW0gKTtcbiAgICB9XG4gICAgbWF0Y2hlcyA9IHJlVVJMLmV4ZWMoIHN0eWxlLmJhY2tncm91bmRJbWFnZSApO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7SW1hZ2V9IGltZ1xuICovXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEltYWdlID0gZnVuY3Rpb24oIGltZyApIHtcbiAgbGV0IGxvYWRpbmdJbWFnZSA9IG5ldyBMb2FkaW5nSW1hZ2UoIGltZyApO1xuICB0aGlzLmltYWdlcy5wdXNoKCBsb2FkaW5nSW1hZ2UgKTtcbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkQmFja2dyb3VuZCA9IGZ1bmN0aW9uKCB1cmwsIGVsZW0gKSB7XG4gIGxldCBiYWNrZ3JvdW5kID0gbmV3IEJhY2tncm91bmQoIHVybCwgZWxlbSApO1xuICB0aGlzLmltYWdlcy5wdXNoKCBiYWNrZ3JvdW5kICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucHJvZ3Jlc3NlZENvdW50ID0gMDtcbiAgdGhpcy5oYXNBbnlCcm9rZW4gPSBmYWxzZTtcbiAgLy8gY29tcGxldGUgaWYgbm8gaW1hZ2VzXG4gIGlmICggIXRoaXMuaW1hZ2VzLmxlbmd0aCApIHtcbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtc3R5bGUgKi9cbiAgbGV0IG9uUHJvZ3Jlc3MgPSAoIGltYWdlLCBlbGVtLCBtZXNzYWdlICkgPT4ge1xuICAgIC8vIEhBQ0sgLSBDaHJvbWUgdHJpZ2dlcnMgZXZlbnQgYmVmb3JlIG9iamVjdCBwcm9wZXJ0aWVzIGhhdmUgY2hhbmdlZC4gIzgzXG4gICAgc2V0VGltZW91dCggKCkgPT4ge1xuICAgICAgdGhpcy5wcm9ncmVzcyggaW1hZ2UsIGVsZW0sIG1lc3NhZ2UgKTtcbiAgICB9ICk7XG4gIH07XG5cbiAgdGhpcy5pbWFnZXMuZm9yRWFjaCggZnVuY3Rpb24oIGxvYWRpbmdJbWFnZSApIHtcbiAgICBsb2FkaW5nSW1hZ2Uub25jZSggJ3Byb2dyZXNzJywgb25Qcm9ncmVzcyApO1xuICAgIGxvYWRpbmdJbWFnZS5jaGVjaygpO1xuICB9ICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLnByb2dyZXNzID0gZnVuY3Rpb24oIGltYWdlLCBlbGVtLCBtZXNzYWdlICkge1xuICB0aGlzLnByb2dyZXNzZWRDb3VudCsrO1xuICB0aGlzLmhhc0FueUJyb2tlbiA9IHRoaXMuaGFzQW55QnJva2VuIHx8ICFpbWFnZS5pc0xvYWRlZDtcbiAgLy8gcHJvZ3Jlc3MgZXZlbnRcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgaW1hZ2UsIGVsZW0gXSApO1xuICBpZiAoIHRoaXMuanFEZWZlcnJlZCAmJiB0aGlzLmpxRGVmZXJyZWQubm90aWZ5ICkge1xuICAgIHRoaXMuanFEZWZlcnJlZC5ub3RpZnkoIHRoaXMsIGltYWdlICk7XG4gIH1cbiAgLy8gY2hlY2sgaWYgY29tcGxldGVkXG4gIGlmICggdGhpcy5wcm9ncmVzc2VkQ291bnQgPT09IHRoaXMuaW1hZ2VzLmxlbmd0aCApIHtcbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gIH1cblxuICBpZiAoIHRoaXMub3B0aW9ucy5kZWJ1ZyAmJiBjb25zb2xlICkge1xuICAgIGNvbnNvbGUubG9nKCBgcHJvZ3Jlc3M6ICR7bWVzc2FnZX1gLCBpbWFnZSwgZWxlbSApO1xuICB9XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gIGxldCBldmVudE5hbWUgPSB0aGlzLmhhc0FueUJyb2tlbiA/ICdmYWlsJyA6ICdkb25lJztcbiAgdGhpcy5pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgdGhpcy5lbWl0RXZlbnQoIGV2ZW50TmFtZSwgWyB0aGlzIF0gKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdhbHdheXMnLCBbIHRoaXMgXSApO1xuICBpZiAoIHRoaXMuanFEZWZlcnJlZCApIHtcbiAgICBsZXQganFNZXRob2QgPSB0aGlzLmhhc0FueUJyb2tlbiA/ICdyZWplY3QnIDogJ3Jlc29sdmUnO1xuICAgIHRoaXMuanFEZWZlcnJlZFsganFNZXRob2QgXSggdGhpcyApO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gTG9hZGluZ0ltYWdlKCBpbWcgKSB7XG4gIHRoaXMuaW1nID0gaW1nO1xufVxuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vIElmIGNvbXBsZXRlIGlzIHRydWUgYW5kIGJyb3dzZXIgc3VwcG9ydHMgbmF0dXJhbCBzaXplcyxcbiAgLy8gdHJ5IHRvIGNoZWNrIGZvciBpbWFnZSBzdGF0dXMgbWFudWFsbHkuXG4gIGxldCBpc0NvbXBsZXRlID0gdGhpcy5nZXRJc0ltYWdlQ29tcGxldGUoKTtcbiAgaWYgKCBpc0NvbXBsZXRlICkge1xuICAgIC8vIHJlcG9ydCBiYXNlZCBvbiBuYXR1cmFsV2lkdGhcbiAgICB0aGlzLmNvbmZpcm0oIHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gMCwgJ25hdHVyYWxXaWR0aCcgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBJZiBub25lIG9mIHRoZSBjaGVja3MgYWJvdmUgbWF0Y2hlZCwgc2ltdWxhdGUgbG9hZGluZyBvbiBkZXRhY2hlZCBlbGVtZW50LlxuICB0aGlzLnByb3h5SW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgLy8gYWRkIGNyb3NzT3JpZ2luIGF0dHJpYnV0ZS4gIzIwNFxuICBpZiAoIHRoaXMuaW1nLmNyb3NzT3JpZ2luICkge1xuICAgIHRoaXMucHJveHlJbWFnZS5jcm9zc09yaWdpbiA9IHRoaXMuaW1nLmNyb3NzT3JpZ2luO1xuICB9XG4gIHRoaXMucHJveHlJbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5wcm94eUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgLy8gYmluZCB0byBpbWFnZSBhcyB3ZWxsIGZvciBGaXJlZm94LiAjMTkxXG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5zcmMgPSB0aGlzLmltZy5jdXJyZW50U3JjIHx8IHRoaXMuaW1nLnNyYztcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuZ2V0SXNJbWFnZUNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNoZWNrIGZvciBub24temVybywgbm9uLXVuZGVmaW5lZCBuYXR1cmFsV2lkdGhcbiAgLy8gZml4ZXMgU2FmYXJpK0luZmluaXRlU2Nyb2xsK01hc29ucnkgYnVnIGluZmluaXRlLXNjcm9sbCM2NzFcbiAgcmV0dXJuIHRoaXMuaW1nLmNvbXBsZXRlICYmIHRoaXMuaW1nLm5hdHVyYWxXaWR0aDtcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uKCBpc0xvYWRlZCwgbWVzc2FnZSApIHtcbiAgdGhpcy5pc0xvYWRlZCA9IGlzTG9hZGVkO1xuICBsZXQgeyBwYXJlbnROb2RlIH0gPSB0aGlzLmltZztcbiAgLy8gZW1pdCBwcm9ncmVzcyB3aXRoIHBhcmVudCA8cGljdHVyZT4gb3Igc2VsZiA8aW1nPlxuICBsZXQgZWxlbSA9IHBhcmVudE5vZGUubm9kZU5hbWUgPT09ICdQSUNUVVJFJyA/IHBhcmVudE5vZGUgOiB0aGlzLmltZztcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgZWxlbSwgbWVzc2FnZSBdICk7XG59O1xuXG4vLyAtLS0tLSBldmVudHMgLS0tLS0gLy9cblxuLy8gdHJpZ2dlciBzcGVjaWZpZWQgaGFuZGxlciBmb3IgZXZlbnQgdHlwZVxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgbGV0IG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNvbmZpcm0oIHRydWUsICdvbmxvYWQnICk7XG4gIHRoaXMudW5iaW5kRXZlbnRzKCk7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jb25maXJtKCBmYWxzZSwgJ29uZXJyb3InICk7XG4gIHRoaXMudW5iaW5kRXZlbnRzKCk7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLnVuYmluZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByb3h5SW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBCYWNrZ3JvdW5kIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIEJhY2tncm91bmQoIHVybCwgZWxlbWVudCApIHtcbiAgdGhpcy51cmwgPSB1cmw7XG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XG59XG5cbi8vIGluaGVyaXQgTG9hZGluZ0ltYWdlIHByb3RvdHlwZVxuQmFja2dyb3VuZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMb2FkaW5nSW1hZ2UucHJvdG90eXBlICk7XG5cbkJhY2tncm91bmQucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMuaW1nLnNyYyA9IHRoaXMudXJsO1xuICAvLyBjaGVjayBpZiBpbWFnZSBpcyBhbHJlYWR5IGNvbXBsZXRlXG4gIGxldCBpc0NvbXBsZXRlID0gdGhpcy5nZXRJc0ltYWdlQ29tcGxldGUoKTtcbiAgaWYgKCBpc0NvbXBsZXRlICkge1xuICAgIHRoaXMuY29uZmlybSggdGhpcy5pbWcubmF0dXJhbFdpZHRoICE9PSAwLCAnbmF0dXJhbFdpZHRoJyApO1xuICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XG4gIH1cbn07XG5cbkJhY2tncm91bmQucHJvdG90eXBlLnVuYmluZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xufTtcblxuQmFja2dyb3VuZC5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uKCBpc0xvYWRlZCwgbWVzc2FnZSApIHtcbiAgdGhpcy5pc0xvYWRlZCA9IGlzTG9hZGVkO1xuICB0aGlzLmVtaXRFdmVudCggJ3Byb2dyZXNzJywgWyB0aGlzLCB0aGlzLmVsZW1lbnQsIG1lc3NhZ2UgXSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0galF1ZXJ5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbkltYWdlc0xvYWRlZC5tYWtlSlF1ZXJ5UGx1Z2luID0gZnVuY3Rpb24oIGpRdWVyeSApIHtcbiAgalF1ZXJ5ID0galF1ZXJ5IHx8IHdpbmRvdy5qUXVlcnk7XG4gIGlmICggIWpRdWVyeSApIHJldHVybjtcblxuICAvLyBzZXQgbG9jYWwgdmFyaWFibGVcbiAgJCA9IGpRdWVyeTtcbiAgLy8gJCgpLmltYWdlc0xvYWRlZCgpXG4gICQuZm4uaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oIG9wdGlvbnMsIG9uQWx3YXlzICkge1xuICAgIGxldCBpbnN0YW5jZSA9IG5ldyBJbWFnZXNMb2FkZWQoIHRoaXMsIG9wdGlvbnMsIG9uQWx3YXlzICk7XG4gICAgcmV0dXJuIGluc3RhbmNlLmpxRGVmZXJyZWQucHJvbWlzZSggJCggdGhpcyApICk7XG4gIH07XG59O1xuLy8gdHJ5IG1ha2luZyBwbHVnaW5cbkltYWdlc0xvYWRlZC5tYWtlSlF1ZXJ5UGx1Z2luKCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5yZXR1cm4gSW1hZ2VzTG9hZGVkO1xuXG59ICk7XG4iLCIoZnVuY3Rpb24od2luZG93LCBmYWN0b3J5KSB7XG5cdHZhciBsYXp5U2l6ZXMgPSBmYWN0b3J5KHdpbmRvdywgd2luZG93LmRvY3VtZW50LCBEYXRlKTtcblx0d2luZG93LmxhenlTaXplcyA9IGxhenlTaXplcztcblx0aWYodHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyl7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBsYXp5U2l6ZXM7XG5cdH1cbn0odHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/XG4gICAgICB3aW5kb3cgOiB7fSwgXG4vKipcbiAqIGltcG9ydChcIi4vdHlwZXMvZ2xvYmFsXCIpXG4gKiBAdHlwZWRlZiB7IGltcG9ydChcIi4vdHlwZXMvbGF6eXNpemVzLWNvbmZpZ1wiKS5MYXp5U2l6ZXNDb25maWdQYXJ0aWFsIH0gTGF6eVNpemVzQ29uZmlnUGFydGlhbFxuICovXG5mdW5jdGlvbiBsKHdpbmRvdywgZG9jdW1lbnQsIERhdGUpIHsgLy8gUGFzcyBpbiB0aGUgd2luZG93IERhdGUgZnVuY3Rpb24gYWxzbyBmb3IgU1NSIGJlY2F1c2UgdGhlIERhdGUgY2xhc3MgY2FuIGJlIGxvc3Rcblx0J3VzZSBzdHJpY3QnO1xuXHQvKmpzaGludCBlcW51bGw6dHJ1ZSAqL1xuXG5cdHZhciBsYXp5c2l6ZXMsXG5cdFx0LyoqXG5cdFx0ICogQHR5cGUgeyBMYXp5U2l6ZXNDb25maWdQYXJ0aWFsIH1cblx0XHQgKi9cblx0XHRsYXp5U2l6ZXNDZmc7XG5cblx0KGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHByb3A7XG5cblx0XHR2YXIgbGF6eVNpemVzRGVmYXVsdHMgPSB7XG5cdFx0XHRsYXp5Q2xhc3M6ICdsYXp5bG9hZCcsXG5cdFx0XHRsb2FkZWRDbGFzczogJ2xhenlsb2FkZWQnLFxuXHRcdFx0bG9hZGluZ0NsYXNzOiAnbGF6eWxvYWRpbmcnLFxuXHRcdFx0cHJlbG9hZENsYXNzOiAnbGF6eXByZWxvYWQnLFxuXHRcdFx0ZXJyb3JDbGFzczogJ2xhenllcnJvcicsXG5cdFx0XHQvL3N0cmljdENsYXNzOiAnbGF6eXN0cmljdCcsXG5cdFx0XHRhdXRvc2l6ZXNDbGFzczogJ2xhenlhdXRvc2l6ZXMnLFxuXHRcdFx0ZmFzdExvYWRlZENsYXNzOiAnbHMtaXMtY2FjaGVkJyxcblx0XHRcdGlmcmFtZUxvYWRNb2RlOiAwLFxuXHRcdFx0c3JjQXR0cjogJ2RhdGEtc3JjJyxcblx0XHRcdHNyY3NldEF0dHI6ICdkYXRhLXNyY3NldCcsXG5cdFx0XHRzaXplc0F0dHI6ICdkYXRhLXNpemVzJyxcblx0XHRcdC8vcHJlbG9hZEFmdGVyTG9hZDogZmFsc2UsXG5cdFx0XHRtaW5TaXplOiA0MCxcblx0XHRcdGN1c3RvbU1lZGlhOiB7fSxcblx0XHRcdGluaXQ6IHRydWUsXG5cdFx0XHRleHBGYWN0b3I6IDEuNSxcblx0XHRcdGhGYWM6IDAuOCxcblx0XHRcdGxvYWRNb2RlOiAyLFxuXHRcdFx0bG9hZEhpZGRlbjogdHJ1ZSxcblx0XHRcdHJpY1RpbWVvdXQ6IDAsXG5cdFx0XHR0aHJvdHRsZURlbGF5OiAxMjUsXG5cdFx0fTtcblxuXHRcdGxhenlTaXplc0NmZyA9IHdpbmRvdy5sYXp5U2l6ZXNDb25maWcgfHwgd2luZG93LmxhenlzaXplc0NvbmZpZyB8fCB7fTtcblxuXHRcdGZvcihwcm9wIGluIGxhenlTaXplc0RlZmF1bHRzKXtcblx0XHRcdGlmKCEocHJvcCBpbiBsYXp5U2l6ZXNDZmcpKXtcblx0XHRcdFx0bGF6eVNpemVzQ2ZnW3Byb3BdID0gbGF6eVNpemVzRGVmYXVsdHNbcHJvcF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9KSgpO1xuXG5cdGlmICghZG9jdW1lbnQgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0aW5pdDogZnVuY3Rpb24gKCkge30sXG5cdFx0XHQvKipcblx0XHRcdCAqIEB0eXBlIHsgTGF6eVNpemVzQ29uZmlnUGFydGlhbCB9XG5cdFx0XHQgKi9cblx0XHRcdGNmZzogbGF6eVNpemVzQ2ZnLFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAdHlwZSB7IHRydWUgfVxuXHRcdFx0ICovXG5cdFx0XHRub1N1cHBvcnQ6IHRydWUsXG5cdFx0fTtcblx0fVxuXG5cdHZhciBkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cdHZhciBzdXBwb3J0UGljdHVyZSA9IHdpbmRvdy5IVE1MUGljdHVyZUVsZW1lbnQ7XG5cblx0dmFyIF9hZGRFdmVudExpc3RlbmVyID0gJ2FkZEV2ZW50TGlzdGVuZXInO1xuXG5cdHZhciBfZ2V0QXR0cmlidXRlID0gJ2dldEF0dHJpYnV0ZSc7XG5cblx0LyoqXG5cdCAqIFVwZGF0ZSB0byBiaW5kIHRvIHdpbmRvdyBiZWNhdXNlICd0aGlzJyBiZWNvbWVzIG51bGwgZHVyaW5nIFNTUlxuXHQgKiBidWlsZHMuXG5cdCAqL1xuXHR2YXIgYWRkRXZlbnRMaXN0ZW5lciA9IHdpbmRvd1tfYWRkRXZlbnRMaXN0ZW5lcl0uYmluZCh3aW5kb3cpO1xuXG5cdHZhciBzZXRUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQ7XG5cblx0dmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgc2V0VGltZW91dDtcblxuXHR2YXIgcmVxdWVzdElkbGVDYWxsYmFjayA9IHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrO1xuXG5cdHZhciByZWdQaWN0dXJlID0gL15waWN0dXJlJC9pO1xuXG5cdHZhciBsb2FkRXZlbnRzID0gWydsb2FkJywgJ2Vycm9yJywgJ2xhenlpbmNsdWRlZCcsICdfbGF6eWxvYWRlZCddO1xuXG5cdHZhciByZWdDbGFzc0NhY2hlID0ge307XG5cblx0dmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaDtcblxuXHQvKipcblx0ICogQHBhcmFtIGVsZSB7RWxlbWVudH1cblx0ICogQHBhcmFtIGNscyB7c3RyaW5nfVxuXHQgKi9cblx0dmFyIGhhc0NsYXNzID0gZnVuY3Rpb24oZWxlLCBjbHMpIHtcblx0XHRpZighcmVnQ2xhc3NDYWNoZVtjbHNdKXtcblx0XHRcdHJlZ0NsYXNzQ2FjaGVbY2xzXSA9IG5ldyBSZWdFeHAoJyhcXFxcc3xeKScrY2xzKycoXFxcXHN8JCknKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlZ0NsYXNzQ2FjaGVbY2xzXS50ZXN0KGVsZVtfZ2V0QXR0cmlidXRlXSgnY2xhc3MnKSB8fCAnJykgJiYgcmVnQ2xhc3NDYWNoZVtjbHNdO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0gZWxlIHtFbGVtZW50fVxuXHQgKiBAcGFyYW0gY2xzIHtzdHJpbmd9XG5cdCAqL1xuXHR2YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbihlbGUsIGNscykge1xuXHRcdGlmICghaGFzQ2xhc3MoZWxlLCBjbHMpKXtcblx0XHRcdGVsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGVsZVtfZ2V0QXR0cmlidXRlXSgnY2xhc3MnKSB8fCAnJykudHJpbSgpICsgJyAnICsgY2xzKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBlbGUge0VsZW1lbnR9XG5cdCAqIEBwYXJhbSBjbHMge3N0cmluZ31cblx0ICovXG5cdHZhciByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uKGVsZSwgY2xzKSB7XG5cdFx0dmFyIHJlZztcblx0XHRpZiAoKHJlZyA9IGhhc0NsYXNzKGVsZSxjbHMpKSkge1xuXHRcdFx0ZWxlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoZWxlW19nZXRBdHRyaWJ1dGVdKCdjbGFzcycpIHx8ICcnKS5yZXBsYWNlKHJlZywgJyAnKSk7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBhZGRSZW1vdmVMb2FkRXZlbnRzID0gZnVuY3Rpb24oZG9tLCBmbiwgYWRkKXtcblx0XHR2YXIgYWN0aW9uID0gYWRkID8gX2FkZEV2ZW50TGlzdGVuZXIgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG5cdFx0aWYoYWRkKXtcblx0XHRcdGFkZFJlbW92ZUxvYWRFdmVudHMoZG9tLCBmbik7XG5cdFx0fVxuXHRcdGxvYWRFdmVudHMuZm9yRWFjaChmdW5jdGlvbihldnQpe1xuXHRcdFx0ZG9tW2FjdGlvbl0oZXZ0LCBmbik7XG5cdFx0fSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBlbGVtIHsgRWxlbWVudCB9XG5cdCAqIEBwYXJhbSBuYW1lIHsgc3RyaW5nIH1cblx0ICogQHBhcmFtIGRldGFpbCB7IGFueSB9XG5cdCAqIEBwYXJhbSBub0J1YmJsZXMgeyBib29sZWFuIH1cblx0ICogQHBhcmFtIG5vQ2FuY2VsYWJsZSB7IGJvb2xlYW4gfVxuXHQgKiBAcmV0dXJucyB7IEN1c3RvbUV2ZW50IH1cblx0ICovXG5cdHZhciB0cmlnZ2VyRXZlbnQgPSBmdW5jdGlvbihlbGVtLCBuYW1lLCBkZXRhaWwsIG5vQnViYmxlcywgbm9DYW5jZWxhYmxlKXtcblx0XHR2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcblxuXHRcdGlmKCFkZXRhaWwpe1xuXHRcdFx0ZGV0YWlsID0ge307XG5cdFx0fVxuXG5cdFx0ZGV0YWlsLmluc3RhbmNlID0gbGF6eXNpemVzO1xuXG5cdFx0ZXZlbnQuaW5pdEV2ZW50KG5hbWUsICFub0J1YmJsZXMsICFub0NhbmNlbGFibGUpO1xuXG5cdFx0ZXZlbnQuZGV0YWlsID0gZGV0YWlsO1xuXG5cdFx0ZWxlbS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblx0XHRyZXR1cm4gZXZlbnQ7XG5cdH07XG5cblx0dmFyIHVwZGF0ZVBvbHlmaWxsID0gZnVuY3Rpb24gKGVsLCBmdWxsKXtcblx0XHR2YXIgcG9seWZpbGw7XG5cdFx0aWYoICFzdXBwb3J0UGljdHVyZSAmJiAoIHBvbHlmaWxsID0gKHdpbmRvdy5waWN0dXJlZmlsbCB8fCBsYXp5U2l6ZXNDZmcucGYpICkgKXtcblx0XHRcdGlmKGZ1bGwgJiYgZnVsbC5zcmMgJiYgIWVsW19nZXRBdHRyaWJ1dGVdKCdzcmNzZXQnKSl7XG5cdFx0XHRcdGVsLnNldEF0dHJpYnV0ZSgnc3Jjc2V0JywgZnVsbC5zcmMpO1xuXHRcdFx0fVxuXHRcdFx0cG9seWZpbGwoe3JlZXZhbHVhdGU6IHRydWUsIGVsZW1lbnRzOiBbZWxdfSk7XG5cdFx0fSBlbHNlIGlmKGZ1bGwgJiYgZnVsbC5zcmMpe1xuXHRcdFx0ZWwuc3JjID0gZnVsbC5zcmM7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBnZXRDU1MgPSBmdW5jdGlvbiAoZWxlbSwgc3R5bGUpe1xuXHRcdHJldHVybiAoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtLCBudWxsKSB8fCB7fSlbc3R5bGVdO1xuXHR9O1xuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gZWxlbSB7IEVsZW1lbnQgfVxuXHQgKiBAcGFyYW0gcGFyZW50IHsgRWxlbWVudCB9XG5cdCAqIEBwYXJhbSBbd2lkdGhdIHtudW1iZXJ9XG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9XG5cdCAqL1xuXHR2YXIgZ2V0V2lkdGggPSBmdW5jdGlvbihlbGVtLCBwYXJlbnQsIHdpZHRoKXtcblx0XHR3aWR0aCA9IHdpZHRoIHx8IGVsZW0ub2Zmc2V0V2lkdGg7XG5cblx0XHR3aGlsZSh3aWR0aCA8IGxhenlTaXplc0NmZy5taW5TaXplICYmIHBhcmVudCAmJiAhZWxlbS5fbGF6eXNpemVzV2lkdGgpe1xuXHRcdFx0d2lkdGggPSAgcGFyZW50Lm9mZnNldFdpZHRoO1xuXHRcdFx0cGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHdpZHRoO1xuXHR9O1xuXG5cdHZhciByQUYgPSAoZnVuY3Rpb24oKXtcblx0XHR2YXIgcnVubmluZywgd2FpdGluZztcblx0XHR2YXIgZmlyc3RGbnMgPSBbXTtcblx0XHR2YXIgc2Vjb25kRm5zID0gW107XG5cdFx0dmFyIGZucyA9IGZpcnN0Rm5zO1xuXG5cdFx0dmFyIHJ1biA9IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgcnVuRm5zID0gZm5zO1xuXG5cdFx0XHRmbnMgPSBmaXJzdEZucy5sZW5ndGggPyBzZWNvbmRGbnMgOiBmaXJzdEZucztcblxuXHRcdFx0cnVubmluZyA9IHRydWU7XG5cdFx0XHR3YWl0aW5nID0gZmFsc2U7XG5cblx0XHRcdHdoaWxlKHJ1bkZucy5sZW5ndGgpe1xuXHRcdFx0XHRydW5GbnMuc2hpZnQoKSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRydW5uaW5nID0gZmFsc2U7XG5cdFx0fTtcblxuXHRcdHZhciByYWZCYXRjaCA9IGZ1bmN0aW9uKGZuLCBxdWV1ZSl7XG5cdFx0XHRpZihydW5uaW5nICYmICFxdWV1ZSl7XG5cdFx0XHRcdGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmbnMucHVzaChmbik7XG5cblx0XHRcdFx0aWYoIXdhaXRpbmcpe1xuXHRcdFx0XHRcdHdhaXRpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdChkb2N1bWVudC5oaWRkZW4gPyBzZXRUaW1lb3V0IDogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKShydW4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJhZkJhdGNoLl9sc0ZsdXNoID0gcnVuO1xuXG5cdFx0cmV0dXJuIHJhZkJhdGNoO1xuXHR9KSgpO1xuXG5cdHZhciByQUZJdCA9IGZ1bmN0aW9uKGZuLCBzaW1wbGUpe1xuXHRcdHJldHVybiBzaW1wbGUgP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJBRihmbik7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHRcdFx0dmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cdFx0XHRcdHJBRihmdW5jdGlvbigpe1xuXHRcdFx0XHRcdGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHQ7XG5cdH07XG5cblx0dmFyIHRocm90dGxlID0gZnVuY3Rpb24oZm4pe1xuXHRcdHZhciBydW5uaW5nO1xuXHRcdHZhciBsYXN0VGltZSA9IDA7XG5cdFx0dmFyIGdEZWxheSA9IGxhenlTaXplc0NmZy50aHJvdHRsZURlbGF5O1xuXHRcdHZhciBySUNUaW1lb3V0ID0gbGF6eVNpemVzQ2ZnLnJpY1RpbWVvdXQ7XG5cdFx0dmFyIHJ1biA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRydW5uaW5nID0gZmFsc2U7XG5cdFx0XHRsYXN0VGltZSA9IERhdGUubm93KCk7XG5cdFx0XHRmbigpO1xuXHRcdH07XG5cdFx0dmFyIGlkbGVDYWxsYmFjayA9IHJlcXVlc3RJZGxlQ2FsbGJhY2sgJiYgcklDVGltZW91dCA+IDQ5ID9cblx0XHRcdGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHJlcXVlc3RJZGxlQ2FsbGJhY2socnVuLCB7dGltZW91dDogcklDVGltZW91dH0pO1xuXG5cdFx0XHRcdGlmKHJJQ1RpbWVvdXQgIT09IGxhenlTaXplc0NmZy5yaWNUaW1lb3V0KXtcblx0XHRcdFx0XHRySUNUaW1lb3V0ID0gbGF6eVNpemVzQ2ZnLnJpY1RpbWVvdXQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gOlxuXHRcdFx0ckFGSXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0c2V0VGltZW91dChydW4pO1xuXHRcdFx0fSwgdHJ1ZSlcblx0XHQ7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24oaXNQcmlvcml0eSl7XG5cdFx0XHR2YXIgZGVsYXk7XG5cblx0XHRcdGlmKChpc1ByaW9yaXR5ID0gaXNQcmlvcml0eSA9PT0gdHJ1ZSkpe1xuXHRcdFx0XHRySUNUaW1lb3V0ID0gMzM7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHJ1bm5pbmcpe1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHJ1bm5pbmcgPSAgdHJ1ZTtcblxuXHRcdFx0ZGVsYXkgPSBnRGVsYXkgLSAoRGF0ZS5ub3coKSAtIGxhc3RUaW1lKTtcblxuXHRcdFx0aWYoZGVsYXkgPCAwKXtcblx0XHRcdFx0ZGVsYXkgPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihpc1ByaW9yaXR5IHx8IGRlbGF5IDwgOSl7XG5cdFx0XHRcdGlkbGVDYWxsYmFjaygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2V0VGltZW91dChpZGxlQ2FsbGJhY2ssIGRlbGF5KTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXG5cdC8vYmFzZWQgb24gaHR0cDovL21vZGVybmphdmFzY3JpcHQuYmxvZ3Nwb3QuZGUvMjAxMy8wOC9idWlsZGluZy1iZXR0ZXItZGVib3VuY2UuaHRtbFxuXHR2YXIgZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jKSB7XG5cdFx0dmFyIHRpbWVvdXQsIHRpbWVzdGFtcDtcblx0XHR2YXIgd2FpdCA9IDk5O1xuXHRcdHZhciBydW4gPSBmdW5jdGlvbigpe1xuXHRcdFx0dGltZW91dCA9IG51bGw7XG5cdFx0XHRmdW5jKCk7XG5cdFx0fTtcblx0XHR2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBsYXN0ID0gRGF0ZS5ub3coKSAtIHRpbWVzdGFtcDtcblxuXHRcdFx0aWYgKGxhc3QgPCB3YWl0KSB7XG5cdFx0XHRcdHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdChyZXF1ZXN0SWRsZUNhbGxiYWNrIHx8IHJ1bikocnVuKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0dGltZXN0YW1wID0gRGF0ZS5ub3coKTtcblxuXHRcdFx0aWYgKCF0aW1lb3V0KSB7XG5cdFx0XHRcdHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXG5cdHZhciBsb2FkZXIgPSAoZnVuY3Rpb24oKXtcblx0XHR2YXIgcHJlbG9hZEVsZW1zLCBpc0NvbXBsZXRlZCwgcmVzZXRQcmVsb2FkaW5nVGltZXIsIGxvYWRNb2RlLCBzdGFydGVkO1xuXG5cdFx0dmFyIGVMdlcsIGVsdkgsIGVMdG9wLCBlTGxlZnQsIGVMcmlnaHQsIGVMYm90dG9tLCBpc0JvZHlIaWRkZW47XG5cblx0XHR2YXIgcmVnSW1nID0gL15pbWckL2k7XG5cdFx0dmFyIHJlZ0lmcmFtZSA9IC9eaWZyYW1lJC9pO1xuXG5cdFx0dmFyIHN1cHBvcnRTY3JvbGwgPSAoJ29uc2Nyb2xsJyBpbiB3aW5kb3cpICYmICEoLyhnbGV8aW5nKWJvdC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSk7XG5cblx0XHR2YXIgc2hyaW5rRXhwYW5kID0gMDtcblx0XHR2YXIgY3VycmVudEV4cGFuZCA9IDA7XG5cblx0XHR2YXIgaXNMb2FkaW5nID0gMDtcblx0XHR2YXIgbG93UnVucyA9IC0xO1xuXG5cdFx0dmFyIHJlc2V0UHJlbG9hZGluZyA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0aXNMb2FkaW5nLS07XG5cdFx0XHRpZighZSB8fCBpc0xvYWRpbmcgPCAwIHx8ICFlLnRhcmdldCl7XG5cdFx0XHRcdGlzTG9hZGluZyA9IDA7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBpc1Zpc2libGUgPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0aWYgKGlzQm9keUhpZGRlbiA9PSBudWxsKSB7XG5cdFx0XHRcdGlzQm9keUhpZGRlbiA9IGdldENTUyhkb2N1bWVudC5ib2R5LCAndmlzaWJpbGl0eScpID09ICdoaWRkZW4nO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaXNCb2R5SGlkZGVuIHx8ICEoZ2V0Q1NTKGVsZW0ucGFyZW50Tm9kZSwgJ3Zpc2liaWxpdHknKSA9PSAnaGlkZGVuJyAmJiBnZXRDU1MoZWxlbSwgJ3Zpc2liaWxpdHknKSA9PSAnaGlkZGVuJyk7XG5cdFx0fTtcblxuXHRcdHZhciBpc05lc3RlZFZpc2libGUgPSBmdW5jdGlvbihlbGVtLCBlbGVtRXhwYW5kKXtcblx0XHRcdHZhciBvdXRlclJlY3Q7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbTtcblx0XHRcdHZhciB2aXNpYmxlID0gaXNWaXNpYmxlKGVsZW0pO1xuXG5cdFx0XHRlTHRvcCAtPSBlbGVtRXhwYW5kO1xuXHRcdFx0ZUxib3R0b20gKz0gZWxlbUV4cGFuZDtcblx0XHRcdGVMbGVmdCAtPSBlbGVtRXhwYW5kO1xuXHRcdFx0ZUxyaWdodCArPSBlbGVtRXhwYW5kO1xuXG5cdFx0XHR3aGlsZSh2aXNpYmxlICYmIChwYXJlbnQgPSBwYXJlbnQub2Zmc2V0UGFyZW50KSAmJiBwYXJlbnQgIT0gZG9jdW1lbnQuYm9keSAmJiBwYXJlbnQgIT0gZG9jRWxlbSl7XG5cdFx0XHRcdHZpc2libGUgPSAoKGdldENTUyhwYXJlbnQsICdvcGFjaXR5JykgfHwgMSkgPiAwKTtcblxuXHRcdFx0XHRpZih2aXNpYmxlICYmIGdldENTUyhwYXJlbnQsICdvdmVyZmxvdycpICE9ICd2aXNpYmxlJyl7XG5cdFx0XHRcdFx0b3V0ZXJSZWN0ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRcdHZpc2libGUgPSBlTHJpZ2h0ID4gb3V0ZXJSZWN0LmxlZnQgJiZcblx0XHRcdFx0XHRcdGVMbGVmdCA8IG91dGVyUmVjdC5yaWdodCAmJlxuXHRcdFx0XHRcdFx0ZUxib3R0b20gPiBvdXRlclJlY3QudG9wIC0gMSAmJlxuXHRcdFx0XHRcdFx0ZUx0b3AgPCBvdXRlclJlY3QuYm90dG9tICsgMVxuXHRcdFx0XHRcdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmlzaWJsZTtcblx0XHR9O1xuXG5cdFx0dmFyIGNoZWNrRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlTGxlbiwgaSwgcmVjdCwgYXV0b0xvYWRFbGVtLCBsb2FkZWRTb21ldGhpbmcsIGVsZW1FeHBhbmQsIGVsZW1OZWdhdGl2ZUV4cGFuZCwgZWxlbUV4cGFuZFZhbCxcblx0XHRcdFx0YmVmb3JlRXhwYW5kVmFsLCBkZWZhdWx0RXhwYW5kLCBwcmVsb2FkRXhwYW5kLCBoRmFjO1xuXHRcdFx0dmFyIGxhenlsb2FkRWxlbXMgPSBsYXp5c2l6ZXMuZWxlbWVudHM7XG5cblx0XHRcdGlmKChsb2FkTW9kZSA9IGxhenlTaXplc0NmZy5sb2FkTW9kZSkgJiYgaXNMb2FkaW5nIDwgOCAmJiAoZUxsZW4gPSBsYXp5bG9hZEVsZW1zLmxlbmd0aCkpe1xuXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRcdGxvd1J1bnMrKztcblxuXHRcdFx0XHRmb3IoOyBpIDwgZUxsZW47IGkrKyl7XG5cblx0XHRcdFx0XHRpZighbGF6eWxvYWRFbGVtc1tpXSB8fCBsYXp5bG9hZEVsZW1zW2ldLl9sYXp5UmFjZSl7Y29udGludWU7fVxuXG5cdFx0XHRcdFx0aWYoIXN1cHBvcnRTY3JvbGwgfHwgKGxhenlzaXplcy5wcmVtYXR1cmVVbnZlaWwgJiYgbGF6eXNpemVzLnByZW1hdHVyZVVudmVpbChsYXp5bG9hZEVsZW1zW2ldKSkpe3VudmVpbEVsZW1lbnQobGF6eWxvYWRFbGVtc1tpXSk7Y29udGludWU7fVxuXG5cdFx0XHRcdFx0aWYoIShlbGVtRXhwYW5kVmFsID0gbGF6eWxvYWRFbGVtc1tpXVtfZ2V0QXR0cmlidXRlXSgnZGF0YS1leHBhbmQnKSkgfHwgIShlbGVtRXhwYW5kID0gZWxlbUV4cGFuZFZhbCAqIDEpKXtcblx0XHRcdFx0XHRcdGVsZW1FeHBhbmQgPSBjdXJyZW50RXhwYW5kO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghZGVmYXVsdEV4cGFuZCkge1xuXHRcdFx0XHRcdFx0ZGVmYXVsdEV4cGFuZCA9ICghbGF6eVNpemVzQ2ZnLmV4cGFuZCB8fCBsYXp5U2l6ZXNDZmcuZXhwYW5kIDwgMSkgP1xuXHRcdFx0XHRcdFx0XHRkb2NFbGVtLmNsaWVudEhlaWdodCA+IDUwMCAmJiBkb2NFbGVtLmNsaWVudFdpZHRoID4gNTAwID8gNTAwIDogMzcwIDpcblx0XHRcdFx0XHRcdFx0bGF6eVNpemVzQ2ZnLmV4cGFuZDtcblxuXHRcdFx0XHRcdFx0bGF6eXNpemVzLl9kZWZFeCA9IGRlZmF1bHRFeHBhbmQ7XG5cblx0XHRcdFx0XHRcdHByZWxvYWRFeHBhbmQgPSBkZWZhdWx0RXhwYW5kICogbGF6eVNpemVzQ2ZnLmV4cEZhY3Rvcjtcblx0XHRcdFx0XHRcdGhGYWMgPSBsYXp5U2l6ZXNDZmcuaEZhYztcblx0XHRcdFx0XHRcdGlzQm9keUhpZGRlbiA9IG51bGw7XG5cblx0XHRcdFx0XHRcdGlmKGN1cnJlbnRFeHBhbmQgPCBwcmVsb2FkRXhwYW5kICYmIGlzTG9hZGluZyA8IDEgJiYgbG93UnVucyA+IDIgJiYgbG9hZE1vZGUgPiAyICYmICFkb2N1bWVudC5oaWRkZW4pe1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50RXhwYW5kID0gcHJlbG9hZEV4cGFuZDtcblx0XHRcdFx0XHRcdFx0bG93UnVucyA9IDA7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYobG9hZE1vZGUgPiAxICYmIGxvd1J1bnMgPiAxICYmIGlzTG9hZGluZyA8IDYpe1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50RXhwYW5kID0gZGVmYXVsdEV4cGFuZDtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRFeHBhbmQgPSBzaHJpbmtFeHBhbmQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYoYmVmb3JlRXhwYW5kVmFsICE9PSBlbGVtRXhwYW5kKXtcblx0XHRcdFx0XHRcdGVMdlcgPSBpbm5lcldpZHRoICsgKGVsZW1FeHBhbmQgKiBoRmFjKTtcblx0XHRcdFx0XHRcdGVsdkggPSBpbm5lckhlaWdodCArIGVsZW1FeHBhbmQ7XG5cdFx0XHRcdFx0XHRlbGVtTmVnYXRpdmVFeHBhbmQgPSBlbGVtRXhwYW5kICogLTE7XG5cdFx0XHRcdFx0XHRiZWZvcmVFeHBhbmRWYWwgPSBlbGVtRXhwYW5kO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJlY3QgPSBsYXp5bG9hZEVsZW1zW2ldLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0XHRcdFx0aWYgKChlTGJvdHRvbSA9IHJlY3QuYm90dG9tKSA+PSBlbGVtTmVnYXRpdmVFeHBhbmQgJiZcblx0XHRcdFx0XHRcdChlTHRvcCA9IHJlY3QudG9wKSA8PSBlbHZIICYmXG5cdFx0XHRcdFx0XHQoZUxyaWdodCA9IHJlY3QucmlnaHQpID49IGVsZW1OZWdhdGl2ZUV4cGFuZCAqIGhGYWMgJiZcblx0XHRcdFx0XHRcdChlTGxlZnQgPSByZWN0LmxlZnQpIDw9IGVMdlcgJiZcblx0XHRcdFx0XHRcdChlTGJvdHRvbSB8fCBlTHJpZ2h0IHx8IGVMbGVmdCB8fCBlTHRvcCkgJiZcblx0XHRcdFx0XHRcdChsYXp5U2l6ZXNDZmcubG9hZEhpZGRlbiB8fCBpc1Zpc2libGUobGF6eWxvYWRFbGVtc1tpXSkpICYmXG5cdFx0XHRcdFx0XHQoKGlzQ29tcGxldGVkICYmIGlzTG9hZGluZyA8IDMgJiYgIWVsZW1FeHBhbmRWYWwgJiYgKGxvYWRNb2RlIDwgMyB8fCBsb3dSdW5zIDwgNCkpIHx8IGlzTmVzdGVkVmlzaWJsZShsYXp5bG9hZEVsZW1zW2ldLCBlbGVtRXhwYW5kKSkpe1xuXHRcdFx0XHRcdFx0dW52ZWlsRWxlbWVudChsYXp5bG9hZEVsZW1zW2ldKTtcblx0XHRcdFx0XHRcdGxvYWRlZFNvbWV0aGluZyA9IHRydWU7XG5cdFx0XHRcdFx0XHRpZihpc0xvYWRpbmcgPiA5KXticmVhazt9XG5cdFx0XHRcdFx0fSBlbHNlIGlmKCFsb2FkZWRTb21ldGhpbmcgJiYgaXNDb21wbGV0ZWQgJiYgIWF1dG9Mb2FkRWxlbSAmJlxuXHRcdFx0XHRcdFx0aXNMb2FkaW5nIDwgNCAmJiBsb3dSdW5zIDwgNCAmJiBsb2FkTW9kZSA+IDIgJiZcblx0XHRcdFx0XHRcdChwcmVsb2FkRWxlbXNbMF0gfHwgbGF6eVNpemVzQ2ZnLnByZWxvYWRBZnRlckxvYWQpICYmXG5cdFx0XHRcdFx0XHQocHJlbG9hZEVsZW1zWzBdIHx8ICghZWxlbUV4cGFuZFZhbCAmJiAoKGVMYm90dG9tIHx8IGVMcmlnaHQgfHwgZUxsZWZ0IHx8IGVMdG9wKSB8fCBsYXp5bG9hZEVsZW1zW2ldW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NmZy5zaXplc0F0dHIpICE9ICdhdXRvJykpKSl7XG5cdFx0XHRcdFx0XHRhdXRvTG9hZEVsZW0gPSBwcmVsb2FkRWxlbXNbMF0gfHwgbGF6eWxvYWRFbGVtc1tpXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihhdXRvTG9hZEVsZW0gJiYgIWxvYWRlZFNvbWV0aGluZyl7XG5cdFx0XHRcdFx0dW52ZWlsRWxlbWVudChhdXRvTG9hZEVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciB0aHJvdHRsZWRDaGVja0VsZW1lbnRzID0gdGhyb3R0bGUoY2hlY2tFbGVtZW50cyk7XG5cblx0XHR2YXIgc3dpdGNoTG9hZGluZ0NsYXNzID0gZnVuY3Rpb24oZSl7XG5cdFx0XHR2YXIgZWxlbSA9IGUudGFyZ2V0O1xuXG5cdFx0XHRpZiAoZWxlbS5fbGF6eUNhY2hlKSB7XG5cdFx0XHRcdGRlbGV0ZSBlbGVtLl9sYXp5Q2FjaGU7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0cmVzZXRQcmVsb2FkaW5nKGUpO1xuXHRcdFx0YWRkQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmxvYWRlZENsYXNzKTtcblx0XHRcdHJlbW92ZUNsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sb2FkaW5nQ2xhc3MpO1xuXHRcdFx0YWRkUmVtb3ZlTG9hZEV2ZW50cyhlbGVtLCByYWZTd2l0Y2hMb2FkaW5nQ2xhc3MpO1xuXHRcdFx0dHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5bG9hZGVkJyk7XG5cdFx0fTtcblx0XHR2YXIgcmFmZWRTd2l0Y2hMb2FkaW5nQ2xhc3MgPSByQUZJdChzd2l0Y2hMb2FkaW5nQ2xhc3MpO1xuXHRcdHZhciByYWZTd2l0Y2hMb2FkaW5nQ2xhc3MgPSBmdW5jdGlvbihlKXtcblx0XHRcdHJhZmVkU3dpdGNoTG9hZGluZ0NsYXNzKHt0YXJnZXQ6IGUudGFyZ2V0fSk7XG5cdFx0fTtcblxuXHRcdHZhciBjaGFuZ2VJZnJhbWVTcmMgPSBmdW5jdGlvbihlbGVtLCBzcmMpe1xuXHRcdFx0dmFyIGxvYWRNb2RlID0gZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbG9hZC1tb2RlJykgfHwgbGF6eVNpemVzQ2ZnLmlmcmFtZUxvYWRNb2RlO1xuXG5cdFx0XHQvLyBsb2FkTW9kZSBjYW4gYmUgYWxzbyBhIHN0cmluZyFcblx0XHRcdGlmIChsb2FkTW9kZSA9PSAwKSB7XG5cdFx0XHRcdGVsZW0uY29udGVudFdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHNyYyk7XG5cdFx0XHR9IGVsc2UgaWYgKGxvYWRNb2RlID09IDEpIHtcblx0XHRcdFx0ZWxlbS5zcmMgPSBzcmM7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBoYW5kbGVTb3VyY2VzID0gZnVuY3Rpb24oc291cmNlKXtcblx0XHRcdHZhciBjdXN0b21NZWRpYTtcblxuXHRcdFx0dmFyIHNvdXJjZVNyY3NldCA9IHNvdXJjZVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc3Jjc2V0QXR0cik7XG5cblx0XHRcdGlmKCAoY3VzdG9tTWVkaWEgPSBsYXp5U2l6ZXNDZmcuY3VzdG9tTWVkaWFbc291cmNlW19nZXRBdHRyaWJ1dGVdKCdkYXRhLW1lZGlhJykgfHwgc291cmNlW19nZXRBdHRyaWJ1dGVdKCdtZWRpYScpXSkgKXtcblx0XHRcdFx0c291cmNlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBjdXN0b21NZWRpYSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHNvdXJjZVNyY3NldCl7XG5cdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ3NyY3NldCcsIHNvdXJjZVNyY3NldCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBsYXp5VW52ZWlsID0gckFGSXQoZnVuY3Rpb24gKGVsZW0sIGRldGFpbCwgaXNBdXRvLCBzaXplcywgaXNJbWcpe1xuXHRcdFx0dmFyIHNyYywgc3Jjc2V0LCBwYXJlbnQsIGlzUGljdHVyZSwgZXZlbnQsIGZpcmVzTG9hZDtcblxuXHRcdFx0aWYoIShldmVudCA9IHRyaWdnZXJFdmVudChlbGVtLCAnbGF6eWJlZm9yZXVudmVpbCcsIGRldGFpbCkpLmRlZmF1bHRQcmV2ZW50ZWQpe1xuXG5cdFx0XHRcdGlmKHNpemVzKXtcblx0XHRcdFx0XHRpZihpc0F1dG8pe1xuXHRcdFx0XHRcdFx0YWRkQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmF1dG9zaXplc0NsYXNzKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgc2l6ZXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNyY3NldCA9IGVsZW1bX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ2ZnLnNyY3NldEF0dHIpO1xuXHRcdFx0XHRzcmMgPSBlbGVtW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NmZy5zcmNBdHRyKTtcblxuXHRcdFx0XHRpZihpc0ltZykge1xuXHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHRpc1BpY3R1cmUgPSBwYXJlbnQgJiYgcmVnUGljdHVyZS50ZXN0KHBhcmVudC5ub2RlTmFtZSB8fCAnJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmaXJlc0xvYWQgPSBkZXRhaWwuZmlyZXNMb2FkIHx8ICgoJ3NyYycgaW4gZWxlbSkgJiYgKHNyY3NldCB8fCBzcmMgfHwgaXNQaWN0dXJlKSk7XG5cblx0XHRcdFx0ZXZlbnQgPSB7dGFyZ2V0OiBlbGVtfTtcblxuXHRcdFx0XHRhZGRDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubG9hZGluZ0NsYXNzKTtcblxuXHRcdFx0XHRpZihmaXJlc0xvYWQpe1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dChyZXNldFByZWxvYWRpbmdUaW1lcik7XG5cdFx0XHRcdFx0cmVzZXRQcmVsb2FkaW5nVGltZXIgPSBzZXRUaW1lb3V0KHJlc2V0UHJlbG9hZGluZywgMjUwMCk7XG5cdFx0XHRcdFx0YWRkUmVtb3ZlTG9hZEV2ZW50cyhlbGVtLCByYWZTd2l0Y2hMb2FkaW5nQ2xhc3MsIHRydWUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoaXNQaWN0dXJlKXtcblx0XHRcdFx0XHRmb3JFYWNoLmNhbGwocGFyZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzb3VyY2UnKSwgaGFuZGxlU291cmNlcyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihzcmNzZXQpe1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdzcmNzZXQnLCBzcmNzZXQpO1xuXHRcdFx0XHR9IGVsc2UgaWYoc3JjICYmICFpc1BpY3R1cmUpe1xuXHRcdFx0XHRcdGlmKHJlZ0lmcmFtZS50ZXN0KGVsZW0ubm9kZU5hbWUpKXtcblx0XHRcdFx0XHRcdGNoYW5nZUlmcmFtZVNyYyhlbGVtLCBzcmMpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNyYyA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihpc0ltZyAmJiAoc3Jjc2V0IHx8IGlzUGljdHVyZSkpe1xuXHRcdFx0XHRcdHVwZGF0ZVBvbHlmaWxsKGVsZW0sIHtzcmM6IHNyY30pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKGVsZW0uX2xhenlSYWNlKXtcblx0XHRcdFx0ZGVsZXRlIGVsZW0uX2xhenlSYWNlO1xuXHRcdFx0fVxuXHRcdFx0cmVtb3ZlQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmxhenlDbGFzcyk7XG5cblx0XHRcdHJBRihmdW5jdGlvbigpe1xuXHRcdFx0XHQvLyBQYXJ0IG9mIHRoaXMgY2FuIGJlIHJlbW92ZWQgYXMgc29vbiBhcyB0aGlzIGZpeCBpcyBvbGRlcjogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NzczMSAoMjAxNSlcblx0XHRcdFx0dmFyIGlzTG9hZGVkID0gZWxlbS5jb21wbGV0ZSAmJiBlbGVtLm5hdHVyYWxXaWR0aCA+IDE7XG5cblx0XHRcdFx0aWYoICFmaXJlc0xvYWQgfHwgaXNMb2FkZWQpe1xuXHRcdFx0XHRcdGlmIChpc0xvYWRlZCkge1xuXHRcdFx0XHRcdFx0YWRkQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmZhc3RMb2FkZWRDbGFzcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHN3aXRjaExvYWRpbmdDbGFzcyhldmVudCk7XG5cdFx0XHRcdFx0ZWxlbS5fbGF6eUNhY2hlID0gdHJ1ZTtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRpZiAoJ19sYXp5Q2FjaGUnIGluIGVsZW0pIHtcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIGVsZW0uX2xhenlDYWNoZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCA5KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZWxlbS5sb2FkaW5nID09ICdsYXp5Jykge1xuXHRcdFx0XHRcdGlzTG9hZGluZy0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0cnVlKTtcblx0XHR9KTtcblxuXHRcdC8qKlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIGVsZW0geyBFbGVtZW50IH1cblx0XHQgKi9cblx0XHR2YXIgdW52ZWlsRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtKXtcblx0XHRcdGlmIChlbGVtLl9sYXp5UmFjZSkge3JldHVybjt9XG5cdFx0XHR2YXIgZGV0YWlsO1xuXG5cdFx0XHR2YXIgaXNJbWcgPSByZWdJbWcudGVzdChlbGVtLm5vZGVOYW1lKTtcblxuXHRcdFx0Ly9hbGxvdyB1c2luZyBzaXplcz1cImF1dG9cIiwgYnV0IGRvbid0IHVzZS4gaXQncyBpbnZhbGlkLiBVc2UgZGF0YS1zaXplcz1cImF1dG9cIiBvciBhIHZhbGlkIHZhbHVlIGZvciBzaXplcyBpbnN0ZWFkIChpLmUuOiBzaXplcz1cIjgwdndcIilcblx0XHRcdHZhciBzaXplcyA9IGlzSW1nICYmIChlbGVtW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NmZy5zaXplc0F0dHIpIHx8IGVsZW1bX2dldEF0dHJpYnV0ZV0oJ3NpemVzJykpO1xuXHRcdFx0dmFyIGlzQXV0byA9IHNpemVzID09ICdhdXRvJztcblxuXHRcdFx0aWYoIChpc0F1dG8gfHwgIWlzQ29tcGxldGVkKSAmJiBpc0ltZyAmJiAoZWxlbVtfZ2V0QXR0cmlidXRlXSgnc3JjJykgfHwgZWxlbS5zcmNzZXQpICYmICFlbGVtLmNvbXBsZXRlICYmICFoYXNDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcuZXJyb3JDbGFzcykgJiYgaGFzQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmxhenlDbGFzcykpe3JldHVybjt9XG5cblx0XHRcdGRldGFpbCA9IHRyaWdnZXJFdmVudChlbGVtLCAnbGF6eXVudmVpbHJlYWQnKS5kZXRhaWw7XG5cblx0XHRcdGlmKGlzQXV0byl7XG5cdFx0XHRcdCBhdXRvU2l6ZXIudXBkYXRlRWxlbShlbGVtLCB0cnVlLCBlbGVtLm9mZnNldFdpZHRoKTtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5fbGF6eVJhY2UgPSB0cnVlO1xuXHRcdFx0aXNMb2FkaW5nKys7XG5cblx0XHRcdGxhenlVbnZlaWwoZWxlbSwgZGV0YWlsLCBpc0F1dG8sIHNpemVzLCBpc0ltZyk7XG5cdFx0fTtcblxuXHRcdHZhciBhZnRlclNjcm9sbCA9IGRlYm91bmNlKGZ1bmN0aW9uKCl7XG5cdFx0XHRsYXp5U2l6ZXNDZmcubG9hZE1vZGUgPSAzO1xuXHRcdFx0dGhyb3R0bGVkQ2hlY2tFbGVtZW50cygpO1xuXHRcdH0pO1xuXG5cdFx0dmFyIGFsdExvYWRtb2RlU2Nyb2xsTGlzdG5lciA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRpZihsYXp5U2l6ZXNDZmcubG9hZE1vZGUgPT0gMyl7XG5cdFx0XHRcdGxhenlTaXplc0NmZy5sb2FkTW9kZSA9IDI7XG5cdFx0XHR9XG5cdFx0XHRhZnRlclNjcm9sbCgpO1xuXHRcdH07XG5cblx0XHR2YXIgb25sb2FkID0gZnVuY3Rpb24oKXtcblx0XHRcdGlmKGlzQ29tcGxldGVkKXtyZXR1cm47fVxuXHRcdFx0aWYoRGF0ZS5ub3coKSAtIHN0YXJ0ZWQgPCA5OTkpe1xuXHRcdFx0XHRzZXRUaW1lb3V0KG9ubG9hZCwgOTk5KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cblx0XHRcdGlzQ29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0bGF6eVNpemVzQ2ZnLmxvYWRNb2RlID0gMztcblxuXHRcdFx0dGhyb3R0bGVkQ2hlY2tFbGVtZW50cygpO1xuXG5cdFx0XHRhZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBhbHRMb2FkbW9kZVNjcm9sbExpc3RuZXIsIHRydWUpO1xuXHRcdH07XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0XzogZnVuY3Rpb24oKXtcblx0XHRcdFx0c3RhcnRlZCA9IERhdGUubm93KCk7XG5cblx0XHRcdFx0bGF6eXNpemVzLmVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShsYXp5U2l6ZXNDZmcubGF6eUNsYXNzKTtcblx0XHRcdFx0cHJlbG9hZEVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShsYXp5U2l6ZXNDZmcubGF6eUNsYXNzICsgJyAnICsgbGF6eVNpemVzQ2ZnLnByZWxvYWRDbGFzcyk7XG5cblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcigncGFnZXNob3cnLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRcdGlmIChlLnBlcnNpc3RlZCkge1xuXHRcdFx0XHRcdFx0dmFyIGxvYWRpbmdFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgbGF6eVNpemVzQ2ZnLmxvYWRpbmdDbGFzcyk7XG5cblx0XHRcdFx0XHRcdGlmIChsb2FkaW5nRWxlbWVudHMubGVuZ3RoICYmIGxvYWRpbmdFbGVtZW50cy5mb3JFYWNoKSB7XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0bG9hZGluZ0VsZW1lbnRzLmZvckVhY2goIGZ1bmN0aW9uIChpbWcpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChpbWcuY29tcGxldGUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dW52ZWlsRWxlbWVudChpbWcpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyKXtcblx0XHRcdFx0XHRuZXcgTXV0YXRpb25PYnNlcnZlciggdGhyb3R0bGVkQ2hlY2tFbGVtZW50cyApLm9ic2VydmUoIGRvY0VsZW0sIHtjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUsIGF0dHJpYnV0ZXM6IHRydWV9ICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZG9jRWxlbVtfYWRkRXZlbnRMaXN0ZW5lcl0oJ0RPTU5vZGVJbnNlcnRlZCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXHRcdFx0XHRcdGRvY0VsZW1bX2FkZEV2ZW50TGlzdGVuZXJdKCdET01BdHRyTW9kaWZpZWQnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblx0XHRcdFx0XHRzZXRJbnRlcnZhbCh0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCA5OTkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXG5cdFx0XHRcdC8vLCAnZnVsbHNjcmVlbmNoYW5nZSdcblx0XHRcdFx0Wydmb2N1cycsICdtb3VzZW92ZXInLCAnY2xpY2snLCAnbG9hZCcsICd0cmFuc2l0aW9uZW5kJywgJ2FuaW1hdGlvbmVuZCddLmZvckVhY2goZnVuY3Rpb24obmFtZSl7XG5cdFx0XHRcdFx0ZG9jdW1lbnRbX2FkZEV2ZW50TGlzdGVuZXJdKG5hbWUsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZigoL2QkfF5jLy50ZXN0KGRvY3VtZW50LnJlYWR5U3RhdGUpKSl7XG5cdFx0XHRcdFx0b25sb2FkKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9ubG9hZCk7XG5cdFx0XHRcdFx0ZG9jdW1lbnRbX2FkZEV2ZW50TGlzdGVuZXJdKCdET01Db250ZW50TG9hZGVkJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cyk7XG5cdFx0XHRcdFx0c2V0VGltZW91dChvbmxvYWQsIDIwMDAwKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKGxhenlzaXplcy5lbGVtZW50cy5sZW5ndGgpe1xuXHRcdFx0XHRcdGNoZWNrRWxlbWVudHMoKTtcblx0XHRcdFx0XHRyQUYuX2xzRmx1c2goKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdHRsZWRDaGVja0VsZW1lbnRzKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRjaGVja0VsZW1zOiB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLFxuXHRcdFx0dW52ZWlsOiB1bnZlaWxFbGVtZW50LFxuXHRcdFx0X2FMU0w6IGFsdExvYWRtb2RlU2Nyb2xsTGlzdG5lcixcblx0XHR9O1xuXHR9KSgpO1xuXG5cblx0dmFyIGF1dG9TaXplciA9IChmdW5jdGlvbigpe1xuXHRcdHZhciBhdXRvc2l6ZXNFbGVtcztcblxuXHRcdHZhciBzaXplRWxlbWVudCA9IHJBRkl0KGZ1bmN0aW9uKGVsZW0sIHBhcmVudCwgZXZlbnQsIHdpZHRoKXtcblx0XHRcdHZhciBzb3VyY2VzLCBpLCBsZW47XG5cdFx0XHRlbGVtLl9sYXp5c2l6ZXNXaWR0aCA9IHdpZHRoO1xuXHRcdFx0d2lkdGggKz0gJ3B4JztcblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgd2lkdGgpO1xuXG5cdFx0XHRpZihyZWdQaWN0dXJlLnRlc3QocGFyZW50Lm5vZGVOYW1lIHx8ICcnKSl7XG5cdFx0XHRcdHNvdXJjZXMgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NvdXJjZScpO1xuXHRcdFx0XHRmb3IoaSA9IDAsIGxlbiA9IHNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuXHRcdFx0XHRcdHNvdXJjZXNbaV0uc2V0QXR0cmlidXRlKCdzaXplcycsIHdpZHRoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZighZXZlbnQuZGV0YWlsLmRhdGFBdHRyKXtcblx0XHRcdFx0dXBkYXRlUG9seWZpbGwoZWxlbSwgZXZlbnQuZGV0YWlsKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHQvKipcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSBlbGVtIHtFbGVtZW50fVxuXHRcdCAqIEBwYXJhbSBkYXRhQXR0clxuXHRcdCAqIEBwYXJhbSBbd2lkdGhdIHsgbnVtYmVyIH1cblx0XHQgKi9cblx0XHR2YXIgZ2V0U2l6ZUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YUF0dHIsIHdpZHRoKXtcblx0XHRcdHZhciBldmVudDtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmKHBhcmVudCl7XG5cdFx0XHRcdHdpZHRoID0gZ2V0V2lkdGgoZWxlbSwgcGFyZW50LCB3aWR0aCk7XG5cdFx0XHRcdGV2ZW50ID0gdHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5YmVmb3Jlc2l6ZXMnLCB7d2lkdGg6IHdpZHRoLCBkYXRhQXR0cjogISFkYXRhQXR0cn0pO1xuXG5cdFx0XHRcdGlmKCFldmVudC5kZWZhdWx0UHJldmVudGVkKXtcblx0XHRcdFx0XHR3aWR0aCA9IGV2ZW50LmRldGFpbC53aWR0aDtcblxuXHRcdFx0XHRcdGlmKHdpZHRoICYmIHdpZHRoICE9PSBlbGVtLl9sYXp5c2l6ZXNXaWR0aCl7XG5cdFx0XHRcdFx0XHRzaXplRWxlbWVudChlbGVtLCBwYXJlbnQsIGV2ZW50LCB3aWR0aCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciB1cGRhdGVFbGVtZW50c1NpemVzID0gZnVuY3Rpb24oKXtcblx0XHRcdHZhciBpO1xuXHRcdFx0dmFyIGxlbiA9IGF1dG9zaXplc0VsZW1zLmxlbmd0aDtcblx0XHRcdGlmKGxlbil7XG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRcdGZvcig7IGkgPCBsZW47IGkrKyl7XG5cdFx0XHRcdFx0Z2V0U2l6ZUVsZW1lbnQoYXV0b3NpemVzRWxlbXNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBkZWJvdW5jZWRVcGRhdGVFbGVtZW50c1NpemVzID0gZGVib3VuY2UodXBkYXRlRWxlbWVudHNTaXplcyk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0XzogZnVuY3Rpb24oKXtcblx0XHRcdFx0YXV0b3NpemVzRWxlbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGxhenlTaXplc0NmZy5hdXRvc2l6ZXNDbGFzcyk7XG5cdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlZFVwZGF0ZUVsZW1lbnRzU2l6ZXMpO1xuXHRcdFx0fSxcblx0XHRcdGNoZWNrRWxlbXM6IGRlYm91bmNlZFVwZGF0ZUVsZW1lbnRzU2l6ZXMsXG5cdFx0XHR1cGRhdGVFbGVtOiBnZXRTaXplRWxlbWVudFxuXHRcdH07XG5cdH0pKCk7XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpe1xuXHRcdGlmKCFpbml0LmkgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSl7XG5cdFx0XHRpbml0LmkgPSB0cnVlO1xuXHRcdFx0YXV0b1NpemVyLl8oKTtcblx0XHRcdGxvYWRlci5fKCk7XG5cdFx0fVxuXHR9O1xuXG5cdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRpZihsYXp5U2l6ZXNDZmcuaW5pdCl7XG5cdFx0XHRpbml0KCk7XG5cdFx0fVxuXHR9KTtcblxuXHRsYXp5c2l6ZXMgPSB7XG5cdFx0LyoqXG5cdFx0ICogQHR5cGUgeyBMYXp5U2l6ZXNDb25maWdQYXJ0aWFsIH1cblx0XHQgKi9cblx0XHRjZmc6IGxhenlTaXplc0NmZyxcblx0XHRhdXRvU2l6ZXI6IGF1dG9TaXplcixcblx0XHRsb2FkZXI6IGxvYWRlcixcblx0XHRpbml0OiBpbml0LFxuXHRcdHVQOiB1cGRhdGVQb2x5ZmlsbCxcblx0XHRhQzogYWRkQ2xhc3MsXG5cdFx0ckM6IHJlbW92ZUNsYXNzLFxuXHRcdGhDOiBoYXNDbGFzcyxcblx0XHRmaXJlOiB0cmlnZ2VyRXZlbnQsXG5cdFx0Z1c6IGdldFdpZHRoLFxuXHRcdHJBRjogckFGLFxuXHR9O1xuXG5cdHJldHVybiBsYXp5c2l6ZXM7XG59XG4pKTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdEVWRU5UUzoge1xyXG5cdFx0Y2FydFVwZGF0ZWQ6ICdjYXJ0LXVwZGF0ZWQnXHJcblx0fSxcclxuXHRzdWJzY3JpYmVyczoge30sXHJcblx0c3Vic2NyaWJlOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaykge1xyXG5cdFx0aWYgKHRoaXMuc3Vic2NyaWJlcnNbZXZlbnROYW1lXSA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHRoaXMuc3Vic2NyaWJlcnNbZXZlbnROYW1lXSA9IFtdO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuc3Vic2NyaWJlcnNbZXZlbnROYW1lXSA9IFsuLi50aGlzLnN1YnNjcmliZXJzW2V2ZW50TmFtZV0sIGNhbGxiYWNrXTtcclxuXHJcblx0XHRyZXR1cm4gKCkgPT4ge1xyXG5cdFx0XHR0aGlzLnN1YnNjcmliZXJzW2V2ZW50TmFtZV0gPSB0aGlzLnN1YnNjcmliZXJzW2V2ZW50TmFtZV0uZmlsdGVyKChjYikgPT4ge1xyXG5cdFx0XHRcdHJldHVybiBjYiAhPT0gY2FsbGJhY2s7XHJcblx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHR9LFxyXG5cdHB1Ymxpc2g6IGZ1bmN0aW9uIChldmVudE5hbWUsIGRhdGEpIHtcclxuXHRcdGlmICh0aGlzLnN1YnNjcmliZXJzW2V2ZW50TmFtZV0pIHtcclxuXHRcdFx0dGhpcy5zdWJzY3JpYmVyc1tldmVudE5hbWVdLmZvckVhY2goKGNhbGxiYWNrKSA9PiB7XHJcblx0XHRcdFx0Y2FsbGJhY2soZGF0YSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iLCIvKiFcbiAqIFVuaWRyYWdnZXIgdjMuMC4xXG4gKiBEcmFnZ2FibGUgYmFzZSBjbGFzc1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuVW5pZHJhZ2dlciA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciApIHtcblxuZnVuY3Rpb24gVW5pZHJhZ2dlcigpIHt9XG5cbi8vIGluaGVyaXQgRXZFbWl0dGVyXG5sZXQgcHJvdG8gPSBVbmlkcmFnZ2VyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuLy8gLS0tLS0gYmluZCBzdGFydCAtLS0tLSAvL1xuXG4vLyB0cmlnZ2VyIGhhbmRsZXIgbWV0aG9kcyBmb3IgZXZlbnRzXG5wcm90by5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgbGV0IG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG5sZXQgc3RhcnRFdmVudCwgYWN0aXZlRXZlbnRzO1xuaWYgKCAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgKSB7XG4gIC8vIEhBQ0sgcHJlZmVyIFRvdWNoIEV2ZW50cyBhcyB5b3UgY2FuIHByZXZlbnREZWZhdWx0IG9uIHRvdWNoc3RhcnQgdG9cbiAgLy8gZGlzYWJsZSBzY3JvbGwgaW4gaU9TICYgbW9iaWxlIENocm9tZSBtZXRhZml6enkvZmxpY2tpdHkjMTE3N1xuICBzdGFydEV2ZW50ID0gJ3RvdWNoc3RhcnQnO1xuICBhY3RpdmVFdmVudHMgPSBbICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnIF07XG59IGVsc2UgaWYgKCB3aW5kb3cuUG9pbnRlckV2ZW50ICkge1xuICAvLyBQb2ludGVyIEV2ZW50c1xuICBzdGFydEV2ZW50ID0gJ3BvaW50ZXJkb3duJztcbiAgYWN0aXZlRXZlbnRzID0gWyAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJywgJ3BvaW50ZXJjYW5jZWwnIF07XG59IGVsc2Uge1xuICAvLyBtb3VzZSBldmVudHNcbiAgc3RhcnRFdmVudCA9ICdtb3VzZWRvd24nO1xuICBhY3RpdmVFdmVudHMgPSBbICdtb3VzZW1vdmUnLCAnbW91c2V1cCcgXTtcbn1cblxuLy8gcHJvdG90eXBlIHNvIGl0IGNhbiBiZSBvdmVyd3JpdGVhYmxlIGJ5IEZsaWNraXR5XG5wcm90by50b3VjaEFjdGlvblZhbHVlID0gJ25vbmUnO1xuXG5wcm90by5iaW5kSGFuZGxlcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9iaW5kSGFuZGxlcyggJ2FkZEV2ZW50TGlzdGVuZXInLCB0aGlzLnRvdWNoQWN0aW9uVmFsdWUgKTtcbn07XG5cbnByb3RvLnVuYmluZEhhbmRsZXMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fYmluZEhhbmRsZXMoICdyZW1vdmVFdmVudExpc3RlbmVyJywgJycgKTtcbn07XG5cbi8qKlxuICogQWRkIG9yIHJlbW92ZSBzdGFydCBldmVudFxuICogQHBhcmFtIHtTdHJpbmd9IGJpbmRNZXRob2QgLSBhZGRFdmVudExpc3RlbmVyIG9yIHJlbW92ZUV2ZW50TGlzdGVuZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0b3VjaEFjdGlvbiAtIHZhbHVlIGZvciB0b3VjaC1hY3Rpb24gQ1NTIHByb3BlcnR5XG4gKi9cbnByb3RvLl9iaW5kSGFuZGxlcyA9IGZ1bmN0aW9uKCBiaW5kTWV0aG9kLCB0b3VjaEFjdGlvbiApIHtcbiAgdGhpcy5oYW5kbGVzLmZvckVhY2goICggaGFuZGxlICkgPT4ge1xuICAgIGhhbmRsZVsgYmluZE1ldGhvZCBdKCBzdGFydEV2ZW50LCB0aGlzICk7XG4gICAgaGFuZGxlWyBiaW5kTWV0aG9kIF0oICdjbGljaycsIHRoaXMgKTtcbiAgICAvLyB0b3VjaC1hY3Rpb246IG5vbmUgdG8gb3ZlcnJpZGUgYnJvd3NlciB0b3VjaCBnZXN0dXJlcy4gbWV0YWZpenp5L2ZsaWNraXR5IzU0MFxuICAgIGlmICggd2luZG93LlBvaW50ZXJFdmVudCApIGhhbmRsZS5zdHlsZS50b3VjaEFjdGlvbiA9IHRvdWNoQWN0aW9uO1xuICB9ICk7XG59O1xuXG5wcm90by5iaW5kQWN0aXZlUG9pbnRlckV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICBhY3RpdmVFdmVudHMuZm9yRWFjaCggKCBldmVudE5hbWUgKSA9PiB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIGV2ZW50TmFtZSwgdGhpcyApO1xuICB9ICk7XG59O1xuXG5wcm90by51bmJpbmRBY3RpdmVQb2ludGVyRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gIGFjdGl2ZUV2ZW50cy5mb3JFYWNoKCAoIGV2ZW50TmFtZSApID0+IHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggZXZlbnROYW1lLCB0aGlzICk7XG4gIH0gKTtcbn07XG5cbi8vIC0tLS0tIGV2ZW50IGhhbmRsZXIgaGVscGVycyAtLS0tLSAvL1xuXG4vLyB0cmlnZ2VyIG1ldGhvZCB3aXRoIG1hdGNoaW5nIHBvaW50ZXJcbnByb3RvLndpdGhQb2ludGVyID0gZnVuY3Rpb24oIG1ldGhvZE5hbWUsIGV2ZW50ICkge1xuICBpZiAoIGV2ZW50LnBvaW50ZXJJZCA9PT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcbiAgICB0aGlzWyBtZXRob2ROYW1lIF0oIGV2ZW50LCBldmVudCApO1xuICB9XG59O1xuXG4vLyB0cmlnZ2VyIG1ldGhvZCB3aXRoIG1hdGNoaW5nIHRvdWNoXG5wcm90by53aXRoVG91Y2ggPSBmdW5jdGlvbiggbWV0aG9kTmFtZSwgZXZlbnQgKSB7XG4gIGxldCB0b3VjaDtcbiAgZm9yICggbGV0IGNoYW5nZWRUb3VjaCBvZiBldmVudC5jaGFuZ2VkVG91Y2hlcyApIHtcbiAgICBpZiAoIGNoYW5nZWRUb3VjaC5pZGVudGlmaWVyID09PSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyICkge1xuICAgICAgdG91Y2ggPSBjaGFuZ2VkVG91Y2g7XG4gICAgfVxuICB9XG4gIGlmICggdG91Y2ggKSB0aGlzWyBtZXRob2ROYW1lIF0oIGV2ZW50LCB0b3VjaCApO1xufTtcblxuLy8gLS0tLS0gc3RhcnQgZXZlbnQgLS0tLS0gLy9cblxucHJvdG8ub25tb3VzZWRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMucG9pbnRlckRvd24oIGV2ZW50LCBldmVudCApO1xufTtcblxucHJvdG8ub250b3VjaHN0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLnBvaW50ZXJEb3duKCBldmVudCwgZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gKTtcbn07XG5cbnByb3RvLm9ucG9pbnRlcmRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMucG9pbnRlckRvd24oIGV2ZW50LCBldmVudCApO1xufTtcblxuLy8gbm9kZXMgdGhhdCBoYXZlIHRleHQgZmllbGRzXG5jb25zdCBjdXJzb3JOb2RlcyA9IFsgJ1RFWFRBUkVBJywgJ0lOUFVUJywgJ1NFTEVDVCcsICdPUFRJT04nIF07XG4vLyBpbnB1dCB0eXBlcyB0aGF0IGRvIG5vdCBoYXZlIHRleHQgZmllbGRzXG5jb25zdCBjbGlja1R5cGVzID0gWyAncmFkaW8nLCAnY2hlY2tib3gnLCAnYnV0dG9uJywgJ3N1Ym1pdCcsICdpbWFnZScsICdmaWxlJyBdO1xuXG4vKipcbiAqIGFueSB0aW1lIHlvdSBzZXQgYGV2ZW50LCBwb2ludGVyYCBpdCByZWZlcnMgdG86XG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtFdmVudCB8IFRvdWNofSBwb2ludGVyXG4gKi9cbnByb3RvLnBvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICAvLyBkaXNtaXNzIG11bHRpLXRvdWNoIHRhcHMsIHJpZ2h0IGNsaWNrcywgYW5kIGNsaWNrcyBvbiB0ZXh0IGZpZWxkc1xuICBsZXQgaXNDdXJzb3JOb2RlID0gY3Vyc29yTm9kZXMuaW5jbHVkZXMoIGV2ZW50LnRhcmdldC5ub2RlTmFtZSApO1xuICBsZXQgaXNDbGlja1R5cGUgPSBjbGlja1R5cGVzLmluY2x1ZGVzKCBldmVudC50YXJnZXQudHlwZSApO1xuICBsZXQgaXNPa2F5RWxlbWVudCA9ICFpc0N1cnNvck5vZGUgfHwgaXNDbGlja1R5cGU7XG4gIGxldCBpc09rYXkgPSAhdGhpcy5pc1BvaW50ZXJEb3duICYmICFldmVudC5idXR0b24gJiYgaXNPa2F5RWxlbWVudDtcbiAgaWYgKCAhaXNPa2F5ICkgcmV0dXJuO1xuXG4gIHRoaXMuaXNQb2ludGVyRG93biA9IHRydWU7XG4gIC8vIHNhdmUgcG9pbnRlciBpZGVudGlmaWVyIHRvIG1hdGNoIHVwIHRvdWNoIGV2ZW50c1xuICB0aGlzLnBvaW50ZXJJZGVudGlmaWVyID0gcG9pbnRlci5wb2ludGVySWQgIT09IHVuZGVmaW5lZCA/XG4gICAgLy8gcG9pbnRlcklkIGZvciBwb2ludGVyIGV2ZW50cywgdG91Y2guaW5kZW50aWZpZXIgZm9yIHRvdWNoIGV2ZW50c1xuICAgIHBvaW50ZXIucG9pbnRlcklkIDogcG9pbnRlci5pZGVudGlmaWVyO1xuICAvLyB0cmFjayBwb3NpdGlvbiBmb3IgbW92ZVxuICB0aGlzLnBvaW50ZXJEb3duUG9pbnRlciA9IHtcbiAgICBwYWdlWDogcG9pbnRlci5wYWdlWCxcbiAgICBwYWdlWTogcG9pbnRlci5wYWdlWSxcbiAgfTtcblxuICB0aGlzLmJpbmRBY3RpdmVQb2ludGVyRXZlbnRzKCk7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlckRvd24nLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIC0tLS0tIG1vdmUgLS0tLS0gLy9cblxucHJvdG8ub25tb3VzZW1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMucG9pbnRlck1vdmUoIGV2ZW50LCBldmVudCApO1xufTtcblxucHJvdG8ub25wb2ludGVybW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy53aXRoUG9pbnRlciggJ3BvaW50ZXJNb3ZlJywgZXZlbnQgKTtcbn07XG5cbnByb3RvLm9udG91Y2htb3ZlID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLndpdGhUb3VjaCggJ3BvaW50ZXJNb3ZlJywgZXZlbnQgKTtcbn07XG5cbnByb3RvLnBvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICBsZXQgbW92ZVZlY3RvciA9IHtcbiAgICB4OiBwb2ludGVyLnBhZ2VYIC0gdGhpcy5wb2ludGVyRG93blBvaW50ZXIucGFnZVgsXG4gICAgeTogcG9pbnRlci5wYWdlWSAtIHRoaXMucG9pbnRlckRvd25Qb2ludGVyLnBhZ2VZLFxuICB9O1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJNb3ZlJywgWyBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciBdICk7XG4gIC8vIHN0YXJ0IGRyYWcgaWYgcG9pbnRlciBoYXMgbW92ZWQgZmFyIGVub3VnaCB0byBzdGFydCBkcmFnXG4gIGxldCBpc0RyYWdTdGFydGluZyA9ICF0aGlzLmlzRHJhZ2dpbmcgJiYgdGhpcy5oYXNEcmFnU3RhcnRlZCggbW92ZVZlY3RvciApO1xuICBpZiAoIGlzRHJhZ1N0YXJ0aW5nICkgdGhpcy5kcmFnU3RhcnQoIGV2ZW50LCBwb2ludGVyICk7XG4gIGlmICggdGhpcy5pc0RyYWdnaW5nICkgdGhpcy5kcmFnTW92ZSggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKTtcbn07XG5cbi8vIGNvbmRpdGlvbiBpZiBwb2ludGVyIGhhcyBtb3ZlZCBmYXIgZW5vdWdoIHRvIHN0YXJ0IGRyYWdcbnByb3RvLmhhc0RyYWdTdGFydGVkID0gZnVuY3Rpb24oIG1vdmVWZWN0b3IgKSB7XG4gIHJldHVybiBNYXRoLmFicyggbW92ZVZlY3Rvci54ICkgPiAzIHx8IE1hdGguYWJzKCBtb3ZlVmVjdG9yLnkgKSA+IDM7XG59O1xuXG4vLyAtLS0tLSBkcmFnIC0tLS0tIC8vXG5cbnByb3RvLmRyYWdTdGFydCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgdGhpcy5pc1ByZXZlbnRpbmdDbGlja3MgPSB0cnVlOyAvLyBzZXQgZmxhZyB0byBwcmV2ZW50IGNsaWNrc1xuICB0aGlzLmVtaXRFdmVudCggJ2RyYWdTdGFydCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxucHJvdG8uZHJhZ01vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ01vdmUnLCBbIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcbn07XG5cbi8vIC0tLS0tIGVuZCAtLS0tLSAvL1xuXG5wcm90by5vbm1vdXNldXAgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMucG9pbnRlclVwKCBldmVudCwgZXZlbnQgKTtcbn07XG5cbnByb3RvLm9ucG9pbnRlcnVwID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLndpdGhQb2ludGVyKCAncG9pbnRlclVwJywgZXZlbnQgKTtcbn07XG5cbnByb3RvLm9udG91Y2hlbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMud2l0aFRvdWNoKCAncG9pbnRlclVwJywgZXZlbnQgKTtcbn07XG5cbnByb3RvLnBvaW50ZXJVcCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5wb2ludGVyRG9uZSgpO1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJVcCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xuXG4gIGlmICggdGhpcy5pc0RyYWdnaW5nICkge1xuICAgIHRoaXMuZHJhZ0VuZCggZXZlbnQsIHBvaW50ZXIgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBwb2ludGVyIGRpZG4ndCBtb3ZlIGVub3VnaCBmb3IgZHJhZyB0byBzdGFydFxuICAgIHRoaXMuc3RhdGljQ2xpY2soIGV2ZW50LCBwb2ludGVyICk7XG4gIH1cbn07XG5cbnByb3RvLmRyYWdFbmQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlOyAvLyByZXNldCBmbGFnXG4gIC8vIHJlLWVuYWJsZSBjbGlja2luZyBhc3luY1xuICBzZXRUaW1lb3V0KCAoKSA9PiBkZWxldGUgdGhpcy5pc1ByZXZlbnRpbmdDbGlja3MgKTtcblxuICB0aGlzLmVtaXRFdmVudCggJ2RyYWdFbmQnLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIHRyaWdnZXJlZCBvbiBwb2ludGVyIHVwICYgcG9pbnRlciBjYW5jZWxcbnByb3RvLnBvaW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaXNQb2ludGVyRG93biA9IGZhbHNlO1xuICBkZWxldGUgdGhpcy5wb2ludGVySWRlbnRpZmllcjtcbiAgdGhpcy51bmJpbmRBY3RpdmVQb2ludGVyRXZlbnRzKCk7XG4gIHRoaXMuZW1pdEV2ZW50KCdwb2ludGVyRG9uZScpO1xufTtcblxuLy8gLS0tLS0gY2FuY2VsIC0tLS0tIC8vXG5cbnByb3RvLm9ucG9pbnRlcmNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy53aXRoUG9pbnRlciggJ3BvaW50ZXJDYW5jZWwnLCBldmVudCApO1xufTtcblxucHJvdG8ub250b3VjaGNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy53aXRoVG91Y2goICdwb2ludGVyQ2FuY2VsJywgZXZlbnQgKTtcbn07XG5cbnByb3RvLnBvaW50ZXJDYW5jZWwgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMucG9pbnRlckRvbmUoKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyQ2FuY2VsJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyAtLS0tLSBjbGljayAtLS0tLSAvL1xuXG4vLyBoYW5kbGUgYWxsIGNsaWNrcyBhbmQgcHJldmVudCBjbGlja3Mgd2hlbiBkcmFnZ2luZ1xucHJvdG8ub25jbGljayA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyApIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG59O1xuXG4vLyB0cmlnZ2VyZWQgYWZ0ZXIgcG9pbnRlciBkb3duICYgdXAgd2l0aCBuby90aW55IG1vdmVtZW50XG5wcm90by5zdGF0aWNDbGljayA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgLy8gaWdub3JlIGVtdWxhdGVkIG1vdXNlIHVwIGNsaWNrc1xuICBsZXQgaXNNb3VzZXVwID0gZXZlbnQudHlwZSA9PT0gJ21vdXNldXAnO1xuICBpZiAoIGlzTW91c2V1cCAmJiB0aGlzLmlzSWdub3JpbmdNb3VzZVVwICkgcmV0dXJuO1xuXG4gIHRoaXMuZW1pdEV2ZW50KCAnc3RhdGljQ2xpY2snLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcblxuICAvLyBzZXQgZmxhZyBmb3IgZW11bGF0ZWQgY2xpY2tzIDMwMG1zIGFmdGVyIHRvdWNoZW5kXG4gIGlmICggaXNNb3VzZXVwICkge1xuICAgIHRoaXMuaXNJZ25vcmluZ01vdXNlVXAgPSB0cnVlO1xuICAgIC8vIHJlc2V0IGZsYWcgYWZ0ZXIgNDAwbXNcbiAgICBzZXRUaW1lb3V0KCAoKSA9PiB7XG4gICAgICBkZWxldGUgdGhpcy5pc0lnbm9yaW5nTW91c2VVcDtcbiAgICB9LCA0MDAgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBVbmlkcmFnZ2VyO1xuXG59ICkgKTtcbiIsIi8vIHZlbmRvclxyXG53aW5kb3cuRmxpY2tpdHkgPSByZXF1aXJlKCdmbGlja2l0eScpO1xyXG5yZXF1aXJlKCdsYXp5c2l6ZXMnKTtcclxuXHJcbi8vIG1vZHVsZXNcclxud2luZG93LlB1YlN1YiA9IHJlcXVpcmUoJy4vc2NyaXB0cy9wdWJzdWInKTtcclxuXHJcbmZ1bmN0aW9uIGRlYm91bmNlKGZuLCB3YWl0KSB7XHJcblx0bGV0IHQ7XHJcblx0cmV0dXJuICguLi5hcmdzKSA9PiB7XHJcblx0XHRjbGVhclRpbWVvdXQodCk7XHJcblx0XHR0ID0gc2V0VGltZW91dCgoKSA9PiBmbi5hcHBseSh0aGlzLCBhcmdzKSwgd2FpdCk7XHJcblx0fTtcclxufVxyXG4iXX0=
